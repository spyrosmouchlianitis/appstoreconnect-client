/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect-client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// GameCenterMatchmakingRuleSetsAPIService GameCenterMatchmakingRuleSetsAPI service
type GameCenterMatchmakingRuleSetsAPIService service

type ApiGameCenterMatchmakingRuleSetsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingRuleSetsAPIService
	gameCenterMatchmakingRuleSetCreateRequest *GameCenterMatchmakingRuleSetCreateRequest
}

// GameCenterMatchmakingRuleSet representation
func (r ApiGameCenterMatchmakingRuleSetsCreateInstanceRequest) GameCenterMatchmakingRuleSetCreateRequest(gameCenterMatchmakingRuleSetCreateRequest GameCenterMatchmakingRuleSetCreateRequest) ApiGameCenterMatchmakingRuleSetsCreateInstanceRequest {
	r.gameCenterMatchmakingRuleSetCreateRequest = &gameCenterMatchmakingRuleSetCreateRequest
	return r
}

func (r ApiGameCenterMatchmakingRuleSetsCreateInstanceRequest) Execute() (*GameCenterMatchmakingRuleSetResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRuleSetsCreateInstanceExecute(r)
}

/*
GameCenterMatchmakingRuleSetsCreateInstance Method for GameCenterMatchmakingRuleSetsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGameCenterMatchmakingRuleSetsCreateInstanceRequest
*/
func (a *GameCenterMatchmakingRuleSetsAPIService) GameCenterMatchmakingRuleSetsCreateInstance(ctx context.Context) ApiGameCenterMatchmakingRuleSetsCreateInstanceRequest {
	return ApiGameCenterMatchmakingRuleSetsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingRuleSetResponse
func (a *GameCenterMatchmakingRuleSetsAPIService) GameCenterMatchmakingRuleSetsCreateInstanceExecute(r ApiGameCenterMatchmakingRuleSetsCreateInstanceRequest) (*GameCenterMatchmakingRuleSetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingRuleSetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingRuleSetsAPIService.GameCenterMatchmakingRuleSetsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRuleSets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterMatchmakingRuleSetCreateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterMatchmakingRuleSetCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterMatchmakingRuleSetCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingRuleSetsDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingRuleSetsAPIService
	id string
}

func (r ApiGameCenterMatchmakingRuleSetsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRuleSetsDeleteInstanceExecute(r)
}

/*
GameCenterMatchmakingRuleSetsDeleteInstance Method for GameCenterMatchmakingRuleSetsDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingRuleSetsDeleteInstanceRequest
*/
func (a *GameCenterMatchmakingRuleSetsAPIService) GameCenterMatchmakingRuleSetsDeleteInstance(ctx context.Context, id string) ApiGameCenterMatchmakingRuleSetsDeleteInstanceRequest {
	return ApiGameCenterMatchmakingRuleSetsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GameCenterMatchmakingRuleSetsAPIService) GameCenterMatchmakingRuleSetsDeleteInstanceExecute(r ApiGameCenterMatchmakingRuleSetsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingRuleSetsAPIService.GameCenterMatchmakingRuleSetsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRuleSets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingRuleSetsGetCollectionRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingRuleSetsAPIService
	fieldsGameCenterMatchmakingRuleSets *[]string
	fieldsGameCenterMatchmakingTeams *[]string
	fieldsGameCenterMatchmakingRules *[]string
	fieldsGameCenterMatchmakingQueues *[]string
	limit *int32
	include *[]string
	limitMatchmakingQueues *int32
	limitRules *int32
	limitTeams *int32
}

// the fields to include for returned resources of type gameCenterMatchmakingRuleSets
func (r ApiGameCenterMatchmakingRuleSetsGetCollectionRequest) FieldsGameCenterMatchmakingRuleSets(fieldsGameCenterMatchmakingRuleSets []string) ApiGameCenterMatchmakingRuleSetsGetCollectionRequest {
	r.fieldsGameCenterMatchmakingRuleSets = &fieldsGameCenterMatchmakingRuleSets
	return r
}

// the fields to include for returned resources of type gameCenterMatchmakingTeams
func (r ApiGameCenterMatchmakingRuleSetsGetCollectionRequest) FieldsGameCenterMatchmakingTeams(fieldsGameCenterMatchmakingTeams []string) ApiGameCenterMatchmakingRuleSetsGetCollectionRequest {
	r.fieldsGameCenterMatchmakingTeams = &fieldsGameCenterMatchmakingTeams
	return r
}

// the fields to include for returned resources of type gameCenterMatchmakingRules
func (r ApiGameCenterMatchmakingRuleSetsGetCollectionRequest) FieldsGameCenterMatchmakingRules(fieldsGameCenterMatchmakingRules []string) ApiGameCenterMatchmakingRuleSetsGetCollectionRequest {
	r.fieldsGameCenterMatchmakingRules = &fieldsGameCenterMatchmakingRules
	return r
}

// the fields to include for returned resources of type gameCenterMatchmakingQueues
func (r ApiGameCenterMatchmakingRuleSetsGetCollectionRequest) FieldsGameCenterMatchmakingQueues(fieldsGameCenterMatchmakingQueues []string) ApiGameCenterMatchmakingRuleSetsGetCollectionRequest {
	r.fieldsGameCenterMatchmakingQueues = &fieldsGameCenterMatchmakingQueues
	return r
}

// maximum resources per page
func (r ApiGameCenterMatchmakingRuleSetsGetCollectionRequest) Limit(limit int32) ApiGameCenterMatchmakingRuleSetsGetCollectionRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterMatchmakingRuleSetsGetCollectionRequest) Include(include []string) ApiGameCenterMatchmakingRuleSetsGetCollectionRequest {
	r.include = &include
	return r
}

// maximum number of related matchmakingQueues returned (when they are included)
func (r ApiGameCenterMatchmakingRuleSetsGetCollectionRequest) LimitMatchmakingQueues(limitMatchmakingQueues int32) ApiGameCenterMatchmakingRuleSetsGetCollectionRequest {
	r.limitMatchmakingQueues = &limitMatchmakingQueues
	return r
}

// maximum number of related rules returned (when they are included)
func (r ApiGameCenterMatchmakingRuleSetsGetCollectionRequest) LimitRules(limitRules int32) ApiGameCenterMatchmakingRuleSetsGetCollectionRequest {
	r.limitRules = &limitRules
	return r
}

// maximum number of related teams returned (when they are included)
func (r ApiGameCenterMatchmakingRuleSetsGetCollectionRequest) LimitTeams(limitTeams int32) ApiGameCenterMatchmakingRuleSetsGetCollectionRequest {
	r.limitTeams = &limitTeams
	return r
}

func (r ApiGameCenterMatchmakingRuleSetsGetCollectionRequest) Execute() (*GameCenterMatchmakingRuleSetsResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRuleSetsGetCollectionExecute(r)
}

/*
GameCenterMatchmakingRuleSetsGetCollection Method for GameCenterMatchmakingRuleSetsGetCollection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGameCenterMatchmakingRuleSetsGetCollectionRequest
*/
func (a *GameCenterMatchmakingRuleSetsAPIService) GameCenterMatchmakingRuleSetsGetCollection(ctx context.Context) ApiGameCenterMatchmakingRuleSetsGetCollectionRequest {
	return ApiGameCenterMatchmakingRuleSetsGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingRuleSetsResponse
func (a *GameCenterMatchmakingRuleSetsAPIService) GameCenterMatchmakingRuleSetsGetCollectionExecute(r ApiGameCenterMatchmakingRuleSetsGetCollectionRequest) (*GameCenterMatchmakingRuleSetsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingRuleSetsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingRuleSetsAPIService.GameCenterMatchmakingRuleSetsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRuleSets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterMatchmakingRuleSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterMatchmakingRuleSets]", r.fieldsGameCenterMatchmakingRuleSets, "form", "csv")
	}
	if r.fieldsGameCenterMatchmakingTeams != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterMatchmakingTeams]", r.fieldsGameCenterMatchmakingTeams, "form", "csv")
	}
	if r.fieldsGameCenterMatchmakingRules != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterMatchmakingRules]", r.fieldsGameCenterMatchmakingRules, "form", "csv")
	}
	if r.fieldsGameCenterMatchmakingQueues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterMatchmakingQueues]", r.fieldsGameCenterMatchmakingQueues, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitMatchmakingQueues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[matchmakingQueues]", r.limitMatchmakingQueues, "form", "")
	}
	if r.limitRules != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[rules]", r.limitRules, "form", "")
	}
	if r.limitTeams != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[teams]", r.limitTeams, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingRuleSetsGetInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingRuleSetsAPIService
	id string
	fieldsGameCenterMatchmakingRuleSets *[]string
	fieldsGameCenterMatchmakingTeams *[]string
	fieldsGameCenterMatchmakingRules *[]string
	fieldsGameCenterMatchmakingQueues *[]string
	include *[]string
	limitMatchmakingQueues *int32
	limitRules *int32
	limitTeams *int32
}

// the fields to include for returned resources of type gameCenterMatchmakingRuleSets
func (r ApiGameCenterMatchmakingRuleSetsGetInstanceRequest) FieldsGameCenterMatchmakingRuleSets(fieldsGameCenterMatchmakingRuleSets []string) ApiGameCenterMatchmakingRuleSetsGetInstanceRequest {
	r.fieldsGameCenterMatchmakingRuleSets = &fieldsGameCenterMatchmakingRuleSets
	return r
}

// the fields to include for returned resources of type gameCenterMatchmakingTeams
func (r ApiGameCenterMatchmakingRuleSetsGetInstanceRequest) FieldsGameCenterMatchmakingTeams(fieldsGameCenterMatchmakingTeams []string) ApiGameCenterMatchmakingRuleSetsGetInstanceRequest {
	r.fieldsGameCenterMatchmakingTeams = &fieldsGameCenterMatchmakingTeams
	return r
}

// the fields to include for returned resources of type gameCenterMatchmakingRules
func (r ApiGameCenterMatchmakingRuleSetsGetInstanceRequest) FieldsGameCenterMatchmakingRules(fieldsGameCenterMatchmakingRules []string) ApiGameCenterMatchmakingRuleSetsGetInstanceRequest {
	r.fieldsGameCenterMatchmakingRules = &fieldsGameCenterMatchmakingRules
	return r
}

// the fields to include for returned resources of type gameCenterMatchmakingQueues
func (r ApiGameCenterMatchmakingRuleSetsGetInstanceRequest) FieldsGameCenterMatchmakingQueues(fieldsGameCenterMatchmakingQueues []string) ApiGameCenterMatchmakingRuleSetsGetInstanceRequest {
	r.fieldsGameCenterMatchmakingQueues = &fieldsGameCenterMatchmakingQueues
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterMatchmakingRuleSetsGetInstanceRequest) Include(include []string) ApiGameCenterMatchmakingRuleSetsGetInstanceRequest {
	r.include = &include
	return r
}

// maximum number of related matchmakingQueues returned (when they are included)
func (r ApiGameCenterMatchmakingRuleSetsGetInstanceRequest) LimitMatchmakingQueues(limitMatchmakingQueues int32) ApiGameCenterMatchmakingRuleSetsGetInstanceRequest {
	r.limitMatchmakingQueues = &limitMatchmakingQueues
	return r
}

// maximum number of related rules returned (when they are included)
func (r ApiGameCenterMatchmakingRuleSetsGetInstanceRequest) LimitRules(limitRules int32) ApiGameCenterMatchmakingRuleSetsGetInstanceRequest {
	r.limitRules = &limitRules
	return r
}

// maximum number of related teams returned (when they are included)
func (r ApiGameCenterMatchmakingRuleSetsGetInstanceRequest) LimitTeams(limitTeams int32) ApiGameCenterMatchmakingRuleSetsGetInstanceRequest {
	r.limitTeams = &limitTeams
	return r
}

func (r ApiGameCenterMatchmakingRuleSetsGetInstanceRequest) Execute() (*GameCenterMatchmakingRuleSetResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRuleSetsGetInstanceExecute(r)
}

/*
GameCenterMatchmakingRuleSetsGetInstance Method for GameCenterMatchmakingRuleSetsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingRuleSetsGetInstanceRequest
*/
func (a *GameCenterMatchmakingRuleSetsAPIService) GameCenterMatchmakingRuleSetsGetInstance(ctx context.Context, id string) ApiGameCenterMatchmakingRuleSetsGetInstanceRequest {
	return ApiGameCenterMatchmakingRuleSetsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingRuleSetResponse
func (a *GameCenterMatchmakingRuleSetsAPIService) GameCenterMatchmakingRuleSetsGetInstanceExecute(r ApiGameCenterMatchmakingRuleSetsGetInstanceRequest) (*GameCenterMatchmakingRuleSetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingRuleSetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingRuleSetsAPIService.GameCenterMatchmakingRuleSetsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRuleSets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterMatchmakingRuleSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterMatchmakingRuleSets]", r.fieldsGameCenterMatchmakingRuleSets, "form", "csv")
	}
	if r.fieldsGameCenterMatchmakingTeams != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterMatchmakingTeams]", r.fieldsGameCenterMatchmakingTeams, "form", "csv")
	}
	if r.fieldsGameCenterMatchmakingRules != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterMatchmakingRules]", r.fieldsGameCenterMatchmakingRules, "form", "csv")
	}
	if r.fieldsGameCenterMatchmakingQueues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterMatchmakingQueues]", r.fieldsGameCenterMatchmakingQueues, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitMatchmakingQueues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[matchmakingQueues]", r.limitMatchmakingQueues, "form", "")
	}
	if r.limitRules != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[rules]", r.limitRules, "form", "")
	}
	if r.limitTeams != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[teams]", r.limitTeams, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingRuleSetsAPIService
	id string
	fieldsGameCenterMatchmakingQueues *[]string
	fieldsGameCenterMatchmakingRuleSets *[]string
	limit *int32
	include *[]string
}

// the fields to include for returned resources of type gameCenterMatchmakingQueues
func (r ApiGameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRequest) FieldsGameCenterMatchmakingQueues(fieldsGameCenterMatchmakingQueues []string) ApiGameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRequest {
	r.fieldsGameCenterMatchmakingQueues = &fieldsGameCenterMatchmakingQueues
	return r
}

// the fields to include for returned resources of type gameCenterMatchmakingRuleSets
func (r ApiGameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRequest) FieldsGameCenterMatchmakingRuleSets(fieldsGameCenterMatchmakingRuleSets []string) ApiGameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRequest {
	r.fieldsGameCenterMatchmakingRuleSets = &fieldsGameCenterMatchmakingRuleSets
	return r
}

// maximum resources per page
func (r ApiGameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRequest) Include(include []string) ApiGameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRequest) Execute() (*GameCenterMatchmakingQueuesResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedExecute(r)
}

/*
GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated Method for GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRequest
*/
func (a *GameCenterMatchmakingRuleSetsAPIService) GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated(ctx context.Context, id string) ApiGameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRequest {
	return ApiGameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingQueuesResponse
func (a *GameCenterMatchmakingRuleSetsAPIService) GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedExecute(r ApiGameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedRequest) (*GameCenterMatchmakingQueuesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingQueuesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingRuleSetsAPIService.GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRuleSets/{id}/matchmakingQueues"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterMatchmakingQueues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterMatchmakingQueues]", r.fieldsGameCenterMatchmakingQueues, "form", "csv")
	}
	if r.fieldsGameCenterMatchmakingRuleSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterMatchmakingRuleSets]", r.fieldsGameCenterMatchmakingRuleSets, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingRuleSetsRulesGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingRuleSetsAPIService
	id string
	fieldsGameCenterMatchmakingRules *[]string
	limit *int32
}

// the fields to include for returned resources of type gameCenterMatchmakingRules
func (r ApiGameCenterMatchmakingRuleSetsRulesGetToManyRelatedRequest) FieldsGameCenterMatchmakingRules(fieldsGameCenterMatchmakingRules []string) ApiGameCenterMatchmakingRuleSetsRulesGetToManyRelatedRequest {
	r.fieldsGameCenterMatchmakingRules = &fieldsGameCenterMatchmakingRules
	return r
}

// maximum resources per page
func (r ApiGameCenterMatchmakingRuleSetsRulesGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterMatchmakingRuleSetsRulesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r ApiGameCenterMatchmakingRuleSetsRulesGetToManyRelatedRequest) Execute() (*GameCenterMatchmakingRulesResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRuleSetsRulesGetToManyRelatedExecute(r)
}

/*
GameCenterMatchmakingRuleSetsRulesGetToManyRelated Method for GameCenterMatchmakingRuleSetsRulesGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingRuleSetsRulesGetToManyRelatedRequest
*/
func (a *GameCenterMatchmakingRuleSetsAPIService) GameCenterMatchmakingRuleSetsRulesGetToManyRelated(ctx context.Context, id string) ApiGameCenterMatchmakingRuleSetsRulesGetToManyRelatedRequest {
	return ApiGameCenterMatchmakingRuleSetsRulesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingRulesResponse
func (a *GameCenterMatchmakingRuleSetsAPIService) GameCenterMatchmakingRuleSetsRulesGetToManyRelatedExecute(r ApiGameCenterMatchmakingRuleSetsRulesGetToManyRelatedRequest) (*GameCenterMatchmakingRulesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingRulesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingRuleSetsAPIService.GameCenterMatchmakingRuleSetsRulesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRuleSets/{id}/rules"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterMatchmakingRules != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterMatchmakingRules]", r.fieldsGameCenterMatchmakingRules, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingRuleSetsTeamsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingRuleSetsAPIService
	id string
	fieldsGameCenterMatchmakingTeams *[]string
	limit *int32
}

// the fields to include for returned resources of type gameCenterMatchmakingTeams
func (r ApiGameCenterMatchmakingRuleSetsTeamsGetToManyRelatedRequest) FieldsGameCenterMatchmakingTeams(fieldsGameCenterMatchmakingTeams []string) ApiGameCenterMatchmakingRuleSetsTeamsGetToManyRelatedRequest {
	r.fieldsGameCenterMatchmakingTeams = &fieldsGameCenterMatchmakingTeams
	return r
}

// maximum resources per page
func (r ApiGameCenterMatchmakingRuleSetsTeamsGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterMatchmakingRuleSetsTeamsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r ApiGameCenterMatchmakingRuleSetsTeamsGetToManyRelatedRequest) Execute() (*GameCenterMatchmakingTeamsResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedExecute(r)
}

/*
GameCenterMatchmakingRuleSetsTeamsGetToManyRelated Method for GameCenterMatchmakingRuleSetsTeamsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingRuleSetsTeamsGetToManyRelatedRequest
*/
func (a *GameCenterMatchmakingRuleSetsAPIService) GameCenterMatchmakingRuleSetsTeamsGetToManyRelated(ctx context.Context, id string) ApiGameCenterMatchmakingRuleSetsTeamsGetToManyRelatedRequest {
	return ApiGameCenterMatchmakingRuleSetsTeamsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingTeamsResponse
func (a *GameCenterMatchmakingRuleSetsAPIService) GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedExecute(r ApiGameCenterMatchmakingRuleSetsTeamsGetToManyRelatedRequest) (*GameCenterMatchmakingTeamsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingTeamsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingRuleSetsAPIService.GameCenterMatchmakingRuleSetsTeamsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRuleSets/{id}/teams"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterMatchmakingTeams != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterMatchmakingTeams]", r.fieldsGameCenterMatchmakingTeams, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingRuleSetsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingRuleSetsAPIService
	id string
	gameCenterMatchmakingRuleSetUpdateRequest *GameCenterMatchmakingRuleSetUpdateRequest
}

// GameCenterMatchmakingRuleSet representation
func (r ApiGameCenterMatchmakingRuleSetsUpdateInstanceRequest) GameCenterMatchmakingRuleSetUpdateRequest(gameCenterMatchmakingRuleSetUpdateRequest GameCenterMatchmakingRuleSetUpdateRequest) ApiGameCenterMatchmakingRuleSetsUpdateInstanceRequest {
	r.gameCenterMatchmakingRuleSetUpdateRequest = &gameCenterMatchmakingRuleSetUpdateRequest
	return r
}

func (r ApiGameCenterMatchmakingRuleSetsUpdateInstanceRequest) Execute() (*GameCenterMatchmakingRuleSetResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRuleSetsUpdateInstanceExecute(r)
}

/*
GameCenterMatchmakingRuleSetsUpdateInstance Method for GameCenterMatchmakingRuleSetsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingRuleSetsUpdateInstanceRequest
*/
func (a *GameCenterMatchmakingRuleSetsAPIService) GameCenterMatchmakingRuleSetsUpdateInstance(ctx context.Context, id string) ApiGameCenterMatchmakingRuleSetsUpdateInstanceRequest {
	return ApiGameCenterMatchmakingRuleSetsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingRuleSetResponse
func (a *GameCenterMatchmakingRuleSetsAPIService) GameCenterMatchmakingRuleSetsUpdateInstanceExecute(r ApiGameCenterMatchmakingRuleSetsUpdateInstanceRequest) (*GameCenterMatchmakingRuleSetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingRuleSetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingRuleSetsAPIService.GameCenterMatchmakingRuleSetsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRuleSets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterMatchmakingRuleSetUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterMatchmakingRuleSetUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterMatchmakingRuleSetUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

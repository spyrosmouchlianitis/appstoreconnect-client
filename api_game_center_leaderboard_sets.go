/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// GameCenterLeaderboardSetsAPIService GameCenterLeaderboardSetsAPI service
type GameCenterLeaderboardSetsAPIService service

type ApiGameCenterLeaderboardSetsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetsAPIService
	gameCenterLeaderboardSetCreateRequest *GameCenterLeaderboardSetCreateRequest
}

// GameCenterLeaderboardSet representation
func (r ApiGameCenterLeaderboardSetsCreateInstanceRequest) GameCenterLeaderboardSetCreateRequest(gameCenterLeaderboardSetCreateRequest GameCenterLeaderboardSetCreateRequest) ApiGameCenterLeaderboardSetsCreateInstanceRequest {
	r.gameCenterLeaderboardSetCreateRequest = &gameCenterLeaderboardSetCreateRequest
	return r
}

func (r ApiGameCenterLeaderboardSetsCreateInstanceRequest) Execute() (*GameCenterLeaderboardSetResponse, *http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetsCreateInstanceExecute(r)
}

/*
GameCenterLeaderboardSetsCreateInstance Method for GameCenterLeaderboardSetsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGameCenterLeaderboardSetsCreateInstanceRequest
*/
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsCreateInstance(ctx context.Context) ApiGameCenterLeaderboardSetsCreateInstanceRequest {
	return ApiGameCenterLeaderboardSetsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GameCenterLeaderboardSetResponse
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsCreateInstanceExecute(r ApiGameCenterLeaderboardSetsCreateInstanceRequest) (*GameCenterLeaderboardSetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterLeaderboardSetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetsAPIService.GameCenterLeaderboardSetsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterLeaderboardSetCreateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterLeaderboardSetCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterLeaderboardSetCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetsDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetsAPIService
	id string
}

func (r ApiGameCenterLeaderboardSetsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetsDeleteInstanceExecute(r)
}

/*
GameCenterLeaderboardSetsDeleteInstance Method for GameCenterLeaderboardSetsDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterLeaderboardSetsDeleteInstanceRequest
*/
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsDeleteInstance(ctx context.Context, id string) ApiGameCenterLeaderboardSetsDeleteInstanceRequest {
	return ApiGameCenterLeaderboardSetsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsDeleteInstanceExecute(r ApiGameCenterLeaderboardSetsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetsAPIService.GameCenterLeaderboardSetsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetsAPIService
	id string
	gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest *GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
}

// List of related linkages
func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipRequest) GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest(gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipRequest {
	r.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest = &gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
	return r
}

func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipExecute(r)
}

/*
GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship Method for GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipRequest
*/
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship(ctx context.Context, id string) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipRequest {
	return ApiGameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipExecute(r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetsAPIService.GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest == nil {
		return nil, reportError("gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetsAPIService
	id string
	gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest *GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
}

// List of related linkages
func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipRequest) GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest(gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipRequest {
	r.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest = &gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
	return r
}

func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipExecute(r)
}

/*
GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship Method for GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipRequest
*/
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship(ctx context.Context, id string) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipRequest {
	return ApiGameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipExecute(r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetsAPIService.GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest == nil {
		return nil, reportError("gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetsAPIService
	id string
	filterReferenceName *[]string
	filterArchived *[]string
	filterId *[]string
	fieldsGameCenterLeaderboards *[]string
	fieldsGameCenterDetails *[]string
	fieldsGameCenterGroups *[]string
	fieldsGameCenterLeaderboardSets *[]string
	fieldsGameCenterLeaderboardLocalizations *[]string
	fieldsGameCenterLeaderboardReleases *[]string
	limit *int32
	include *[]string
	limitGameCenterLeaderboardSets *int32
	limitLocalizations *int32
	limitReleases *int32
}

// filter by attribute &#39;referenceName&#39;
func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest) FilterReferenceName(filterReferenceName []string) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.filterReferenceName = &filterReferenceName
	return r
}

// filter by attribute &#39;archived&#39;
func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest) FilterArchived(filterArchived []string) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.filterArchived = &filterArchived
	return r
}

// filter by id(s)
func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest) FilterId(filterId []string) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.filterId = &filterId
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboards
func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest) FieldsGameCenterLeaderboards(fieldsGameCenterLeaderboards []string) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboards = &fieldsGameCenterLeaderboards
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterGroups
func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest) FieldsGameCenterGroups(fieldsGameCenterGroups []string) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.fieldsGameCenterGroups = &fieldsGameCenterGroups
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSets
func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest) FieldsGameCenterLeaderboardSets(fieldsGameCenterLeaderboardSets []string) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardSets = &fieldsGameCenterLeaderboardSets
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardLocalizations
func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest) FieldsGameCenterLeaderboardLocalizations(fieldsGameCenterLeaderboardLocalizations []string) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardLocalizations = &fieldsGameCenterLeaderboardLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardReleases
func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest) FieldsGameCenterLeaderboardReleases(fieldsGameCenterLeaderboardReleases []string) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardReleases = &fieldsGameCenterLeaderboardReleases
	return r
}

// maximum resources per page
func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest) Include(include []string) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related gameCenterLeaderboardSets returned (when they are included)
func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest) LimitGameCenterLeaderboardSets(limitGameCenterLeaderboardSets int32) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.limitGameCenterLeaderboardSets = &limitGameCenterLeaderboardSets
	return r
}

// maximum number of related localizations returned (when they are included)
func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest) LimitLocalizations(limitLocalizations int32) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.limitLocalizations = &limitLocalizations
	return r
}

// maximum number of related releases returned (when they are included)
func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest) LimitReleases(limitReleases int32) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.limitReleases = &limitReleases
	return r
}

func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest) Execute() (*GameCenterLeaderboardsResponse, *http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedExecute(r)
}

/*
GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated Method for GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest
*/
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated(ctx context.Context, id string) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest {
	return ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterLeaderboardsResponse
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedExecute(r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRequest) (*GameCenterLeaderboardsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterLeaderboardsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetsAPIService.GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSets/{id}/gameCenterLeaderboards"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterReferenceName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[referenceName]", r.filterReferenceName, "form", "csv")
	}
	if r.filterArchived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[archived]", r.filterArchived, "form", "csv")
	}
	if r.filterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[id]", r.filterId, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboards]", r.fieldsGameCenterLeaderboards, "form", "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "form", "csv")
	}
	if r.fieldsGameCenterGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterGroups]", r.fieldsGameCenterGroups, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSets]", r.fieldsGameCenterLeaderboardSets, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardLocalizations]", r.fieldsGameCenterLeaderboardLocalizations, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardReleases]", r.fieldsGameCenterLeaderboardReleases, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboardSets]", r.limitGameCenterLeaderboardSets, "form", "")
	}
	if r.limitLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[localizations]", r.limitLocalizations, "form", "")
	}
	if r.limitReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[releases]", r.limitReleases, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetsAPIService
	id string
	limit *int32
}

// maximum resources per page
func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipRequest) Limit(limit int32) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipRequest {
	r.limit = &limit
	return r
}

func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipRequest) Execute() (*GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse, *http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipExecute(r)
}

/*
GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship Method for GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipRequest
*/
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship(ctx context.Context, id string) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipRequest {
	return ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipExecute(r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipRequest) (*GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetsAPIService.GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetsAPIService
	id string
	gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest *GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
}

// List of related linkages
func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipRequest) GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest(gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipRequest {
	r.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest = &gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
	return r
}

func (r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipExecute(r)
}

/*
GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship Method for GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipRequest
*/
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship(ctx context.Context, id string) ApiGameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipRequest {
	return ApiGameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipExecute(r ApiGameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetsAPIService.GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest == nil {
		return nil, reportError("gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetsGetInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetsAPIService
	id string
	fieldsGameCenterLeaderboardSets *[]string
	fieldsGameCenterLeaderboardSetLocalizations *[]string
	fieldsGameCenterLeaderboards *[]string
	fieldsGameCenterLeaderboardSetReleases *[]string
	include *[]string
	limitGameCenterLeaderboards *int32
	limitLocalizations *int32
	limitReleases *int32
}

// the fields to include for returned resources of type gameCenterLeaderboardSets
func (r ApiGameCenterLeaderboardSetsGetInstanceRequest) FieldsGameCenterLeaderboardSets(fieldsGameCenterLeaderboardSets []string) ApiGameCenterLeaderboardSetsGetInstanceRequest {
	r.fieldsGameCenterLeaderboardSets = &fieldsGameCenterLeaderboardSets
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
func (r ApiGameCenterLeaderboardSetsGetInstanceRequest) FieldsGameCenterLeaderboardSetLocalizations(fieldsGameCenterLeaderboardSetLocalizations []string) ApiGameCenterLeaderboardSetsGetInstanceRequest {
	r.fieldsGameCenterLeaderboardSetLocalizations = &fieldsGameCenterLeaderboardSetLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboards
func (r ApiGameCenterLeaderboardSetsGetInstanceRequest) FieldsGameCenterLeaderboards(fieldsGameCenterLeaderboards []string) ApiGameCenterLeaderboardSetsGetInstanceRequest {
	r.fieldsGameCenterLeaderboards = &fieldsGameCenterLeaderboards
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSetReleases
func (r ApiGameCenterLeaderboardSetsGetInstanceRequest) FieldsGameCenterLeaderboardSetReleases(fieldsGameCenterLeaderboardSetReleases []string) ApiGameCenterLeaderboardSetsGetInstanceRequest {
	r.fieldsGameCenterLeaderboardSetReleases = &fieldsGameCenterLeaderboardSetReleases
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterLeaderboardSetsGetInstanceRequest) Include(include []string) ApiGameCenterLeaderboardSetsGetInstanceRequest {
	r.include = &include
	return r
}

// maximum number of related gameCenterLeaderboards returned (when they are included)
func (r ApiGameCenterLeaderboardSetsGetInstanceRequest) LimitGameCenterLeaderboards(limitGameCenterLeaderboards int32) ApiGameCenterLeaderboardSetsGetInstanceRequest {
	r.limitGameCenterLeaderboards = &limitGameCenterLeaderboards
	return r
}

// maximum number of related localizations returned (when they are included)
func (r ApiGameCenterLeaderboardSetsGetInstanceRequest) LimitLocalizations(limitLocalizations int32) ApiGameCenterLeaderboardSetsGetInstanceRequest {
	r.limitLocalizations = &limitLocalizations
	return r
}

// maximum number of related releases returned (when they are included)
func (r ApiGameCenterLeaderboardSetsGetInstanceRequest) LimitReleases(limitReleases int32) ApiGameCenterLeaderboardSetsGetInstanceRequest {
	r.limitReleases = &limitReleases
	return r
}

func (r ApiGameCenterLeaderboardSetsGetInstanceRequest) Execute() (*GameCenterLeaderboardSetResponse, *http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetsGetInstanceExecute(r)
}

/*
GameCenterLeaderboardSetsGetInstance Method for GameCenterLeaderboardSetsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterLeaderboardSetsGetInstanceRequest
*/
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsGetInstance(ctx context.Context, id string) ApiGameCenterLeaderboardSetsGetInstanceRequest {
	return ApiGameCenterLeaderboardSetsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterLeaderboardSetResponse
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsGetInstanceExecute(r ApiGameCenterLeaderboardSetsGetInstanceRequest) (*GameCenterLeaderboardSetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterLeaderboardSetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetsAPIService.GameCenterLeaderboardSetsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSets]", r.fieldsGameCenterLeaderboardSets, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSetLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetLocalizations]", r.fieldsGameCenterLeaderboardSetLocalizations, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboards]", r.fieldsGameCenterLeaderboards, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSetReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetReleases]", r.fieldsGameCenterLeaderboardSetReleases, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboards]", r.limitGameCenterLeaderboards, "form", "")
	}
	if r.limitLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[localizations]", r.limitLocalizations, "form", "")
	}
	if r.limitReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[releases]", r.limitReleases, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetsAPIService
	id string
	fieldsGameCenterLeaderboardSets *[]string
	fieldsGameCenterDetails *[]string
	fieldsGameCenterGroups *[]string
	fieldsGameCenterLeaderboardSetLocalizations *[]string
	fieldsGameCenterLeaderboards *[]string
	fieldsGameCenterLeaderboardSetReleases *[]string
	include *[]string
	limitLocalizations *int32
	limitGameCenterLeaderboards *int32
	limitReleases *int32
}

// the fields to include for returned resources of type gameCenterLeaderboardSets
func (r ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest) FieldsGameCenterLeaderboardSets(fieldsGameCenterLeaderboardSets []string) ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest {
	r.fieldsGameCenterLeaderboardSets = &fieldsGameCenterLeaderboardSets
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterGroups
func (r ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest) FieldsGameCenterGroups(fieldsGameCenterGroups []string) ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest {
	r.fieldsGameCenterGroups = &fieldsGameCenterGroups
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
func (r ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest) FieldsGameCenterLeaderboardSetLocalizations(fieldsGameCenterLeaderboardSetLocalizations []string) ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest {
	r.fieldsGameCenterLeaderboardSetLocalizations = &fieldsGameCenterLeaderboardSetLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboards
func (r ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest) FieldsGameCenterLeaderboards(fieldsGameCenterLeaderboards []string) ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest {
	r.fieldsGameCenterLeaderboards = &fieldsGameCenterLeaderboards
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSetReleases
func (r ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest) FieldsGameCenterLeaderboardSetReleases(fieldsGameCenterLeaderboardSetReleases []string) ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest {
	r.fieldsGameCenterLeaderboardSetReleases = &fieldsGameCenterLeaderboardSetReleases
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest) Include(include []string) ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related localizations returned (when they are included)
func (r ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest) LimitLocalizations(limitLocalizations int32) ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest {
	r.limitLocalizations = &limitLocalizations
	return r
}

// maximum number of related gameCenterLeaderboards returned (when they are included)
func (r ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest) LimitGameCenterLeaderboards(limitGameCenterLeaderboards int32) ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest {
	r.limitGameCenterLeaderboards = &limitGameCenterLeaderboards
	return r
}

// maximum number of related releases returned (when they are included)
func (r ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest) LimitReleases(limitReleases int32) ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest {
	r.limitReleases = &limitReleases
	return r
}

func (r ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest) Execute() (*GameCenterLeaderboardSetResponse, *http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedExecute(r)
}

/*
GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated Method for GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest
*/
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated(ctx context.Context, id string) ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest {
	return ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterLeaderboardSetResponse
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedExecute(r ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRequest) (*GameCenterLeaderboardSetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterLeaderboardSetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetsAPIService.GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSets/{id}/groupLeaderboardSet"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSets]", r.fieldsGameCenterLeaderboardSets, "form", "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "form", "csv")
	}
	if r.fieldsGameCenterGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterGroups]", r.fieldsGameCenterGroups, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSetLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetLocalizations]", r.fieldsGameCenterLeaderboardSetLocalizations, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboards]", r.fieldsGameCenterLeaderboards, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSetReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetReleases]", r.fieldsGameCenterLeaderboardSetReleases, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[localizations]", r.limitLocalizations, "form", "")
	}
	if r.limitGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboards]", r.limitGameCenterLeaderboards, "form", "")
	}
	if r.limitReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[releases]", r.limitReleases, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetsAPIService
	id string
}

func (r ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipRequest) Execute() (*GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse, *http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipExecute(r)
}

/*
GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship Method for GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipRequest
*/
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship(ctx context.Context, id string) ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipRequest {
	return ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipExecute(r ApiGameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipRequest) (*GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetsAPIService.GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetsAPIService
	id string
	gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest *GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest
}

// Related linkage
func (r ApiGameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipRequest) GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest(gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest) ApiGameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipRequest {
	r.gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest = &gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest
	return r
}

func (r ApiGameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipExecute(r)
}

/*
GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship Method for GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipRequest
*/
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship(ctx context.Context, id string) ApiGameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipRequest {
	return ApiGameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipExecute(r ApiGameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetsAPIService.GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest == nil {
		return nil, reportError("gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetsAPIService
	id string
	fieldsGameCenterLeaderboardSetLocalizations *[]string
	fieldsGameCenterLeaderboardSets *[]string
	fieldsGameCenterLeaderboardSetImages *[]string
	limit *int32
	include *[]string
}

// the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
func (r ApiGameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest) FieldsGameCenterLeaderboardSetLocalizations(fieldsGameCenterLeaderboardSetLocalizations []string) ApiGameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardSetLocalizations = &fieldsGameCenterLeaderboardSetLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSets
func (r ApiGameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest) FieldsGameCenterLeaderboardSets(fieldsGameCenterLeaderboardSets []string) ApiGameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardSets = &fieldsGameCenterLeaderboardSets
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSetImages
func (r ApiGameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest) FieldsGameCenterLeaderboardSetImages(fieldsGameCenterLeaderboardSetImages []string) ApiGameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardSetImages = &fieldsGameCenterLeaderboardSetImages
	return r
}

// maximum resources per page
func (r ApiGameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest) Include(include []string) ApiGameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest) Execute() (*GameCenterLeaderboardSetLocalizationsResponse, *http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetsLocalizationsGetToManyRelatedExecute(r)
}

/*
GameCenterLeaderboardSetsLocalizationsGetToManyRelated Method for GameCenterLeaderboardSetsLocalizationsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest
*/
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsLocalizationsGetToManyRelated(ctx context.Context, id string) ApiGameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest {
	return ApiGameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterLeaderboardSetLocalizationsResponse
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsLocalizationsGetToManyRelatedExecute(r ApiGameCenterLeaderboardSetsLocalizationsGetToManyRelatedRequest) (*GameCenterLeaderboardSetLocalizationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterLeaderboardSetLocalizationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetsAPIService.GameCenterLeaderboardSetsLocalizationsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSets/{id}/localizations"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterLeaderboardSetLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetLocalizations]", r.fieldsGameCenterLeaderboardSetLocalizations, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSets]", r.fieldsGameCenterLeaderboardSets, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSetImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetImages]", r.fieldsGameCenterLeaderboardSetImages, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetsAPIService
	id string
	filterLive *[]string
	filterGameCenterDetail *[]string
	fieldsGameCenterLeaderboardSetReleases *[]string
	fieldsGameCenterDetails *[]string
	fieldsGameCenterLeaderboardSets *[]string
	limit *int32
	include *[]string
}

// filter by attribute &#39;live&#39;
func (r ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest) FilterLive(filterLive []string) ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest {
	r.filterLive = &filterLive
	return r
}

// filter by id(s) of related &#39;gameCenterDetail&#39;
func (r ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest) FilterGameCenterDetail(filterGameCenterDetail []string) ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest {
	r.filterGameCenterDetail = &filterGameCenterDetail
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSetReleases
func (r ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest) FieldsGameCenterLeaderboardSetReleases(fieldsGameCenterLeaderboardSetReleases []string) ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardSetReleases = &fieldsGameCenterLeaderboardSetReleases
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSets
func (r ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest) FieldsGameCenterLeaderboardSets(fieldsGameCenterLeaderboardSets []string) ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardSets = &fieldsGameCenterLeaderboardSets
	return r
}

// maximum resources per page
func (r ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest) Include(include []string) ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest) Execute() (*GameCenterLeaderboardSetReleasesResponse, *http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetsReleasesGetToManyRelatedExecute(r)
}

/*
GameCenterLeaderboardSetsReleasesGetToManyRelated Method for GameCenterLeaderboardSetsReleasesGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest
*/
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsReleasesGetToManyRelated(ctx context.Context, id string) ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest {
	return ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterLeaderboardSetReleasesResponse
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsReleasesGetToManyRelatedExecute(r ApiGameCenterLeaderboardSetsReleasesGetToManyRelatedRequest) (*GameCenterLeaderboardSetReleasesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterLeaderboardSetReleasesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetsAPIService.GameCenterLeaderboardSetsReleasesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSets/{id}/releases"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterLive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[live]", r.filterLive, "form", "csv")
	}
	if r.filterGameCenterDetail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterDetail]", r.filterGameCenterDetail, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSetReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetReleases]", r.fieldsGameCenterLeaderboardSetReleases, "form", "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSets]", r.fieldsGameCenterLeaderboardSets, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetsAPIService
	id string
	gameCenterLeaderboardSetUpdateRequest *GameCenterLeaderboardSetUpdateRequest
}

// GameCenterLeaderboardSet representation
func (r ApiGameCenterLeaderboardSetsUpdateInstanceRequest) GameCenterLeaderboardSetUpdateRequest(gameCenterLeaderboardSetUpdateRequest GameCenterLeaderboardSetUpdateRequest) ApiGameCenterLeaderboardSetsUpdateInstanceRequest {
	r.gameCenterLeaderboardSetUpdateRequest = &gameCenterLeaderboardSetUpdateRequest
	return r
}

func (r ApiGameCenterLeaderboardSetsUpdateInstanceRequest) Execute() (*GameCenterLeaderboardSetResponse, *http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetsUpdateInstanceExecute(r)
}

/*
GameCenterLeaderboardSetsUpdateInstance Method for GameCenterLeaderboardSetsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterLeaderboardSetsUpdateInstanceRequest
*/
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsUpdateInstance(ctx context.Context, id string) ApiGameCenterLeaderboardSetsUpdateInstanceRequest {
	return ApiGameCenterLeaderboardSetsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterLeaderboardSetResponse
func (a *GameCenterLeaderboardSetsAPIService) GameCenterLeaderboardSetsUpdateInstanceExecute(r ApiGameCenterLeaderboardSetsUpdateInstanceRequest) (*GameCenterLeaderboardSetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterLeaderboardSetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetsAPIService.GameCenterLeaderboardSetsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterLeaderboardSetUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterLeaderboardSetUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterLeaderboardSetUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

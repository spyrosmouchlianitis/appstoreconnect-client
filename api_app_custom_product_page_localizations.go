/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AppCustomProductPageLocalizationsAPIService AppCustomProductPageLocalizationsAPI service
type AppCustomProductPageLocalizationsAPIService service

type ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *AppCustomProductPageLocalizationsAPIService
	id string
	filterPreviewType *[]string
	filterAppStoreVersionLocalization *[]string
	filterAppStoreVersionExperimentTreatmentLocalization *[]string
	fieldsAppPreviewSets *[]string
	fieldsAppStoreVersionLocalizations *[]string
	fieldsAppCustomProductPageLocalizations *[]string
	fieldsAppStoreVersionExperimentTreatmentLocalizations *[]string
	fieldsAppPreviews *[]string
	limit *int32
	include *[]string
	limitAppPreviews *int32
}

// filter by attribute &#39;previewType&#39;
func (r ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest) FilterPreviewType(filterPreviewType []string) ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.filterPreviewType = &filterPreviewType
	return r
}

// filter by id(s) of related &#39;appStoreVersionLocalization&#39;
func (r ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest) FilterAppStoreVersionLocalization(filterAppStoreVersionLocalization []string) ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.filterAppStoreVersionLocalization = &filterAppStoreVersionLocalization
	return r
}

// filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39;
func (r ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest) FilterAppStoreVersionExperimentTreatmentLocalization(filterAppStoreVersionExperimentTreatmentLocalization []string) ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.filterAppStoreVersionExperimentTreatmentLocalization = &filterAppStoreVersionExperimentTreatmentLocalization
	return r
}

// the fields to include for returned resources of type appPreviewSets
func (r ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest) FieldsAppPreviewSets(fieldsAppPreviewSets []string) ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.fieldsAppPreviewSets = &fieldsAppPreviewSets
	return r
}

// the fields to include for returned resources of type appStoreVersionLocalizations
func (r ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest) FieldsAppStoreVersionLocalizations(fieldsAppStoreVersionLocalizations []string) ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionLocalizations = &fieldsAppStoreVersionLocalizations
	return r
}

// the fields to include for returned resources of type appCustomProductPageLocalizations
func (r ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest) FieldsAppCustomProductPageLocalizations(fieldsAppCustomProductPageLocalizations []string) ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.fieldsAppCustomProductPageLocalizations = &fieldsAppCustomProductPageLocalizations
	return r
}

// the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
func (r ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest) FieldsAppStoreVersionExperimentTreatmentLocalizations(fieldsAppStoreVersionExperimentTreatmentLocalizations []string) ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionExperimentTreatmentLocalizations = &fieldsAppStoreVersionExperimentTreatmentLocalizations
	return r
}

// the fields to include for returned resources of type appPreviews
func (r ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest) FieldsAppPreviews(fieldsAppPreviews []string) ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.fieldsAppPreviews = &fieldsAppPreviews
	return r
}

// maximum resources per page
func (r ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest) Limit(limit int32) ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest) Include(include []string) ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related appPreviews returned (when they are included)
func (r ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest) LimitAppPreviews(limitAppPreviews int32) ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.limitAppPreviews = &limitAppPreviews
	return r
}

func (r ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest) Execute() (*AppPreviewSetsResponse, *http.Response, error) {
	return r.ApiService.AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedExecute(r)
}

/*
AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelated Method for AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest
*/
func (a *AppCustomProductPageLocalizationsAPIService) AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelated(ctx context.Context, id string) ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	return ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppPreviewSetsResponse
func (a *AppCustomProductPageLocalizationsAPIService) AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedExecute(r ApiAppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedRequest) (*AppPreviewSetsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppPreviewSetsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCustomProductPageLocalizationsAPIService.AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appCustomProductPageLocalizations/{id}/appPreviewSets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterPreviewType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[previewType]", r.filterPreviewType, "form", "csv")
	}
	if r.filterAppStoreVersionLocalization != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[appStoreVersionLocalization]", r.filterAppStoreVersionLocalization, "form", "csv")
	}
	if r.filterAppStoreVersionExperimentTreatmentLocalization != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[appStoreVersionExperimentTreatmentLocalization]", r.filterAppStoreVersionExperimentTreatmentLocalization, "form", "csv")
	}
	if r.fieldsAppPreviewSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appPreviewSets]", r.fieldsAppPreviewSets, "form", "csv")
	}
	if r.fieldsAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionLocalizations]", r.fieldsAppStoreVersionLocalizations, "form", "csv")
	}
	if r.fieldsAppCustomProductPageLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appCustomProductPageLocalizations]", r.fieldsAppCustomProductPageLocalizations, "form", "csv")
	}
	if r.fieldsAppStoreVersionExperimentTreatmentLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperimentTreatmentLocalizations]", r.fieldsAppStoreVersionExperimentTreatmentLocalizations, "form", "csv")
	}
	if r.fieldsAppPreviews != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appPreviews]", r.fieldsAppPreviews, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitAppPreviews != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appPreviews]", r.limitAppPreviews, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *AppCustomProductPageLocalizationsAPIService
	id string
	filterScreenshotDisplayType *[]string
	filterAppStoreVersionLocalization *[]string
	filterAppStoreVersionExperimentTreatmentLocalization *[]string
	fieldsAppScreenshotSets *[]string
	fieldsAppStoreVersionLocalizations *[]string
	fieldsAppCustomProductPageLocalizations *[]string
	fieldsAppStoreVersionExperimentTreatmentLocalizations *[]string
	fieldsAppScreenshots *[]string
	limit *int32
	include *[]string
	limitAppScreenshots *int32
}

// filter by attribute &#39;screenshotDisplayType&#39;
func (r ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FilterScreenshotDisplayType(filterScreenshotDisplayType []string) ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.filterScreenshotDisplayType = &filterScreenshotDisplayType
	return r
}

// filter by id(s) of related &#39;appStoreVersionLocalization&#39;
func (r ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FilterAppStoreVersionLocalization(filterAppStoreVersionLocalization []string) ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.filterAppStoreVersionLocalization = &filterAppStoreVersionLocalization
	return r
}

// filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39;
func (r ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FilterAppStoreVersionExperimentTreatmentLocalization(filterAppStoreVersionExperimentTreatmentLocalization []string) ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.filterAppStoreVersionExperimentTreatmentLocalization = &filterAppStoreVersionExperimentTreatmentLocalization
	return r
}

// the fields to include for returned resources of type appScreenshotSets
func (r ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FieldsAppScreenshotSets(fieldsAppScreenshotSets []string) ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.fieldsAppScreenshotSets = &fieldsAppScreenshotSets
	return r
}

// the fields to include for returned resources of type appStoreVersionLocalizations
func (r ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FieldsAppStoreVersionLocalizations(fieldsAppStoreVersionLocalizations []string) ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionLocalizations = &fieldsAppStoreVersionLocalizations
	return r
}

// the fields to include for returned resources of type appCustomProductPageLocalizations
func (r ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FieldsAppCustomProductPageLocalizations(fieldsAppCustomProductPageLocalizations []string) ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.fieldsAppCustomProductPageLocalizations = &fieldsAppCustomProductPageLocalizations
	return r
}

// the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
func (r ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FieldsAppStoreVersionExperimentTreatmentLocalizations(fieldsAppStoreVersionExperimentTreatmentLocalizations []string) ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionExperimentTreatmentLocalizations = &fieldsAppStoreVersionExperimentTreatmentLocalizations
	return r
}

// the fields to include for returned resources of type appScreenshots
func (r ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FieldsAppScreenshots(fieldsAppScreenshots []string) ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.fieldsAppScreenshots = &fieldsAppScreenshots
	return r
}

// maximum resources per page
func (r ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest) Limit(limit int32) ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest) Include(include []string) ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related appScreenshots returned (when they are included)
func (r ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest) LimitAppScreenshots(limitAppScreenshots int32) ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.limitAppScreenshots = &limitAppScreenshots
	return r
}

func (r ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest) Execute() (*AppScreenshotSetsResponse, *http.Response, error) {
	return r.ApiService.AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedExecute(r)
}

/*
AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelated Method for AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest
*/
func (a *AppCustomProductPageLocalizationsAPIService) AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelated(ctx context.Context, id string) ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	return ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppScreenshotSetsResponse
func (a *AppCustomProductPageLocalizationsAPIService) AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedExecute(r ApiAppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedRequest) (*AppScreenshotSetsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppScreenshotSetsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCustomProductPageLocalizationsAPIService.AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appCustomProductPageLocalizations/{id}/appScreenshotSets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterScreenshotDisplayType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[screenshotDisplayType]", r.filterScreenshotDisplayType, "form", "csv")
	}
	if r.filterAppStoreVersionLocalization != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[appStoreVersionLocalization]", r.filterAppStoreVersionLocalization, "form", "csv")
	}
	if r.filterAppStoreVersionExperimentTreatmentLocalization != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[appStoreVersionExperimentTreatmentLocalization]", r.filterAppStoreVersionExperimentTreatmentLocalization, "form", "csv")
	}
	if r.fieldsAppScreenshotSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appScreenshotSets]", r.fieldsAppScreenshotSets, "form", "csv")
	}
	if r.fieldsAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionLocalizations]", r.fieldsAppStoreVersionLocalizations, "form", "csv")
	}
	if r.fieldsAppCustomProductPageLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appCustomProductPageLocalizations]", r.fieldsAppCustomProductPageLocalizations, "form", "csv")
	}
	if r.fieldsAppStoreVersionExperimentTreatmentLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperimentTreatmentLocalizations]", r.fieldsAppStoreVersionExperimentTreatmentLocalizations, "form", "csv")
	}
	if r.fieldsAppScreenshots != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appScreenshots]", r.fieldsAppScreenshots, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitAppScreenshots != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appScreenshots]", r.limitAppScreenshots, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppCustomProductPageLocalizationsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *AppCustomProductPageLocalizationsAPIService
	appCustomProductPageLocalizationCreateRequest *AppCustomProductPageLocalizationCreateRequest
}

// AppCustomProductPageLocalization representation
func (r ApiAppCustomProductPageLocalizationsCreateInstanceRequest) AppCustomProductPageLocalizationCreateRequest(appCustomProductPageLocalizationCreateRequest AppCustomProductPageLocalizationCreateRequest) ApiAppCustomProductPageLocalizationsCreateInstanceRequest {
	r.appCustomProductPageLocalizationCreateRequest = &appCustomProductPageLocalizationCreateRequest
	return r
}

func (r ApiAppCustomProductPageLocalizationsCreateInstanceRequest) Execute() (*AppCustomProductPageLocalizationResponse, *http.Response, error) {
	return r.ApiService.AppCustomProductPageLocalizationsCreateInstanceExecute(r)
}

/*
AppCustomProductPageLocalizationsCreateInstance Method for AppCustomProductPageLocalizationsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAppCustomProductPageLocalizationsCreateInstanceRequest
*/
func (a *AppCustomProductPageLocalizationsAPIService) AppCustomProductPageLocalizationsCreateInstance(ctx context.Context) ApiAppCustomProductPageLocalizationsCreateInstanceRequest {
	return ApiAppCustomProductPageLocalizationsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppCustomProductPageLocalizationResponse
func (a *AppCustomProductPageLocalizationsAPIService) AppCustomProductPageLocalizationsCreateInstanceExecute(r ApiAppCustomProductPageLocalizationsCreateInstanceRequest) (*AppCustomProductPageLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppCustomProductPageLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCustomProductPageLocalizationsAPIService.AppCustomProductPageLocalizationsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appCustomProductPageLocalizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appCustomProductPageLocalizationCreateRequest == nil {
		return localVarReturnValue, nil, reportError("appCustomProductPageLocalizationCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appCustomProductPageLocalizationCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppCustomProductPageLocalizationsDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *AppCustomProductPageLocalizationsAPIService
	id string
}

func (r ApiAppCustomProductPageLocalizationsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppCustomProductPageLocalizationsDeleteInstanceExecute(r)
}

/*
AppCustomProductPageLocalizationsDeleteInstance Method for AppCustomProductPageLocalizationsDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppCustomProductPageLocalizationsDeleteInstanceRequest
*/
func (a *AppCustomProductPageLocalizationsAPIService) AppCustomProductPageLocalizationsDeleteInstance(ctx context.Context, id string) ApiAppCustomProductPageLocalizationsDeleteInstanceRequest {
	return ApiAppCustomProductPageLocalizationsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AppCustomProductPageLocalizationsAPIService) AppCustomProductPageLocalizationsDeleteInstanceExecute(r ApiAppCustomProductPageLocalizationsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCustomProductPageLocalizationsAPIService.AppCustomProductPageLocalizationsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appCustomProductPageLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppCustomProductPageLocalizationsGetInstanceRequest struct {
	ctx context.Context
	ApiService *AppCustomProductPageLocalizationsAPIService
	id string
	fieldsAppCustomProductPageLocalizations *[]string
	fieldsAppScreenshotSets *[]string
	fieldsAppPreviewSets *[]string
	include *[]string
	limitAppPreviewSets *int32
	limitAppScreenshotSets *int32
}

// the fields to include for returned resources of type appCustomProductPageLocalizations
func (r ApiAppCustomProductPageLocalizationsGetInstanceRequest) FieldsAppCustomProductPageLocalizations(fieldsAppCustomProductPageLocalizations []string) ApiAppCustomProductPageLocalizationsGetInstanceRequest {
	r.fieldsAppCustomProductPageLocalizations = &fieldsAppCustomProductPageLocalizations
	return r
}

// the fields to include for returned resources of type appScreenshotSets
func (r ApiAppCustomProductPageLocalizationsGetInstanceRequest) FieldsAppScreenshotSets(fieldsAppScreenshotSets []string) ApiAppCustomProductPageLocalizationsGetInstanceRequest {
	r.fieldsAppScreenshotSets = &fieldsAppScreenshotSets
	return r
}

// the fields to include for returned resources of type appPreviewSets
func (r ApiAppCustomProductPageLocalizationsGetInstanceRequest) FieldsAppPreviewSets(fieldsAppPreviewSets []string) ApiAppCustomProductPageLocalizationsGetInstanceRequest {
	r.fieldsAppPreviewSets = &fieldsAppPreviewSets
	return r
}

// comma-separated list of relationships to include
func (r ApiAppCustomProductPageLocalizationsGetInstanceRequest) Include(include []string) ApiAppCustomProductPageLocalizationsGetInstanceRequest {
	r.include = &include
	return r
}

// maximum number of related appPreviewSets returned (when they are included)
func (r ApiAppCustomProductPageLocalizationsGetInstanceRequest) LimitAppPreviewSets(limitAppPreviewSets int32) ApiAppCustomProductPageLocalizationsGetInstanceRequest {
	r.limitAppPreviewSets = &limitAppPreviewSets
	return r
}

// maximum number of related appScreenshotSets returned (when they are included)
func (r ApiAppCustomProductPageLocalizationsGetInstanceRequest) LimitAppScreenshotSets(limitAppScreenshotSets int32) ApiAppCustomProductPageLocalizationsGetInstanceRequest {
	r.limitAppScreenshotSets = &limitAppScreenshotSets
	return r
}

func (r ApiAppCustomProductPageLocalizationsGetInstanceRequest) Execute() (*AppCustomProductPageLocalizationResponse, *http.Response, error) {
	return r.ApiService.AppCustomProductPageLocalizationsGetInstanceExecute(r)
}

/*
AppCustomProductPageLocalizationsGetInstance Method for AppCustomProductPageLocalizationsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppCustomProductPageLocalizationsGetInstanceRequest
*/
func (a *AppCustomProductPageLocalizationsAPIService) AppCustomProductPageLocalizationsGetInstance(ctx context.Context, id string) ApiAppCustomProductPageLocalizationsGetInstanceRequest {
	return ApiAppCustomProductPageLocalizationsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppCustomProductPageLocalizationResponse
func (a *AppCustomProductPageLocalizationsAPIService) AppCustomProductPageLocalizationsGetInstanceExecute(r ApiAppCustomProductPageLocalizationsGetInstanceRequest) (*AppCustomProductPageLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppCustomProductPageLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCustomProductPageLocalizationsAPIService.AppCustomProductPageLocalizationsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appCustomProductPageLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppCustomProductPageLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appCustomProductPageLocalizations]", r.fieldsAppCustomProductPageLocalizations, "form", "csv")
	}
	if r.fieldsAppScreenshotSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appScreenshotSets]", r.fieldsAppScreenshotSets, "form", "csv")
	}
	if r.fieldsAppPreviewSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appPreviewSets]", r.fieldsAppPreviewSets, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitAppPreviewSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appPreviewSets]", r.limitAppPreviewSets, "form", "")
	}
	if r.limitAppScreenshotSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appScreenshotSets]", r.limitAppScreenshotSets, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppCustomProductPageLocalizationsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *AppCustomProductPageLocalizationsAPIService
	id string
	appCustomProductPageLocalizationUpdateRequest *AppCustomProductPageLocalizationUpdateRequest
}

// AppCustomProductPageLocalization representation
func (r ApiAppCustomProductPageLocalizationsUpdateInstanceRequest) AppCustomProductPageLocalizationUpdateRequest(appCustomProductPageLocalizationUpdateRequest AppCustomProductPageLocalizationUpdateRequest) ApiAppCustomProductPageLocalizationsUpdateInstanceRequest {
	r.appCustomProductPageLocalizationUpdateRequest = &appCustomProductPageLocalizationUpdateRequest
	return r
}

func (r ApiAppCustomProductPageLocalizationsUpdateInstanceRequest) Execute() (*AppCustomProductPageLocalizationResponse, *http.Response, error) {
	return r.ApiService.AppCustomProductPageLocalizationsUpdateInstanceExecute(r)
}

/*
AppCustomProductPageLocalizationsUpdateInstance Method for AppCustomProductPageLocalizationsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppCustomProductPageLocalizationsUpdateInstanceRequest
*/
func (a *AppCustomProductPageLocalizationsAPIService) AppCustomProductPageLocalizationsUpdateInstance(ctx context.Context, id string) ApiAppCustomProductPageLocalizationsUpdateInstanceRequest {
	return ApiAppCustomProductPageLocalizationsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppCustomProductPageLocalizationResponse
func (a *AppCustomProductPageLocalizationsAPIService) AppCustomProductPageLocalizationsUpdateInstanceExecute(r ApiAppCustomProductPageLocalizationsUpdateInstanceRequest) (*AppCustomProductPageLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppCustomProductPageLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCustomProductPageLocalizationsAPIService.AppCustomProductPageLocalizationsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appCustomProductPageLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appCustomProductPageLocalizationUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("appCustomProductPageLocalizationUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appCustomProductPageLocalizationUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"encoding/json"
)

// checks if the GameCenterLeaderboardReleaseRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GameCenterLeaderboardReleaseRelationships{}

// GameCenterLeaderboardReleaseRelationships struct for GameCenterLeaderboardReleaseRelationships
type GameCenterLeaderboardReleaseRelationships struct {
	GameCenterDetail *GameCenterAchievementReleaseRelationshipsGameCenterDetail `json:"gameCenterDetail,omitempty"`
	GameCenterLeaderboard *GameCenterDetailRelationshipsDefaultLeaderboard `json:"gameCenterLeaderboard,omitempty"`
}

// NewGameCenterLeaderboardReleaseRelationships instantiates a new GameCenterLeaderboardReleaseRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGameCenterLeaderboardReleaseRelationships() *GameCenterLeaderboardReleaseRelationships {
	this := GameCenterLeaderboardReleaseRelationships{}
	return &this
}

// NewGameCenterLeaderboardReleaseRelationshipsWithDefaults instantiates a new GameCenterLeaderboardReleaseRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGameCenterLeaderboardReleaseRelationshipsWithDefaults() *GameCenterLeaderboardReleaseRelationships {
	this := GameCenterLeaderboardReleaseRelationships{}
	return &this
}

// GetGameCenterDetail returns the GameCenterDetail field value if set, zero value otherwise.
func (o *GameCenterLeaderboardReleaseRelationships) GetGameCenterDetail() GameCenterAchievementReleaseRelationshipsGameCenterDetail {
	if o == nil || IsNil(o.GameCenterDetail) {
		var ret GameCenterAchievementReleaseRelationshipsGameCenterDetail
		return ret
	}
	return *o.GameCenterDetail
}

// GetGameCenterDetailOk returns a tuple with the GameCenterDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterLeaderboardReleaseRelationships) GetGameCenterDetailOk() (*GameCenterAchievementReleaseRelationshipsGameCenterDetail, bool) {
	if o == nil || IsNil(o.GameCenterDetail) {
		return nil, false
	}
	return o.GameCenterDetail, true
}

// HasGameCenterDetail returns a boolean if a field has been set.
func (o *GameCenterLeaderboardReleaseRelationships) HasGameCenterDetail() bool {
	if o != nil && !IsNil(o.GameCenterDetail) {
		return true
	}

	return false
}

// SetGameCenterDetail gets a reference to the given GameCenterAchievementReleaseRelationshipsGameCenterDetail and assigns it to the GameCenterDetail field.
func (o *GameCenterLeaderboardReleaseRelationships) SetGameCenterDetail(v GameCenterAchievementReleaseRelationshipsGameCenterDetail) {
	o.GameCenterDetail = &v
}

// GetGameCenterLeaderboard returns the GameCenterLeaderboard field value if set, zero value otherwise.
func (o *GameCenterLeaderboardReleaseRelationships) GetGameCenterLeaderboard() GameCenterDetailRelationshipsDefaultLeaderboard {
	if o == nil || IsNil(o.GameCenterLeaderboard) {
		var ret GameCenterDetailRelationshipsDefaultLeaderboard
		return ret
	}
	return *o.GameCenterLeaderboard
}

// GetGameCenterLeaderboardOk returns a tuple with the GameCenterLeaderboard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterLeaderboardReleaseRelationships) GetGameCenterLeaderboardOk() (*GameCenterDetailRelationshipsDefaultLeaderboard, bool) {
	if o == nil || IsNil(o.GameCenterLeaderboard) {
		return nil, false
	}
	return o.GameCenterLeaderboard, true
}

// HasGameCenterLeaderboard returns a boolean if a field has been set.
func (o *GameCenterLeaderboardReleaseRelationships) HasGameCenterLeaderboard() bool {
	if o != nil && !IsNil(o.GameCenterLeaderboard) {
		return true
	}

	return false
}

// SetGameCenterLeaderboard gets a reference to the given GameCenterDetailRelationshipsDefaultLeaderboard and assigns it to the GameCenterLeaderboard field.
func (o *GameCenterLeaderboardReleaseRelationships) SetGameCenterLeaderboard(v GameCenterDetailRelationshipsDefaultLeaderboard) {
	o.GameCenterLeaderboard = &v
}

func (o GameCenterLeaderboardReleaseRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GameCenterLeaderboardReleaseRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GameCenterDetail) {
		toSerialize["gameCenterDetail"] = o.GameCenterDetail
	}
	if !IsNil(o.GameCenterLeaderboard) {
		toSerialize["gameCenterLeaderboard"] = o.GameCenterLeaderboard
	}
	return toSerialize, nil
}

type NullableGameCenterLeaderboardReleaseRelationships struct {
	value *GameCenterLeaderboardReleaseRelationships
	isSet bool
}

func (v NullableGameCenterLeaderboardReleaseRelationships) Get() *GameCenterLeaderboardReleaseRelationships {
	return v.value
}

func (v *NullableGameCenterLeaderboardReleaseRelationships) Set(val *GameCenterLeaderboardReleaseRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableGameCenterLeaderboardReleaseRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableGameCenterLeaderboardReleaseRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGameCenterLeaderboardReleaseRelationships(val *GameCenterLeaderboardReleaseRelationships) *NullableGameCenterLeaderboardReleaseRelationships {
	return &NullableGameCenterLeaderboardReleaseRelationships{value: val, isSet: true}
}

func (v NullableGameCenterLeaderboardReleaseRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGameCenterLeaderboardReleaseRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



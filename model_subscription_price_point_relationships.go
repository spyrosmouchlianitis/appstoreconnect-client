/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"encoding/json"
)

// checks if the SubscriptionPricePointRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionPricePointRelationships{}

// SubscriptionPricePointRelationships struct for SubscriptionPricePointRelationships
type SubscriptionPricePointRelationships struct {
	Territory *AppPricePointV3RelationshipsTerritory `json:"territory,omitempty"`
	Equalizations *AnalyticsReportInstanceRelationshipsSegments `json:"equalizations,omitempty"`
}

// NewSubscriptionPricePointRelationships instantiates a new SubscriptionPricePointRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPricePointRelationships() *SubscriptionPricePointRelationships {
	this := SubscriptionPricePointRelationships{}
	return &this
}

// NewSubscriptionPricePointRelationshipsWithDefaults instantiates a new SubscriptionPricePointRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPricePointRelationshipsWithDefaults() *SubscriptionPricePointRelationships {
	this := SubscriptionPricePointRelationships{}
	return &this
}

// GetTerritory returns the Territory field value if set, zero value otherwise.
func (o *SubscriptionPricePointRelationships) GetTerritory() AppPricePointV3RelationshipsTerritory {
	if o == nil || IsNil(o.Territory) {
		var ret AppPricePointV3RelationshipsTerritory
		return ret
	}
	return *o.Territory
}

// GetTerritoryOk returns a tuple with the Territory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPricePointRelationships) GetTerritoryOk() (*AppPricePointV3RelationshipsTerritory, bool) {
	if o == nil || IsNil(o.Territory) {
		return nil, false
	}
	return o.Territory, true
}

// HasTerritory returns a boolean if a field has been set.
func (o *SubscriptionPricePointRelationships) HasTerritory() bool {
	if o != nil && !IsNil(o.Territory) {
		return true
	}

	return false
}

// SetTerritory gets a reference to the given AppPricePointV3RelationshipsTerritory and assigns it to the Territory field.
func (o *SubscriptionPricePointRelationships) SetTerritory(v AppPricePointV3RelationshipsTerritory) {
	o.Territory = &v
}

// GetEqualizations returns the Equalizations field value if set, zero value otherwise.
func (o *SubscriptionPricePointRelationships) GetEqualizations() AnalyticsReportInstanceRelationshipsSegments {
	if o == nil || IsNil(o.Equalizations) {
		var ret AnalyticsReportInstanceRelationshipsSegments
		return ret
	}
	return *o.Equalizations
}

// GetEqualizationsOk returns a tuple with the Equalizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPricePointRelationships) GetEqualizationsOk() (*AnalyticsReportInstanceRelationshipsSegments, bool) {
	if o == nil || IsNil(o.Equalizations) {
		return nil, false
	}
	return o.Equalizations, true
}

// HasEqualizations returns a boolean if a field has been set.
func (o *SubscriptionPricePointRelationships) HasEqualizations() bool {
	if o != nil && !IsNil(o.Equalizations) {
		return true
	}

	return false
}

// SetEqualizations gets a reference to the given AnalyticsReportInstanceRelationshipsSegments and assigns it to the Equalizations field.
func (o *SubscriptionPricePointRelationships) SetEqualizations(v AnalyticsReportInstanceRelationshipsSegments) {
	o.Equalizations = &v
}

func (o SubscriptionPricePointRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionPricePointRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Territory) {
		toSerialize["territory"] = o.Territory
	}
	if !IsNil(o.Equalizations) {
		toSerialize["equalizations"] = o.Equalizations
	}
	return toSerialize, nil
}

type NullableSubscriptionPricePointRelationships struct {
	value *SubscriptionPricePointRelationships
	isSet bool
}

func (v NullableSubscriptionPricePointRelationships) Get() *SubscriptionPricePointRelationships {
	return v.value
}

func (v *NullableSubscriptionPricePointRelationships) Set(val *SubscriptionPricePointRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPricePointRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPricePointRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPricePointRelationships(val *SubscriptionPricePointRelationships) *NullableSubscriptionPricePointRelationships {
	return &NullableSubscriptionPricePointRelationships{value: val, isSet: true}
}

func (v NullableSubscriptionPricePointRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPricePointRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



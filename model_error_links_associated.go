/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect-client

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ErrorLinksAssociated - struct for ErrorLinksAssociated
type ErrorLinksAssociated struct {
	ErrorLinksAssociatedOneOf *ErrorLinksAssociatedOneOf
	String *string
}

// ErrorLinksAssociatedOneOfAsErrorLinksAssociated is a convenience function that returns ErrorLinksAssociatedOneOf wrapped in ErrorLinksAssociated
func ErrorLinksAssociatedOneOfAsErrorLinksAssociated(v *ErrorLinksAssociatedOneOf) ErrorLinksAssociated {
	return ErrorLinksAssociated{
		ErrorLinksAssociatedOneOf: v,
	}
}

// stringAsErrorLinksAssociated is a convenience function that returns string wrapped in ErrorLinksAssociated
func StringAsErrorLinksAssociated(v *string) ErrorLinksAssociated {
	return ErrorLinksAssociated{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ErrorLinksAssociated) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ErrorLinksAssociatedOneOf
	err = newStrictDecoder(data).Decode(&dst.ErrorLinksAssociatedOneOf)
	if err == nil {
		jsonErrorLinksAssociatedOneOf, _ := json.Marshal(dst.ErrorLinksAssociatedOneOf)
		if string(jsonErrorLinksAssociatedOneOf) == "{}" { // empty struct
			dst.ErrorLinksAssociatedOneOf = nil
		} else {
			if err = validator.Validate(dst.ErrorLinksAssociatedOneOf); err != nil {
				dst.ErrorLinksAssociatedOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.ErrorLinksAssociatedOneOf = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ErrorLinksAssociatedOneOf = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ErrorLinksAssociated)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ErrorLinksAssociated)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ErrorLinksAssociated) MarshalJSON() ([]byte, error) {
	if src.ErrorLinksAssociatedOneOf != nil {
		return json.Marshal(&src.ErrorLinksAssociatedOneOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ErrorLinksAssociated) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ErrorLinksAssociatedOneOf != nil {
		return obj.ErrorLinksAssociatedOneOf
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableErrorLinksAssociated struct {
	value *ErrorLinksAssociated
	isSet bool
}

func (v NullableErrorLinksAssociated) Get() *ErrorLinksAssociated {
	return v.value
}

func (v *NullableErrorLinksAssociated) Set(val *ErrorLinksAssociated) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorLinksAssociated) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorLinksAssociated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorLinksAssociated(val *ErrorLinksAssociated) *NullableErrorLinksAssociated {
	return &NullableErrorLinksAssociated{value: val, isSet: true}
}

func (v NullableErrorLinksAssociated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorLinksAssociated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// GameCenterMatchmakingQueuesAPIService GameCenterMatchmakingQueuesAPI service
type GameCenterMatchmakingQueuesAPIService service

type ApiGameCenterMatchmakingQueuesCreateInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingQueuesAPIService
	gameCenterMatchmakingQueueCreateRequest *GameCenterMatchmakingQueueCreateRequest
}

// GameCenterMatchmakingQueue representation
func (r ApiGameCenterMatchmakingQueuesCreateInstanceRequest) GameCenterMatchmakingQueueCreateRequest(gameCenterMatchmakingQueueCreateRequest GameCenterMatchmakingQueueCreateRequest) ApiGameCenterMatchmakingQueuesCreateInstanceRequest {
	r.gameCenterMatchmakingQueueCreateRequest = &gameCenterMatchmakingQueueCreateRequest
	return r
}

func (r ApiGameCenterMatchmakingQueuesCreateInstanceRequest) Execute() (*GameCenterMatchmakingQueueResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesCreateInstanceExecute(r)
}

/*
GameCenterMatchmakingQueuesCreateInstance Method for GameCenterMatchmakingQueuesCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGameCenterMatchmakingQueuesCreateInstanceRequest
*/
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesCreateInstance(ctx context.Context) ApiGameCenterMatchmakingQueuesCreateInstanceRequest {
	return ApiGameCenterMatchmakingQueuesCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingQueueResponse
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesCreateInstanceExecute(r ApiGameCenterMatchmakingQueuesCreateInstanceRequest) (*GameCenterMatchmakingQueueResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingQueuesAPIService.GameCenterMatchmakingQueuesCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterMatchmakingQueueCreateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterMatchmakingQueueCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterMatchmakingQueueCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingQueuesAPIService
	id string
}

func (r ApiGameCenterMatchmakingQueuesDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesDeleteInstanceExecute(r)
}

/*
GameCenterMatchmakingQueuesDeleteInstance Method for GameCenterMatchmakingQueuesDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingQueuesDeleteInstanceRequest
*/
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesDeleteInstance(ctx context.Context, id string) ApiGameCenterMatchmakingQueuesDeleteInstanceRequest {
	return ApiGameCenterMatchmakingQueuesDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesDeleteInstanceExecute(r ApiGameCenterMatchmakingQueuesDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingQueuesAPIService.GameCenterMatchmakingQueuesDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingQueuesAPIService
	id string
	granularity *string
	sort *[]string
	limit *int32
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest) Granularity(granularity string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest) Sort(sort []string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest {
	r.sort = &sort
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest) Limit(limit int32) ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest {
	r.limit = &limit
	return r
}

func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest) Execute() (*GameCenterMatchmakingQueueSizesV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsExecute(r)
}

/*
GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics Method for GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest
*/
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest {
	return ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingQueueSizesV1MetricResponse
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsExecute(r ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest) (*GameCenterMatchmakingQueueSizesV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingQueueSizesV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingQueuesAPIService.GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingQueuesAPIService
	id string
	granularity *string
	groupBy *[]string
	filterResult *string
	filterGameCenterDetail *string
	sort *[]string
	limit *int32
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest) Granularity(granularity string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest) GroupBy(groupBy []string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;result&#39; attribute dimension
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest) FilterResult(filterResult string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest {
	r.filterResult = &filterResult
	return r
}

// filter by &#39;gameCenterDetail&#39; relationship dimension
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest) FilterGameCenterDetail(filterGameCenterDetail string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest {
	r.filterGameCenterDetail = &filterGameCenterDetail
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest) Sort(sort []string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest {
	r.sort = &sort
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest) Limit(limit int32) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest {
	r.limit = &limit
	return r
}

func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest) Execute() (*GameCenterMatchmakingQueueRequestsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsExecute(r)
}

/*
GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics Method for GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest
*/
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest {
	return ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingQueueRequestsV1MetricResponse
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsExecute(r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest) (*GameCenterMatchmakingQueueRequestsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingQueueRequestsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingQueuesAPIService.GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "form", "csv")
	}
	if r.filterResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[result]", r.filterResult, "form", "")
	}
	if r.filterGameCenterDetail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterDetail]", r.filterGameCenterDetail, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesGetCollectionRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingQueuesAPIService
	fieldsGameCenterMatchmakingQueues *[]string
	limit *int32
	include *[]string
}

// the fields to include for returned resources of type gameCenterMatchmakingQueues
func (r ApiGameCenterMatchmakingQueuesGetCollectionRequest) FieldsGameCenterMatchmakingQueues(fieldsGameCenterMatchmakingQueues []string) ApiGameCenterMatchmakingQueuesGetCollectionRequest {
	r.fieldsGameCenterMatchmakingQueues = &fieldsGameCenterMatchmakingQueues
	return r
}

// maximum resources per page
func (r ApiGameCenterMatchmakingQueuesGetCollectionRequest) Limit(limit int32) ApiGameCenterMatchmakingQueuesGetCollectionRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterMatchmakingQueuesGetCollectionRequest) Include(include []string) ApiGameCenterMatchmakingQueuesGetCollectionRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterMatchmakingQueuesGetCollectionRequest) Execute() (*GameCenterMatchmakingQueuesResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesGetCollectionExecute(r)
}

/*
GameCenterMatchmakingQueuesGetCollection Method for GameCenterMatchmakingQueuesGetCollection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGameCenterMatchmakingQueuesGetCollectionRequest
*/
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesGetCollection(ctx context.Context) ApiGameCenterMatchmakingQueuesGetCollectionRequest {
	return ApiGameCenterMatchmakingQueuesGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingQueuesResponse
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesGetCollectionExecute(r ApiGameCenterMatchmakingQueuesGetCollectionRequest) (*GameCenterMatchmakingQueuesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingQueuesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingQueuesAPIService.GameCenterMatchmakingQueuesGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterMatchmakingQueues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterMatchmakingQueues]", r.fieldsGameCenterMatchmakingQueues, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesGetInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingQueuesAPIService
	id string
	fieldsGameCenterMatchmakingQueues *[]string
	include *[]string
}

// the fields to include for returned resources of type gameCenterMatchmakingQueues
func (r ApiGameCenterMatchmakingQueuesGetInstanceRequest) FieldsGameCenterMatchmakingQueues(fieldsGameCenterMatchmakingQueues []string) ApiGameCenterMatchmakingQueuesGetInstanceRequest {
	r.fieldsGameCenterMatchmakingQueues = &fieldsGameCenterMatchmakingQueues
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterMatchmakingQueuesGetInstanceRequest) Include(include []string) ApiGameCenterMatchmakingQueuesGetInstanceRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterMatchmakingQueuesGetInstanceRequest) Execute() (*GameCenterMatchmakingQueueResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesGetInstanceExecute(r)
}

/*
GameCenterMatchmakingQueuesGetInstance Method for GameCenterMatchmakingQueuesGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingQueuesGetInstanceRequest
*/
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesGetInstance(ctx context.Context, id string) ApiGameCenterMatchmakingQueuesGetInstanceRequest {
	return ApiGameCenterMatchmakingQueuesGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingQueueResponse
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesGetInstanceExecute(r ApiGameCenterMatchmakingQueuesGetInstanceRequest) (*GameCenterMatchmakingQueueResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingQueuesAPIService.GameCenterMatchmakingQueuesGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterMatchmakingQueues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterMatchmakingQueues]", r.fieldsGameCenterMatchmakingQueues, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingQueuesAPIService
	id string
	granularity *string
	sort *[]string
	limit *int32
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest) Granularity(granularity string) ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest) Sort(sort []string) ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest {
	r.sort = &sort
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest) Limit(limit int32) ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest {
	r.limit = &limit
	return r
}

func (r ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest) Execute() (*GameCenterMatchmakingQueueSizesV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsExecute(r)
}

/*
GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics Method for GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest
*/
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest {
	return ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingQueueSizesV1MetricResponse
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsExecute(r ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest) (*GameCenterMatchmakingQueueSizesV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingQueueSizesV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingQueuesAPIService.GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingQueuesAPIService
	id string
	granularity *string
	groupBy *[]string
	filterResult *string
	filterGameCenterDetail *string
	sort *[]string
	limit *int32
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest) Granularity(granularity string) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest) GroupBy(groupBy []string) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;result&#39; attribute dimension
func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest) FilterResult(filterResult string) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest {
	r.filterResult = &filterResult
	return r
}

// filter by &#39;gameCenterDetail&#39; relationship dimension
func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest) FilterGameCenterDetail(filterGameCenterDetail string) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest {
	r.filterGameCenterDetail = &filterGameCenterDetail
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest) Sort(sort []string) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest {
	r.sort = &sort
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest) Limit(limit int32) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest {
	r.limit = &limit
	return r
}

func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest) Execute() (*GameCenterMatchmakingQueueRequestsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsExecute(r)
}

/*
GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics Method for GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest
*/
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest {
	return ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingQueueRequestsV1MetricResponse
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsExecute(r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest) (*GameCenterMatchmakingQueueRequestsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingQueueRequestsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingQueuesAPIService.GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "form", "csv")
	}
	if r.filterResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[result]", r.filterResult, "form", "")
	}
	if r.filterGameCenterDetail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterDetail]", r.filterGameCenterDetail, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingQueuesAPIService
	id string
	granularity *string
	sort *[]string
	limit *int32
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest) Granularity(granularity string) ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest) Sort(sort []string) ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest {
	r.sort = &sort
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest) Limit(limit int32) ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest {
	r.limit = &limit
	return r
}

func (r ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest) Execute() (*GameCenterMatchmakingSessionsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsExecute(r)
}

/*
GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics Method for GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest
*/
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest {
	return ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingSessionsV1MetricResponse
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsExecute(r ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest) (*GameCenterMatchmakingSessionsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingSessionsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingQueuesAPIService.GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingQueuesAPIService
	id string
	gameCenterMatchmakingQueueUpdateRequest *GameCenterMatchmakingQueueUpdateRequest
}

// GameCenterMatchmakingQueue representation
func (r ApiGameCenterMatchmakingQueuesUpdateInstanceRequest) GameCenterMatchmakingQueueUpdateRequest(gameCenterMatchmakingQueueUpdateRequest GameCenterMatchmakingQueueUpdateRequest) ApiGameCenterMatchmakingQueuesUpdateInstanceRequest {
	r.gameCenterMatchmakingQueueUpdateRequest = &gameCenterMatchmakingQueueUpdateRequest
	return r
}

func (r ApiGameCenterMatchmakingQueuesUpdateInstanceRequest) Execute() (*GameCenterMatchmakingQueueResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesUpdateInstanceExecute(r)
}

/*
GameCenterMatchmakingQueuesUpdateInstance Method for GameCenterMatchmakingQueuesUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingQueuesUpdateInstanceRequest
*/
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesUpdateInstance(ctx context.Context, id string) ApiGameCenterMatchmakingQueuesUpdateInstanceRequest {
	return ApiGameCenterMatchmakingQueuesUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingQueueResponse
func (a *GameCenterMatchmakingQueuesAPIService) GameCenterMatchmakingQueuesUpdateInstanceExecute(r ApiGameCenterMatchmakingQueuesUpdateInstanceRequest) (*GameCenterMatchmakingQueueResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingQueueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingQueuesAPIService.GameCenterMatchmakingQueuesUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterMatchmakingQueueUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterMatchmakingQueueUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterMatchmakingQueueUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

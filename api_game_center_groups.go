/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// GameCenterGroupsAPIService GameCenterGroupsAPI service
type GameCenterGroupsAPIService service

type ApiGameCenterGroupsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterGroupsAPIService
	gameCenterGroupCreateRequest *GameCenterGroupCreateRequest
}

// GameCenterGroup representation
func (r ApiGameCenterGroupsCreateInstanceRequest) GameCenterGroupCreateRequest(gameCenterGroupCreateRequest GameCenterGroupCreateRequest) ApiGameCenterGroupsCreateInstanceRequest {
	r.gameCenterGroupCreateRequest = &gameCenterGroupCreateRequest
	return r
}

func (r ApiGameCenterGroupsCreateInstanceRequest) Execute() (*GameCenterGroupResponse, *http.Response, error) {
	return r.ApiService.GameCenterGroupsCreateInstanceExecute(r)
}

/*
GameCenterGroupsCreateInstance Method for GameCenterGroupsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGameCenterGroupsCreateInstanceRequest
*/
func (a *GameCenterGroupsAPIService) GameCenterGroupsCreateInstance(ctx context.Context) ApiGameCenterGroupsCreateInstanceRequest {
	return ApiGameCenterGroupsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GameCenterGroupResponse
func (a *GameCenterGroupsAPIService) GameCenterGroupsCreateInstanceExecute(r ApiGameCenterGroupsCreateInstanceRequest) (*GameCenterGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterGroupsAPIService.GameCenterGroupsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterGroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterGroupCreateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterGroupCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterGroupCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterGroupsDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterGroupsAPIService
	id string
}

func (r ApiGameCenterGroupsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterGroupsDeleteInstanceExecute(r)
}

/*
GameCenterGroupsDeleteInstance Method for GameCenterGroupsDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterGroupsDeleteInstanceRequest
*/
func (a *GameCenterGroupsAPIService) GameCenterGroupsDeleteInstance(ctx context.Context, id string) ApiGameCenterGroupsDeleteInstanceRequest {
	return ApiGameCenterGroupsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GameCenterGroupsAPIService) GameCenterGroupsDeleteInstanceExecute(r ApiGameCenterGroupsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterGroupsAPIService.GameCenterGroupsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterGroups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *GameCenterGroupsAPIService
	id string
	filterReferenceName *[]string
	filterArchived *[]string
	filterId *[]string
	fieldsGameCenterAchievements *[]string
	fieldsGameCenterDetails *[]string
	fieldsGameCenterGroups *[]string
	fieldsGameCenterAchievementLocalizations *[]string
	fieldsGameCenterAchievementReleases *[]string
	limit *int32
	include *[]string
	limitLocalizations *int32
	limitReleases *int32
}

// filter by attribute &#39;referenceName&#39;
func (r ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest) FilterReferenceName(filterReferenceName []string) ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest {
	r.filterReferenceName = &filterReferenceName
	return r
}

// filter by attribute &#39;archived&#39;
func (r ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest) FilterArchived(filterArchived []string) ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest {
	r.filterArchived = &filterArchived
	return r
}

// filter by id(s)
func (r ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest) FilterId(filterId []string) ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest {
	r.filterId = &filterId
	return r
}

// the fields to include for returned resources of type gameCenterAchievements
func (r ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest) FieldsGameCenterAchievements(fieldsGameCenterAchievements []string) ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest {
	r.fieldsGameCenterAchievements = &fieldsGameCenterAchievements
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterGroups
func (r ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest) FieldsGameCenterGroups(fieldsGameCenterGroups []string) ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest {
	r.fieldsGameCenterGroups = &fieldsGameCenterGroups
	return r
}

// the fields to include for returned resources of type gameCenterAchievementLocalizations
func (r ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest) FieldsGameCenterAchievementLocalizations(fieldsGameCenterAchievementLocalizations []string) ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest {
	r.fieldsGameCenterAchievementLocalizations = &fieldsGameCenterAchievementLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterAchievementReleases
func (r ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest) FieldsGameCenterAchievementReleases(fieldsGameCenterAchievementReleases []string) ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest {
	r.fieldsGameCenterAchievementReleases = &fieldsGameCenterAchievementReleases
	return r
}

// maximum resources per page
func (r ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest) Include(include []string) ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related localizations returned (when they are included)
func (r ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest) LimitLocalizations(limitLocalizations int32) ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest {
	r.limitLocalizations = &limitLocalizations
	return r
}

// maximum number of related releases returned (when they are included)
func (r ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest) LimitReleases(limitReleases int32) ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest {
	r.limitReleases = &limitReleases
	return r
}

func (r ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest) Execute() (*GameCenterAchievementsResponse, *http.Response, error) {
	return r.ApiService.GameCenterGroupsGameCenterAchievementsGetToManyRelatedExecute(r)
}

/*
GameCenterGroupsGameCenterAchievementsGetToManyRelated Method for GameCenterGroupsGameCenterAchievementsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest
*/
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterAchievementsGetToManyRelated(ctx context.Context, id string) ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest {
	return ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterAchievementsResponse
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterAchievementsGetToManyRelatedExecute(r ApiGameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest) (*GameCenterAchievementsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterAchievementsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterGroupsAPIService.GameCenterGroupsGameCenterAchievementsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterGroups/{id}/gameCenterAchievements"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterReferenceName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[referenceName]", r.filterReferenceName, "form", "csv")
	}
	if r.filterArchived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[archived]", r.filterArchived, "form", "csv")
	}
	if r.filterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[id]", r.filterId, "form", "csv")
	}
	if r.fieldsGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievements]", r.fieldsGameCenterAchievements, "form", "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "form", "csv")
	}
	if r.fieldsGameCenterGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterGroups]", r.fieldsGameCenterGroups, "form", "csv")
	}
	if r.fieldsGameCenterAchievementLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementLocalizations]", r.fieldsGameCenterAchievementLocalizations, "form", "csv")
	}
	if r.fieldsGameCenterAchievementReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementReleases]", r.fieldsGameCenterAchievementReleases, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[localizations]", r.limitLocalizations, "form", "")
	}
	if r.limitReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[releases]", r.limitReleases, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterGroupsGameCenterAchievementsGetToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *GameCenterGroupsAPIService
	id string
	limit *int32
}

// maximum resources per page
func (r ApiGameCenterGroupsGameCenterAchievementsGetToManyRelationshipRequest) Limit(limit int32) ApiGameCenterGroupsGameCenterAchievementsGetToManyRelationshipRequest {
	r.limit = &limit
	return r
}

func (r ApiGameCenterGroupsGameCenterAchievementsGetToManyRelationshipRequest) Execute() (*GameCenterGroupGameCenterAchievementsLinkagesResponse, *http.Response, error) {
	return r.ApiService.GameCenterGroupsGameCenterAchievementsGetToManyRelationshipExecute(r)
}

/*
GameCenterGroupsGameCenterAchievementsGetToManyRelationship Method for GameCenterGroupsGameCenterAchievementsGetToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterGroupsGameCenterAchievementsGetToManyRelationshipRequest
*/
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterAchievementsGetToManyRelationship(ctx context.Context, id string) ApiGameCenterGroupsGameCenterAchievementsGetToManyRelationshipRequest {
	return ApiGameCenterGroupsGameCenterAchievementsGetToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterGroupGameCenterAchievementsLinkagesResponse
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterAchievementsGetToManyRelationshipExecute(r ApiGameCenterGroupsGameCenterAchievementsGetToManyRelationshipRequest) (*GameCenterGroupGameCenterAchievementsLinkagesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterGroupGameCenterAchievementsLinkagesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterGroupsAPIService.GameCenterGroupsGameCenterAchievementsGetToManyRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *GameCenterGroupsAPIService
	id string
	gameCenterGroupGameCenterAchievementsLinkagesRequest *GameCenterGroupGameCenterAchievementsLinkagesRequest
}

// List of related linkages
func (r ApiGameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRequest) GameCenterGroupGameCenterAchievementsLinkagesRequest(gameCenterGroupGameCenterAchievementsLinkagesRequest GameCenterGroupGameCenterAchievementsLinkagesRequest) ApiGameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRequest {
	r.gameCenterGroupGameCenterAchievementsLinkagesRequest = &gameCenterGroupGameCenterAchievementsLinkagesRequest
	return r
}

func (r ApiGameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipExecute(r)
}

/*
GameCenterGroupsGameCenterAchievementsReplaceToManyRelationship Method for GameCenterGroupsGameCenterAchievementsReplaceToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRequest
*/
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterAchievementsReplaceToManyRelationship(ctx context.Context, id string) ApiGameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRequest {
	return ApiGameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipExecute(r ApiGameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterGroupsAPIService.GameCenterGroupsGameCenterAchievementsReplaceToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterGroupGameCenterAchievementsLinkagesRequest == nil {
		return nil, reportError("gameCenterGroupGameCenterAchievementsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterGroupGameCenterAchievementsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *GameCenterGroupsAPIService
	id string
	filterGameCenterAppVersionsEnabled *[]string
	fieldsGameCenterDetails *[]string
	fieldsApps *[]string
	fieldsGameCenterAppVersions *[]string
	fieldsGameCenterGroups *[]string
	fieldsGameCenterLeaderboards *[]string
	fieldsGameCenterLeaderboardSets *[]string
	fieldsGameCenterAchievements *[]string
	fieldsGameCenterAchievementReleases *[]string
	fieldsGameCenterLeaderboardReleases *[]string
	fieldsGameCenterLeaderboardSetReleases *[]string
	limit *int32
	include *[]string
	limitGameCenterAppVersions *int32
	limitGameCenterLeaderboards *int32
	limitGameCenterLeaderboardSets *int32
	limitGameCenterAchievements *int32
	limitAchievementReleases *int32
	limitLeaderboardReleases *int32
	limitLeaderboardSetReleases *int32
}

// filter by attribute &#39;gameCenterAppVersions.enabled&#39;
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) FilterGameCenterAppVersionsEnabled(filterGameCenterAppVersionsEnabled []string) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.filterGameCenterAppVersionsEnabled = &filterGameCenterAppVersionsEnabled
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type apps
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) FieldsApps(fieldsApps []string) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// the fields to include for returned resources of type gameCenterAppVersions
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) FieldsGameCenterAppVersions(fieldsGameCenterAppVersions []string) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.fieldsGameCenterAppVersions = &fieldsGameCenterAppVersions
	return r
}

// the fields to include for returned resources of type gameCenterGroups
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) FieldsGameCenterGroups(fieldsGameCenterGroups []string) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.fieldsGameCenterGroups = &fieldsGameCenterGroups
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboards
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) FieldsGameCenterLeaderboards(fieldsGameCenterLeaderboards []string) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboards = &fieldsGameCenterLeaderboards
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSets
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) FieldsGameCenterLeaderboardSets(fieldsGameCenterLeaderboardSets []string) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardSets = &fieldsGameCenterLeaderboardSets
	return r
}

// the fields to include for returned resources of type gameCenterAchievements
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) FieldsGameCenterAchievements(fieldsGameCenterAchievements []string) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.fieldsGameCenterAchievements = &fieldsGameCenterAchievements
	return r
}

// the fields to include for returned resources of type gameCenterAchievementReleases
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) FieldsGameCenterAchievementReleases(fieldsGameCenterAchievementReleases []string) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.fieldsGameCenterAchievementReleases = &fieldsGameCenterAchievementReleases
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardReleases
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) FieldsGameCenterLeaderboardReleases(fieldsGameCenterLeaderboardReleases []string) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardReleases = &fieldsGameCenterLeaderboardReleases
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSetReleases
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) FieldsGameCenterLeaderboardSetReleases(fieldsGameCenterLeaderboardSetReleases []string) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardSetReleases = &fieldsGameCenterLeaderboardSetReleases
	return r
}

// maximum resources per page
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) Include(include []string) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related gameCenterAppVersions returned (when they are included)
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) LimitGameCenterAppVersions(limitGameCenterAppVersions int32) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.limitGameCenterAppVersions = &limitGameCenterAppVersions
	return r
}

// maximum number of related gameCenterLeaderboards returned (when they are included)
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) LimitGameCenterLeaderboards(limitGameCenterLeaderboards int32) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.limitGameCenterLeaderboards = &limitGameCenterLeaderboards
	return r
}

// maximum number of related gameCenterLeaderboardSets returned (when they are included)
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) LimitGameCenterLeaderboardSets(limitGameCenterLeaderboardSets int32) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.limitGameCenterLeaderboardSets = &limitGameCenterLeaderboardSets
	return r
}

// maximum number of related gameCenterAchievements returned (when they are included)
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) LimitGameCenterAchievements(limitGameCenterAchievements int32) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.limitGameCenterAchievements = &limitGameCenterAchievements
	return r
}

// maximum number of related achievementReleases returned (when they are included)
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) LimitAchievementReleases(limitAchievementReleases int32) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.limitAchievementReleases = &limitAchievementReleases
	return r
}

// maximum number of related leaderboardReleases returned (when they are included)
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) LimitLeaderboardReleases(limitLeaderboardReleases int32) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.limitLeaderboardReleases = &limitLeaderboardReleases
	return r
}

// maximum number of related leaderboardSetReleases returned (when they are included)
func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) LimitLeaderboardSetReleases(limitLeaderboardSetReleases int32) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	r.limitLeaderboardSetReleases = &limitLeaderboardSetReleases
	return r
}

func (r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) Execute() (*GameCenterDetailsResponse, *http.Response, error) {
	return r.ApiService.GameCenterGroupsGameCenterDetailsGetToManyRelatedExecute(r)
}

/*
GameCenterGroupsGameCenterDetailsGetToManyRelated Method for GameCenterGroupsGameCenterDetailsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest
*/
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterDetailsGetToManyRelated(ctx context.Context, id string) ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
	return ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterDetailsResponse
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterDetailsGetToManyRelatedExecute(r ApiGameCenterGroupsGameCenterDetailsGetToManyRelatedRequest) (*GameCenterDetailsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterDetailsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterGroupsAPIService.GameCenterGroupsGameCenterDetailsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterGroups/{id}/gameCenterDetails"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterGameCenterAppVersionsEnabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterAppVersions.enabled]", r.filterGameCenterAppVersionsEnabled, "form", "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "form", "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "form", "csv")
	}
	if r.fieldsGameCenterAppVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAppVersions]", r.fieldsGameCenterAppVersions, "form", "csv")
	}
	if r.fieldsGameCenterGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterGroups]", r.fieldsGameCenterGroups, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboards]", r.fieldsGameCenterLeaderboards, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSets]", r.fieldsGameCenterLeaderboardSets, "form", "csv")
	}
	if r.fieldsGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievements]", r.fieldsGameCenterAchievements, "form", "csv")
	}
	if r.fieldsGameCenterAchievementReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementReleases]", r.fieldsGameCenterAchievementReleases, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardReleases]", r.fieldsGameCenterLeaderboardReleases, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSetReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetReleases]", r.fieldsGameCenterLeaderboardSetReleases, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitGameCenterAppVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterAppVersions]", r.limitGameCenterAppVersions, "form", "")
	}
	if r.limitGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboards]", r.limitGameCenterLeaderboards, "form", "")
	}
	if r.limitGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboardSets]", r.limitGameCenterLeaderboardSets, "form", "")
	}
	if r.limitGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterAchievements]", r.limitGameCenterAchievements, "form", "")
	}
	if r.limitAchievementReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[achievementReleases]", r.limitAchievementReleases, "form", "")
	}
	if r.limitLeaderboardReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[leaderboardReleases]", r.limitLeaderboardReleases, "form", "")
	}
	if r.limitLeaderboardSetReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[leaderboardSetReleases]", r.limitLeaderboardSetReleases, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *GameCenterGroupsAPIService
	id string
	filterReferenceName *[]string
	filterId *[]string
	fieldsGameCenterLeaderboardSets *[]string
	fieldsGameCenterDetails *[]string
	fieldsGameCenterGroups *[]string
	fieldsGameCenterLeaderboardSetLocalizations *[]string
	fieldsGameCenterLeaderboards *[]string
	fieldsGameCenterLeaderboardSetReleases *[]string
	limit *int32
	include *[]string
	limitLocalizations *int32
	limitGameCenterLeaderboards *int32
	limitReleases *int32
}

// filter by attribute &#39;referenceName&#39;
func (r ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest) FilterReferenceName(filterReferenceName []string) ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.filterReferenceName = &filterReferenceName
	return r
}

// filter by id(s)
func (r ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest) FilterId(filterId []string) ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.filterId = &filterId
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSets
func (r ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest) FieldsGameCenterLeaderboardSets(fieldsGameCenterLeaderboardSets []string) ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardSets = &fieldsGameCenterLeaderboardSets
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterGroups
func (r ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest) FieldsGameCenterGroups(fieldsGameCenterGroups []string) ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.fieldsGameCenterGroups = &fieldsGameCenterGroups
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
func (r ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest) FieldsGameCenterLeaderboardSetLocalizations(fieldsGameCenterLeaderboardSetLocalizations []string) ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardSetLocalizations = &fieldsGameCenterLeaderboardSetLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboards
func (r ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest) FieldsGameCenterLeaderboards(fieldsGameCenterLeaderboards []string) ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboards = &fieldsGameCenterLeaderboards
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSetReleases
func (r ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest) FieldsGameCenterLeaderboardSetReleases(fieldsGameCenterLeaderboardSetReleases []string) ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardSetReleases = &fieldsGameCenterLeaderboardSetReleases
	return r
}

// maximum resources per page
func (r ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest) Include(include []string) ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related localizations returned (when they are included)
func (r ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest) LimitLocalizations(limitLocalizations int32) ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.limitLocalizations = &limitLocalizations
	return r
}

// maximum number of related gameCenterLeaderboards returned (when they are included)
func (r ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest) LimitGameCenterLeaderboards(limitGameCenterLeaderboards int32) ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.limitGameCenterLeaderboards = &limitGameCenterLeaderboards
	return r
}

// maximum number of related releases returned (when they are included)
func (r ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest) LimitReleases(limitReleases int32) ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.limitReleases = &limitReleases
	return r
}

func (r ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest) Execute() (*GameCenterLeaderboardSetsResponse, *http.Response, error) {
	return r.ApiService.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedExecute(r)
}

/*
GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated Method for GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest
*/
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated(ctx context.Context, id string) ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	return ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterLeaderboardSetsResponse
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedExecute(r ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest) (*GameCenterLeaderboardSetsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterLeaderboardSetsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterGroupsAPIService.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterGroups/{id}/gameCenterLeaderboardSets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterReferenceName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[referenceName]", r.filterReferenceName, "form", "csv")
	}
	if r.filterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[id]", r.filterId, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSets]", r.fieldsGameCenterLeaderboardSets, "form", "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "form", "csv")
	}
	if r.fieldsGameCenterGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterGroups]", r.fieldsGameCenterGroups, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSetLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetLocalizations]", r.fieldsGameCenterLeaderboardSetLocalizations, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboards]", r.fieldsGameCenterLeaderboards, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSetReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetReleases]", r.fieldsGameCenterLeaderboardSetReleases, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[localizations]", r.limitLocalizations, "form", "")
	}
	if r.limitGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboards]", r.limitGameCenterLeaderboards, "form", "")
	}
	if r.limitReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[releases]", r.limitReleases, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *GameCenterGroupsAPIService
	id string
	limit *int32
}

// maximum resources per page
func (r ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRequest) Limit(limit int32) ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRequest {
	r.limit = &limit
	return r
}

func (r ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRequest) Execute() (*GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse, *http.Response, error) {
	return r.ApiService.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipExecute(r)
}

/*
GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship Method for GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRequest
*/
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship(ctx context.Context, id string) ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRequest {
	return ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipExecute(r ApiGameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRequest) (*GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterGroupsAPIService.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *GameCenterGroupsAPIService
	id string
	gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest *GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest
}

// List of related linkages
func (r ApiGameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest) GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest(gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest) ApiGameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest {
	r.gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest = &gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest
	return r
}

func (r ApiGameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipExecute(r)
}

/*
GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship Method for GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest
*/
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship(ctx context.Context, id string) ApiGameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest {
	return ApiGameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipExecute(r ApiGameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterGroupsAPIService.GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest == nil {
		return nil, reportError("gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *GameCenterGroupsAPIService
	id string
	filterReferenceName *[]string
	filterArchived *[]string
	filterId *[]string
	fieldsGameCenterLeaderboards *[]string
	fieldsGameCenterDetails *[]string
	fieldsGameCenterGroups *[]string
	fieldsGameCenterLeaderboardSets *[]string
	fieldsGameCenterLeaderboardLocalizations *[]string
	fieldsGameCenterLeaderboardReleases *[]string
	limit *int32
	include *[]string
	limitGameCenterLeaderboardSets *int32
	limitLocalizations *int32
	limitReleases *int32
}

// filter by attribute &#39;referenceName&#39;
func (r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest) FilterReferenceName(filterReferenceName []string) ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.filterReferenceName = &filterReferenceName
	return r
}

// filter by attribute &#39;archived&#39;
func (r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest) FilterArchived(filterArchived []string) ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.filterArchived = &filterArchived
	return r
}

// filter by id(s)
func (r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest) FilterId(filterId []string) ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.filterId = &filterId
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboards
func (r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest) FieldsGameCenterLeaderboards(fieldsGameCenterLeaderboards []string) ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboards = &fieldsGameCenterLeaderboards
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterGroups
func (r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest) FieldsGameCenterGroups(fieldsGameCenterGroups []string) ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.fieldsGameCenterGroups = &fieldsGameCenterGroups
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSets
func (r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest) FieldsGameCenterLeaderboardSets(fieldsGameCenterLeaderboardSets []string) ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardSets = &fieldsGameCenterLeaderboardSets
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardLocalizations
func (r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest) FieldsGameCenterLeaderboardLocalizations(fieldsGameCenterLeaderboardLocalizations []string) ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardLocalizations = &fieldsGameCenterLeaderboardLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardReleases
func (r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest) FieldsGameCenterLeaderboardReleases(fieldsGameCenterLeaderboardReleases []string) ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardReleases = &fieldsGameCenterLeaderboardReleases
	return r
}

// maximum resources per page
func (r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest) Include(include []string) ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related gameCenterLeaderboardSets returned (when they are included)
func (r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest) LimitGameCenterLeaderboardSets(limitGameCenterLeaderboardSets int32) ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.limitGameCenterLeaderboardSets = &limitGameCenterLeaderboardSets
	return r
}

// maximum number of related localizations returned (when they are included)
func (r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest) LimitLocalizations(limitLocalizations int32) ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.limitLocalizations = &limitLocalizations
	return r
}

// maximum number of related releases returned (when they are included)
func (r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest) LimitReleases(limitReleases int32) ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.limitReleases = &limitReleases
	return r
}

func (r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest) Execute() (*GameCenterLeaderboardsResponse, *http.Response, error) {
	return r.ApiService.GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedExecute(r)
}

/*
GameCenterGroupsGameCenterLeaderboardsGetToManyRelated Method for GameCenterGroupsGameCenterLeaderboardsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest
*/
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterLeaderboardsGetToManyRelated(ctx context.Context, id string) ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest {
	return ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterLeaderboardsResponse
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedExecute(r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest) (*GameCenterLeaderboardsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterLeaderboardsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterGroupsAPIService.GameCenterGroupsGameCenterLeaderboardsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterGroups/{id}/gameCenterLeaderboards"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterReferenceName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[referenceName]", r.filterReferenceName, "form", "csv")
	}
	if r.filterArchived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[archived]", r.filterArchived, "form", "csv")
	}
	if r.filterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[id]", r.filterId, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboards]", r.fieldsGameCenterLeaderboards, "form", "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "form", "csv")
	}
	if r.fieldsGameCenterGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterGroups]", r.fieldsGameCenterGroups, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSets]", r.fieldsGameCenterLeaderboardSets, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardLocalizations]", r.fieldsGameCenterLeaderboardLocalizations, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardReleases]", r.fieldsGameCenterLeaderboardReleases, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboardSets]", r.limitGameCenterLeaderboardSets, "form", "")
	}
	if r.limitLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[localizations]", r.limitLocalizations, "form", "")
	}
	if r.limitReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[releases]", r.limitReleases, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *GameCenterGroupsAPIService
	id string
	limit *int32
}

// maximum resources per page
func (r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRequest) Limit(limit int32) ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRequest {
	r.limit = &limit
	return r
}

func (r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRequest) Execute() (*GameCenterGroupGameCenterLeaderboardsLinkagesResponse, *http.Response, error) {
	return r.ApiService.GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipExecute(r)
}

/*
GameCenterGroupsGameCenterLeaderboardsGetToManyRelationship Method for GameCenterGroupsGameCenterLeaderboardsGetToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRequest
*/
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterLeaderboardsGetToManyRelationship(ctx context.Context, id string) ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRequest {
	return ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterGroupGameCenterLeaderboardsLinkagesResponse
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipExecute(r ApiGameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRequest) (*GameCenterGroupGameCenterLeaderboardsLinkagesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterGroupGameCenterLeaderboardsLinkagesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterGroupsAPIService.GameCenterGroupsGameCenterLeaderboardsGetToManyRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *GameCenterGroupsAPIService
	id string
	gameCenterGroupGameCenterLeaderboardsLinkagesRequest *GameCenterGroupGameCenterLeaderboardsLinkagesRequest
}

// List of related linkages
func (r ApiGameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRequest) GameCenterGroupGameCenterLeaderboardsLinkagesRequest(gameCenterGroupGameCenterLeaderboardsLinkagesRequest GameCenterGroupGameCenterLeaderboardsLinkagesRequest) ApiGameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRequest {
	r.gameCenterGroupGameCenterLeaderboardsLinkagesRequest = &gameCenterGroupGameCenterLeaderboardsLinkagesRequest
	return r
}

func (r ApiGameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipExecute(r)
}

/*
GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship Method for GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRequest
*/
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship(ctx context.Context, id string) ApiGameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRequest {
	return ApiGameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GameCenterGroupsAPIService) GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipExecute(r ApiGameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterGroupsAPIService.GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterGroupGameCenterLeaderboardsLinkagesRequest == nil {
		return nil, reportError("gameCenterGroupGameCenterLeaderboardsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterGroupGameCenterLeaderboardsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterGroupsGetCollectionRequest struct {
	ctx context.Context
	ApiService *GameCenterGroupsAPIService
	filterGameCenterDetails *[]string
	fieldsGameCenterGroups *[]string
	fieldsGameCenterDetails *[]string
	fieldsGameCenterLeaderboards *[]string
	fieldsGameCenterLeaderboardSets *[]string
	fieldsGameCenterAchievements *[]string
	limit *int32
	include *[]string
	limitGameCenterAchievements *int32
	limitGameCenterDetails *int32
	limitGameCenterLeaderboardSets *int32
	limitGameCenterLeaderboards *int32
}

// filter by id(s) of related &#39;gameCenterDetails&#39;
func (r ApiGameCenterGroupsGetCollectionRequest) FilterGameCenterDetails(filterGameCenterDetails []string) ApiGameCenterGroupsGetCollectionRequest {
	r.filterGameCenterDetails = &filterGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterGroups
func (r ApiGameCenterGroupsGetCollectionRequest) FieldsGameCenterGroups(fieldsGameCenterGroups []string) ApiGameCenterGroupsGetCollectionRequest {
	r.fieldsGameCenterGroups = &fieldsGameCenterGroups
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterGroupsGetCollectionRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterGroupsGetCollectionRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboards
func (r ApiGameCenterGroupsGetCollectionRequest) FieldsGameCenterLeaderboards(fieldsGameCenterLeaderboards []string) ApiGameCenterGroupsGetCollectionRequest {
	r.fieldsGameCenterLeaderboards = &fieldsGameCenterLeaderboards
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSets
func (r ApiGameCenterGroupsGetCollectionRequest) FieldsGameCenterLeaderboardSets(fieldsGameCenterLeaderboardSets []string) ApiGameCenterGroupsGetCollectionRequest {
	r.fieldsGameCenterLeaderboardSets = &fieldsGameCenterLeaderboardSets
	return r
}

// the fields to include for returned resources of type gameCenterAchievements
func (r ApiGameCenterGroupsGetCollectionRequest) FieldsGameCenterAchievements(fieldsGameCenterAchievements []string) ApiGameCenterGroupsGetCollectionRequest {
	r.fieldsGameCenterAchievements = &fieldsGameCenterAchievements
	return r
}

// maximum resources per page
func (r ApiGameCenterGroupsGetCollectionRequest) Limit(limit int32) ApiGameCenterGroupsGetCollectionRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterGroupsGetCollectionRequest) Include(include []string) ApiGameCenterGroupsGetCollectionRequest {
	r.include = &include
	return r
}

// maximum number of related gameCenterAchievements returned (when they are included)
func (r ApiGameCenterGroupsGetCollectionRequest) LimitGameCenterAchievements(limitGameCenterAchievements int32) ApiGameCenterGroupsGetCollectionRequest {
	r.limitGameCenterAchievements = &limitGameCenterAchievements
	return r
}

// maximum number of related gameCenterDetails returned (when they are included)
func (r ApiGameCenterGroupsGetCollectionRequest) LimitGameCenterDetails(limitGameCenterDetails int32) ApiGameCenterGroupsGetCollectionRequest {
	r.limitGameCenterDetails = &limitGameCenterDetails
	return r
}

// maximum number of related gameCenterLeaderboardSets returned (when they are included)
func (r ApiGameCenterGroupsGetCollectionRequest) LimitGameCenterLeaderboardSets(limitGameCenterLeaderboardSets int32) ApiGameCenterGroupsGetCollectionRequest {
	r.limitGameCenterLeaderboardSets = &limitGameCenterLeaderboardSets
	return r
}

// maximum number of related gameCenterLeaderboards returned (when they are included)
func (r ApiGameCenterGroupsGetCollectionRequest) LimitGameCenterLeaderboards(limitGameCenterLeaderboards int32) ApiGameCenterGroupsGetCollectionRequest {
	r.limitGameCenterLeaderboards = &limitGameCenterLeaderboards
	return r
}

func (r ApiGameCenterGroupsGetCollectionRequest) Execute() (*GameCenterGroupsResponse, *http.Response, error) {
	return r.ApiService.GameCenterGroupsGetCollectionExecute(r)
}

/*
GameCenterGroupsGetCollection Method for GameCenterGroupsGetCollection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGameCenterGroupsGetCollectionRequest
*/
func (a *GameCenterGroupsAPIService) GameCenterGroupsGetCollection(ctx context.Context) ApiGameCenterGroupsGetCollectionRequest {
	return ApiGameCenterGroupsGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GameCenterGroupsResponse
func (a *GameCenterGroupsAPIService) GameCenterGroupsGetCollectionExecute(r ApiGameCenterGroupsGetCollectionRequest) (*GameCenterGroupsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterGroupsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterGroupsAPIService.GameCenterGroupsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterGroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterDetails]", r.filterGameCenterDetails, "form", "csv")
	}
	if r.fieldsGameCenterGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterGroups]", r.fieldsGameCenterGroups, "form", "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboards]", r.fieldsGameCenterLeaderboards, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSets]", r.fieldsGameCenterLeaderboardSets, "form", "csv")
	}
	if r.fieldsGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievements]", r.fieldsGameCenterAchievements, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterAchievements]", r.limitGameCenterAchievements, "form", "")
	}
	if r.limitGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterDetails]", r.limitGameCenterDetails, "form", "")
	}
	if r.limitGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboardSets]", r.limitGameCenterLeaderboardSets, "form", "")
	}
	if r.limitGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboards]", r.limitGameCenterLeaderboards, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterGroupsGetInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterGroupsAPIService
	id string
	fieldsGameCenterGroups *[]string
	fieldsGameCenterDetails *[]string
	fieldsGameCenterLeaderboards *[]string
	fieldsGameCenterLeaderboardSets *[]string
	fieldsGameCenterAchievements *[]string
	include *[]string
	limitGameCenterAchievements *int32
	limitGameCenterDetails *int32
	limitGameCenterLeaderboardSets *int32
	limitGameCenterLeaderboards *int32
}

// the fields to include for returned resources of type gameCenterGroups
func (r ApiGameCenterGroupsGetInstanceRequest) FieldsGameCenterGroups(fieldsGameCenterGroups []string) ApiGameCenterGroupsGetInstanceRequest {
	r.fieldsGameCenterGroups = &fieldsGameCenterGroups
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterGroupsGetInstanceRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterGroupsGetInstanceRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboards
func (r ApiGameCenterGroupsGetInstanceRequest) FieldsGameCenterLeaderboards(fieldsGameCenterLeaderboards []string) ApiGameCenterGroupsGetInstanceRequest {
	r.fieldsGameCenterLeaderboards = &fieldsGameCenterLeaderboards
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSets
func (r ApiGameCenterGroupsGetInstanceRequest) FieldsGameCenterLeaderboardSets(fieldsGameCenterLeaderboardSets []string) ApiGameCenterGroupsGetInstanceRequest {
	r.fieldsGameCenterLeaderboardSets = &fieldsGameCenterLeaderboardSets
	return r
}

// the fields to include for returned resources of type gameCenterAchievements
func (r ApiGameCenterGroupsGetInstanceRequest) FieldsGameCenterAchievements(fieldsGameCenterAchievements []string) ApiGameCenterGroupsGetInstanceRequest {
	r.fieldsGameCenterAchievements = &fieldsGameCenterAchievements
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterGroupsGetInstanceRequest) Include(include []string) ApiGameCenterGroupsGetInstanceRequest {
	r.include = &include
	return r
}

// maximum number of related gameCenterAchievements returned (when they are included)
func (r ApiGameCenterGroupsGetInstanceRequest) LimitGameCenterAchievements(limitGameCenterAchievements int32) ApiGameCenterGroupsGetInstanceRequest {
	r.limitGameCenterAchievements = &limitGameCenterAchievements
	return r
}

// maximum number of related gameCenterDetails returned (when they are included)
func (r ApiGameCenterGroupsGetInstanceRequest) LimitGameCenterDetails(limitGameCenterDetails int32) ApiGameCenterGroupsGetInstanceRequest {
	r.limitGameCenterDetails = &limitGameCenterDetails
	return r
}

// maximum number of related gameCenterLeaderboardSets returned (when they are included)
func (r ApiGameCenterGroupsGetInstanceRequest) LimitGameCenterLeaderboardSets(limitGameCenterLeaderboardSets int32) ApiGameCenterGroupsGetInstanceRequest {
	r.limitGameCenterLeaderboardSets = &limitGameCenterLeaderboardSets
	return r
}

// maximum number of related gameCenterLeaderboards returned (when they are included)
func (r ApiGameCenterGroupsGetInstanceRequest) LimitGameCenterLeaderboards(limitGameCenterLeaderboards int32) ApiGameCenterGroupsGetInstanceRequest {
	r.limitGameCenterLeaderboards = &limitGameCenterLeaderboards
	return r
}

func (r ApiGameCenterGroupsGetInstanceRequest) Execute() (*GameCenterGroupResponse, *http.Response, error) {
	return r.ApiService.GameCenterGroupsGetInstanceExecute(r)
}

/*
GameCenterGroupsGetInstance Method for GameCenterGroupsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterGroupsGetInstanceRequest
*/
func (a *GameCenterGroupsAPIService) GameCenterGroupsGetInstance(ctx context.Context, id string) ApiGameCenterGroupsGetInstanceRequest {
	return ApiGameCenterGroupsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterGroupResponse
func (a *GameCenterGroupsAPIService) GameCenterGroupsGetInstanceExecute(r ApiGameCenterGroupsGetInstanceRequest) (*GameCenterGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterGroupsAPIService.GameCenterGroupsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterGroups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterGroups]", r.fieldsGameCenterGroups, "form", "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboards]", r.fieldsGameCenterLeaderboards, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSets]", r.fieldsGameCenterLeaderboardSets, "form", "csv")
	}
	if r.fieldsGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievements]", r.fieldsGameCenterAchievements, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterAchievements]", r.limitGameCenterAchievements, "form", "")
	}
	if r.limitGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterDetails]", r.limitGameCenterDetails, "form", "")
	}
	if r.limitGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboardSets]", r.limitGameCenterLeaderboardSets, "form", "")
	}
	if r.limitGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboards]", r.limitGameCenterLeaderboards, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterGroupsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterGroupsAPIService
	id string
	gameCenterGroupUpdateRequest *GameCenterGroupUpdateRequest
}

// GameCenterGroup representation
func (r ApiGameCenterGroupsUpdateInstanceRequest) GameCenterGroupUpdateRequest(gameCenterGroupUpdateRequest GameCenterGroupUpdateRequest) ApiGameCenterGroupsUpdateInstanceRequest {
	r.gameCenterGroupUpdateRequest = &gameCenterGroupUpdateRequest
	return r
}

func (r ApiGameCenterGroupsUpdateInstanceRequest) Execute() (*GameCenterGroupResponse, *http.Response, error) {
	return r.ApiService.GameCenterGroupsUpdateInstanceExecute(r)
}

/*
GameCenterGroupsUpdateInstance Method for GameCenterGroupsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterGroupsUpdateInstanceRequest
*/
func (a *GameCenterGroupsAPIService) GameCenterGroupsUpdateInstance(ctx context.Context, id string) ApiGameCenterGroupsUpdateInstanceRequest {
	return ApiGameCenterGroupsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterGroupResponse
func (a *GameCenterGroupsAPIService) GameCenterGroupsUpdateInstanceExecute(r ApiGameCenterGroupsUpdateInstanceRequest) (*GameCenterGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterGroupsAPIService.GameCenterGroupsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterGroups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterGroupUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterGroupUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterGroupUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect-client

import (
	"encoding/json"
)

// checks if the GameCenterAchievementLocalizationAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GameCenterAchievementLocalizationAttributes{}

// GameCenterAchievementLocalizationAttributes struct for GameCenterAchievementLocalizationAttributes
type GameCenterAchievementLocalizationAttributes struct {
	Locale *string `json:"locale,omitempty"`
	Name *string `json:"name,omitempty"`
	BeforeEarnedDescription *string `json:"beforeEarnedDescription,omitempty"`
	AfterEarnedDescription *string `json:"afterEarnedDescription,omitempty"`
}

// NewGameCenterAchievementLocalizationAttributes instantiates a new GameCenterAchievementLocalizationAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGameCenterAchievementLocalizationAttributes() *GameCenterAchievementLocalizationAttributes {
	this := GameCenterAchievementLocalizationAttributes{}
	return &this
}

// NewGameCenterAchievementLocalizationAttributesWithDefaults instantiates a new GameCenterAchievementLocalizationAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGameCenterAchievementLocalizationAttributesWithDefaults() *GameCenterAchievementLocalizationAttributes {
	this := GameCenterAchievementLocalizationAttributes{}
	return &this
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *GameCenterAchievementLocalizationAttributes) GetLocale() string {
	if o == nil || IsNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterAchievementLocalizationAttributes) GetLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *GameCenterAchievementLocalizationAttributes) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *GameCenterAchievementLocalizationAttributes) SetLocale(v string) {
	o.Locale = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GameCenterAchievementLocalizationAttributes) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterAchievementLocalizationAttributes) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GameCenterAchievementLocalizationAttributes) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GameCenterAchievementLocalizationAttributes) SetName(v string) {
	o.Name = &v
}

// GetBeforeEarnedDescription returns the BeforeEarnedDescription field value if set, zero value otherwise.
func (o *GameCenterAchievementLocalizationAttributes) GetBeforeEarnedDescription() string {
	if o == nil || IsNil(o.BeforeEarnedDescription) {
		var ret string
		return ret
	}
	return *o.BeforeEarnedDescription
}

// GetBeforeEarnedDescriptionOk returns a tuple with the BeforeEarnedDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterAchievementLocalizationAttributes) GetBeforeEarnedDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.BeforeEarnedDescription) {
		return nil, false
	}
	return o.BeforeEarnedDescription, true
}

// HasBeforeEarnedDescription returns a boolean if a field has been set.
func (o *GameCenterAchievementLocalizationAttributes) HasBeforeEarnedDescription() bool {
	if o != nil && !IsNil(o.BeforeEarnedDescription) {
		return true
	}

	return false
}

// SetBeforeEarnedDescription gets a reference to the given string and assigns it to the BeforeEarnedDescription field.
func (o *GameCenterAchievementLocalizationAttributes) SetBeforeEarnedDescription(v string) {
	o.BeforeEarnedDescription = &v
}

// GetAfterEarnedDescription returns the AfterEarnedDescription field value if set, zero value otherwise.
func (o *GameCenterAchievementLocalizationAttributes) GetAfterEarnedDescription() string {
	if o == nil || IsNil(o.AfterEarnedDescription) {
		var ret string
		return ret
	}
	return *o.AfterEarnedDescription
}

// GetAfterEarnedDescriptionOk returns a tuple with the AfterEarnedDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterAchievementLocalizationAttributes) GetAfterEarnedDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.AfterEarnedDescription) {
		return nil, false
	}
	return o.AfterEarnedDescription, true
}

// HasAfterEarnedDescription returns a boolean if a field has been set.
func (o *GameCenterAchievementLocalizationAttributes) HasAfterEarnedDescription() bool {
	if o != nil && !IsNil(o.AfterEarnedDescription) {
		return true
	}

	return false
}

// SetAfterEarnedDescription gets a reference to the given string and assigns it to the AfterEarnedDescription field.
func (o *GameCenterAchievementLocalizationAttributes) SetAfterEarnedDescription(v string) {
	o.AfterEarnedDescription = &v
}

func (o GameCenterAchievementLocalizationAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GameCenterAchievementLocalizationAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.BeforeEarnedDescription) {
		toSerialize["beforeEarnedDescription"] = o.BeforeEarnedDescription
	}
	if !IsNil(o.AfterEarnedDescription) {
		toSerialize["afterEarnedDescription"] = o.AfterEarnedDescription
	}
	return toSerialize, nil
}

type NullableGameCenterAchievementLocalizationAttributes struct {
	value *GameCenterAchievementLocalizationAttributes
	isSet bool
}

func (v NullableGameCenterAchievementLocalizationAttributes) Get() *GameCenterAchievementLocalizationAttributes {
	return v.value
}

func (v *NullableGameCenterAchievementLocalizationAttributes) Set(val *GameCenterAchievementLocalizationAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableGameCenterAchievementLocalizationAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableGameCenterAchievementLocalizationAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGameCenterAchievementLocalizationAttributes(val *GameCenterAchievementLocalizationAttributes) *NullableGameCenterAchievementLocalizationAttributes {
	return &NullableGameCenterAchievementLocalizationAttributes{value: val, isSet: true}
}

func (v NullableGameCenterAchievementLocalizationAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGameCenterAchievementLocalizationAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect-client

import (
	"encoding/json"
	"fmt"
)

// DiagnosticInsightDirection the model 'DiagnosticInsightDirection'
type DiagnosticInsightDirection string

// List of DiagnosticInsightDirection
const (
	UP DiagnosticInsightDirection = "UP"
	DOWN DiagnosticInsightDirection = "DOWN"
	UNDEFINED DiagnosticInsightDirection = "UNDEFINED"
)

// All allowed values of DiagnosticInsightDirection enum
var AllowedDiagnosticInsightDirectionEnumValues = []DiagnosticInsightDirection{
	"UP",
	"DOWN",
	"UNDEFINED",
}

func (v *DiagnosticInsightDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DiagnosticInsightDirection(value)
	for _, existing := range AllowedDiagnosticInsightDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DiagnosticInsightDirection", value)
}

// NewDiagnosticInsightDirectionFromValue returns a pointer to a valid DiagnosticInsightDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDiagnosticInsightDirectionFromValue(v string) (*DiagnosticInsightDirection, error) {
	ev := DiagnosticInsightDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DiagnosticInsightDirection: valid values are %v", v, AllowedDiagnosticInsightDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DiagnosticInsightDirection) IsValid() bool {
	for _, existing := range AllowedDiagnosticInsightDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DiagnosticInsightDirection value
func (v DiagnosticInsightDirection) Ptr() *DiagnosticInsightDirection {
	return &v
}

type NullableDiagnosticInsightDirection struct {
	value *DiagnosticInsightDirection
	isSet bool
}

func (v NullableDiagnosticInsightDirection) Get() *DiagnosticInsightDirection {
	return v.value
}

func (v *NullableDiagnosticInsightDirection) Set(val *DiagnosticInsightDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableDiagnosticInsightDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableDiagnosticInsightDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiagnosticInsightDirection(val *DiagnosticInsightDirection) *NullableDiagnosticInsightDirection {
	return &NullableDiagnosticInsightDirection{value: val, isSet: true}
}

func (v NullableDiagnosticInsightDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiagnosticInsightDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CiMacOsVersionsAPIService CiMacOsVersionsAPI service
type CiMacOsVersionsAPIService service

type ApiCiMacOsVersionsGetCollectionRequest struct {
	ctx context.Context
	ApiService *CiMacOsVersionsAPIService
	fieldsCiMacOsVersions *[]string
	fieldsCiXcodeVersions *[]string
	limit *int32
	include *[]string
	limitXcodeVersions *int32
}

// the fields to include for returned resources of type ciMacOsVersions
func (r ApiCiMacOsVersionsGetCollectionRequest) FieldsCiMacOsVersions(fieldsCiMacOsVersions []string) ApiCiMacOsVersionsGetCollectionRequest {
	r.fieldsCiMacOsVersions = &fieldsCiMacOsVersions
	return r
}

// the fields to include for returned resources of type ciXcodeVersions
func (r ApiCiMacOsVersionsGetCollectionRequest) FieldsCiXcodeVersions(fieldsCiXcodeVersions []string) ApiCiMacOsVersionsGetCollectionRequest {
	r.fieldsCiXcodeVersions = &fieldsCiXcodeVersions
	return r
}

// maximum resources per page
func (r ApiCiMacOsVersionsGetCollectionRequest) Limit(limit int32) ApiCiMacOsVersionsGetCollectionRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiCiMacOsVersionsGetCollectionRequest) Include(include []string) ApiCiMacOsVersionsGetCollectionRequest {
	r.include = &include
	return r
}

// maximum number of related xcodeVersions returned (when they are included)
func (r ApiCiMacOsVersionsGetCollectionRequest) LimitXcodeVersions(limitXcodeVersions int32) ApiCiMacOsVersionsGetCollectionRequest {
	r.limitXcodeVersions = &limitXcodeVersions
	return r
}

func (r ApiCiMacOsVersionsGetCollectionRequest) Execute() (*CiMacOsVersionsResponse, *http.Response, error) {
	return r.ApiService.CiMacOsVersionsGetCollectionExecute(r)
}

/*
CiMacOsVersionsGetCollection Method for CiMacOsVersionsGetCollection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCiMacOsVersionsGetCollectionRequest
*/
func (a *CiMacOsVersionsAPIService) CiMacOsVersionsGetCollection(ctx context.Context) ApiCiMacOsVersionsGetCollectionRequest {
	return ApiCiMacOsVersionsGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CiMacOsVersionsResponse
func (a *CiMacOsVersionsAPIService) CiMacOsVersionsGetCollectionExecute(r ApiCiMacOsVersionsGetCollectionRequest) (*CiMacOsVersionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CiMacOsVersionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiMacOsVersionsAPIService.CiMacOsVersionsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciMacOsVersions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsCiMacOsVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciMacOsVersions]", r.fieldsCiMacOsVersions, "form", "csv")
	}
	if r.fieldsCiXcodeVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciXcodeVersions]", r.fieldsCiXcodeVersions, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitXcodeVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[xcodeVersions]", r.limitXcodeVersions, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCiMacOsVersionsGetInstanceRequest struct {
	ctx context.Context
	ApiService *CiMacOsVersionsAPIService
	id string
	fieldsCiMacOsVersions *[]string
	fieldsCiXcodeVersions *[]string
	include *[]string
	limitXcodeVersions *int32
}

// the fields to include for returned resources of type ciMacOsVersions
func (r ApiCiMacOsVersionsGetInstanceRequest) FieldsCiMacOsVersions(fieldsCiMacOsVersions []string) ApiCiMacOsVersionsGetInstanceRequest {
	r.fieldsCiMacOsVersions = &fieldsCiMacOsVersions
	return r
}

// the fields to include for returned resources of type ciXcodeVersions
func (r ApiCiMacOsVersionsGetInstanceRequest) FieldsCiXcodeVersions(fieldsCiXcodeVersions []string) ApiCiMacOsVersionsGetInstanceRequest {
	r.fieldsCiXcodeVersions = &fieldsCiXcodeVersions
	return r
}

// comma-separated list of relationships to include
func (r ApiCiMacOsVersionsGetInstanceRequest) Include(include []string) ApiCiMacOsVersionsGetInstanceRequest {
	r.include = &include
	return r
}

// maximum number of related xcodeVersions returned (when they are included)
func (r ApiCiMacOsVersionsGetInstanceRequest) LimitXcodeVersions(limitXcodeVersions int32) ApiCiMacOsVersionsGetInstanceRequest {
	r.limitXcodeVersions = &limitXcodeVersions
	return r
}

func (r ApiCiMacOsVersionsGetInstanceRequest) Execute() (*CiMacOsVersionResponse, *http.Response, error) {
	return r.ApiService.CiMacOsVersionsGetInstanceExecute(r)
}

/*
CiMacOsVersionsGetInstance Method for CiMacOsVersionsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiCiMacOsVersionsGetInstanceRequest
*/
func (a *CiMacOsVersionsAPIService) CiMacOsVersionsGetInstance(ctx context.Context, id string) ApiCiMacOsVersionsGetInstanceRequest {
	return ApiCiMacOsVersionsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CiMacOsVersionResponse
func (a *CiMacOsVersionsAPIService) CiMacOsVersionsGetInstanceExecute(r ApiCiMacOsVersionsGetInstanceRequest) (*CiMacOsVersionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CiMacOsVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiMacOsVersionsAPIService.CiMacOsVersionsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciMacOsVersions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsCiMacOsVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciMacOsVersions]", r.fieldsCiMacOsVersions, "form", "csv")
	}
	if r.fieldsCiXcodeVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciXcodeVersions]", r.fieldsCiXcodeVersions, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitXcodeVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[xcodeVersions]", r.limitXcodeVersions, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *CiMacOsVersionsAPIService
	id string
	fieldsCiXcodeVersions *[]string
	fieldsCiMacOsVersions *[]string
	limit *int32
	include *[]string
	limitMacOsVersions *int32
}

// the fields to include for returned resources of type ciXcodeVersions
func (r ApiCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest) FieldsCiXcodeVersions(fieldsCiXcodeVersions []string) ApiCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest {
	r.fieldsCiXcodeVersions = &fieldsCiXcodeVersions
	return r
}

// the fields to include for returned resources of type ciMacOsVersions
func (r ApiCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest) FieldsCiMacOsVersions(fieldsCiMacOsVersions []string) ApiCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest {
	r.fieldsCiMacOsVersions = &fieldsCiMacOsVersions
	return r
}

// maximum resources per page
func (r ApiCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest) Limit(limit int32) ApiCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest) Include(include []string) ApiCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related macOsVersions returned (when they are included)
func (r ApiCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest) LimitMacOsVersions(limitMacOsVersions int32) ApiCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest {
	r.limitMacOsVersions = &limitMacOsVersions
	return r
}

func (r ApiCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest) Execute() (*CiXcodeVersionsResponse, *http.Response, error) {
	return r.ApiService.CiMacOsVersionsXcodeVersionsGetToManyRelatedExecute(r)
}

/*
CiMacOsVersionsXcodeVersionsGetToManyRelated Method for CiMacOsVersionsXcodeVersionsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest
*/
func (a *CiMacOsVersionsAPIService) CiMacOsVersionsXcodeVersionsGetToManyRelated(ctx context.Context, id string) ApiCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest {
	return ApiCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CiXcodeVersionsResponse
func (a *CiMacOsVersionsAPIService) CiMacOsVersionsXcodeVersionsGetToManyRelatedExecute(r ApiCiMacOsVersionsXcodeVersionsGetToManyRelatedRequest) (*CiXcodeVersionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CiXcodeVersionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiMacOsVersionsAPIService.CiMacOsVersionsXcodeVersionsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciMacOsVersions/{id}/xcodeVersions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsCiXcodeVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciXcodeVersions]", r.fieldsCiXcodeVersions, "form", "csv")
	}
	if r.fieldsCiMacOsVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciMacOsVersions]", r.fieldsCiMacOsVersions, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitMacOsVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[macOsVersions]", r.limitMacOsVersions, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

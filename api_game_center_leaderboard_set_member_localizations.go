/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect-client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// GameCenterLeaderboardSetMemberLocalizationsAPIService GameCenterLeaderboardSetMemberLocalizationsAPI service
type GameCenterLeaderboardSetMemberLocalizationsAPIService service

type ApiGameCenterLeaderboardSetMemberLocalizationsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetMemberLocalizationsAPIService
	gameCenterLeaderboardSetMemberLocalizationCreateRequest *GameCenterLeaderboardSetMemberLocalizationCreateRequest
}

// GameCenterLeaderboardSetMemberLocalization representation
func (r ApiGameCenterLeaderboardSetMemberLocalizationsCreateInstanceRequest) GameCenterLeaderboardSetMemberLocalizationCreateRequest(gameCenterLeaderboardSetMemberLocalizationCreateRequest GameCenterLeaderboardSetMemberLocalizationCreateRequest) ApiGameCenterLeaderboardSetMemberLocalizationsCreateInstanceRequest {
	r.gameCenterLeaderboardSetMemberLocalizationCreateRequest = &gameCenterLeaderboardSetMemberLocalizationCreateRequest
	return r
}

func (r ApiGameCenterLeaderboardSetMemberLocalizationsCreateInstanceRequest) Execute() (*GameCenterLeaderboardSetMemberLocalizationResponse, *http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetMemberLocalizationsCreateInstanceExecute(r)
}

/*
GameCenterLeaderboardSetMemberLocalizationsCreateInstance Method for GameCenterLeaderboardSetMemberLocalizationsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGameCenterLeaderboardSetMemberLocalizationsCreateInstanceRequest
*/
func (a *GameCenterLeaderboardSetMemberLocalizationsAPIService) GameCenterLeaderboardSetMemberLocalizationsCreateInstance(ctx context.Context) ApiGameCenterLeaderboardSetMemberLocalizationsCreateInstanceRequest {
	return ApiGameCenterLeaderboardSetMemberLocalizationsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GameCenterLeaderboardSetMemberLocalizationResponse
func (a *GameCenterLeaderboardSetMemberLocalizationsAPIService) GameCenterLeaderboardSetMemberLocalizationsCreateInstanceExecute(r ApiGameCenterLeaderboardSetMemberLocalizationsCreateInstanceRequest) (*GameCenterLeaderboardSetMemberLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterLeaderboardSetMemberLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetMemberLocalizationsAPIService.GameCenterLeaderboardSetMemberLocalizationsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSetMemberLocalizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterLeaderboardSetMemberLocalizationCreateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterLeaderboardSetMemberLocalizationCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterLeaderboardSetMemberLocalizationCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetMemberLocalizationsDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetMemberLocalizationsAPIService
	id string
}

func (r ApiGameCenterLeaderboardSetMemberLocalizationsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceExecute(r)
}

/*
GameCenterLeaderboardSetMemberLocalizationsDeleteInstance Method for GameCenterLeaderboardSetMemberLocalizationsDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterLeaderboardSetMemberLocalizationsDeleteInstanceRequest
*/
func (a *GameCenterLeaderboardSetMemberLocalizationsAPIService) GameCenterLeaderboardSetMemberLocalizationsDeleteInstance(ctx context.Context, id string) ApiGameCenterLeaderboardSetMemberLocalizationsDeleteInstanceRequest {
	return ApiGameCenterLeaderboardSetMemberLocalizationsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GameCenterLeaderboardSetMemberLocalizationsAPIService) GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceExecute(r ApiGameCenterLeaderboardSetMemberLocalizationsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetMemberLocalizationsAPIService.GameCenterLeaderboardSetMemberLocalizationsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSetMemberLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetMemberLocalizationsAPIService
	id string
	fieldsGameCenterLeaderboards *[]string
	fieldsGameCenterDetails *[]string
	fieldsGameCenterGroups *[]string
	fieldsGameCenterLeaderboardSets *[]string
	fieldsGameCenterLeaderboardLocalizations *[]string
	fieldsGameCenterLeaderboardReleases *[]string
	include *[]string
	limitGameCenterLeaderboardSets *int32
	limitLocalizations *int32
	limitReleases *int32
}

// the fields to include for returned resources of type gameCenterLeaderboards
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest) FieldsGameCenterLeaderboards(fieldsGameCenterLeaderboards []string) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest {
	r.fieldsGameCenterLeaderboards = &fieldsGameCenterLeaderboards
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterGroups
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest) FieldsGameCenterGroups(fieldsGameCenterGroups []string) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest {
	r.fieldsGameCenterGroups = &fieldsGameCenterGroups
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSets
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest) FieldsGameCenterLeaderboardSets(fieldsGameCenterLeaderboardSets []string) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest {
	r.fieldsGameCenterLeaderboardSets = &fieldsGameCenterLeaderboardSets
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardLocalizations
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest) FieldsGameCenterLeaderboardLocalizations(fieldsGameCenterLeaderboardLocalizations []string) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest {
	r.fieldsGameCenterLeaderboardLocalizations = &fieldsGameCenterLeaderboardLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardReleases
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest) FieldsGameCenterLeaderboardReleases(fieldsGameCenterLeaderboardReleases []string) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest {
	r.fieldsGameCenterLeaderboardReleases = &fieldsGameCenterLeaderboardReleases
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest) Include(include []string) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related gameCenterLeaderboardSets returned (when they are included)
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest) LimitGameCenterLeaderboardSets(limitGameCenterLeaderboardSets int32) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest {
	r.limitGameCenterLeaderboardSets = &limitGameCenterLeaderboardSets
	return r
}

// maximum number of related localizations returned (when they are included)
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest) LimitLocalizations(limitLocalizations int32) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest {
	r.limitLocalizations = &limitLocalizations
	return r
}

// maximum number of related releases returned (when they are included)
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest) LimitReleases(limitReleases int32) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest {
	r.limitReleases = &limitReleases
	return r
}

func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest) Execute() (*GameCenterLeaderboardResponse, *http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedExecute(r)
}

/*
GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelated Method for GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest
*/
func (a *GameCenterLeaderboardSetMemberLocalizationsAPIService) GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelated(ctx context.Context, id string) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest {
	return ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterLeaderboardResponse
func (a *GameCenterLeaderboardSetMemberLocalizationsAPIService) GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedExecute(r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedRequest) (*GameCenterLeaderboardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterLeaderboardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetMemberLocalizationsAPIService.GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/gameCenterLeaderboard"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboards]", r.fieldsGameCenterLeaderboards, "form", "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "form", "csv")
	}
	if r.fieldsGameCenterGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterGroups]", r.fieldsGameCenterGroups, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSets]", r.fieldsGameCenterLeaderboardSets, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardLocalizations]", r.fieldsGameCenterLeaderboardLocalizations, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardReleases]", r.fieldsGameCenterLeaderboardReleases, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboardSets]", r.limitGameCenterLeaderboardSets, "form", "")
	}
	if r.limitLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[localizations]", r.limitLocalizations, "form", "")
	}
	if r.limitReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[releases]", r.limitReleases, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetMemberLocalizationsAPIService
	id string
	fieldsGameCenterLeaderboardSets *[]string
	fieldsGameCenterDetails *[]string
	fieldsGameCenterGroups *[]string
	fieldsGameCenterLeaderboardSetLocalizations *[]string
	fieldsGameCenterLeaderboards *[]string
	fieldsGameCenterLeaderboardSetReleases *[]string
	include *[]string
	limitLocalizations *int32
	limitGameCenterLeaderboards *int32
	limitReleases *int32
}

// the fields to include for returned resources of type gameCenterLeaderboardSets
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest) FieldsGameCenterLeaderboardSets(fieldsGameCenterLeaderboardSets []string) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest {
	r.fieldsGameCenterLeaderboardSets = &fieldsGameCenterLeaderboardSets
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterGroups
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest) FieldsGameCenterGroups(fieldsGameCenterGroups []string) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest {
	r.fieldsGameCenterGroups = &fieldsGameCenterGroups
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest) FieldsGameCenterLeaderboardSetLocalizations(fieldsGameCenterLeaderboardSetLocalizations []string) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest {
	r.fieldsGameCenterLeaderboardSetLocalizations = &fieldsGameCenterLeaderboardSetLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboards
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest) FieldsGameCenterLeaderboards(fieldsGameCenterLeaderboards []string) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest {
	r.fieldsGameCenterLeaderboards = &fieldsGameCenterLeaderboards
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSetReleases
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest) FieldsGameCenterLeaderboardSetReleases(fieldsGameCenterLeaderboardSetReleases []string) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest {
	r.fieldsGameCenterLeaderboardSetReleases = &fieldsGameCenterLeaderboardSetReleases
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest) Include(include []string) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related localizations returned (when they are included)
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest) LimitLocalizations(limitLocalizations int32) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest {
	r.limitLocalizations = &limitLocalizations
	return r
}

// maximum number of related gameCenterLeaderboards returned (when they are included)
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest) LimitGameCenterLeaderboards(limitGameCenterLeaderboards int32) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest {
	r.limitGameCenterLeaderboards = &limitGameCenterLeaderboards
	return r
}

// maximum number of related releases returned (when they are included)
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest) LimitReleases(limitReleases int32) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest {
	r.limitReleases = &limitReleases
	return r
}

func (r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest) Execute() (*GameCenterLeaderboardSetResponse, *http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedExecute(r)
}

/*
GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelated Method for GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest
*/
func (a *GameCenterLeaderboardSetMemberLocalizationsAPIService) GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelated(ctx context.Context, id string) ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest {
	return ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterLeaderboardSetResponse
func (a *GameCenterLeaderboardSetMemberLocalizationsAPIService) GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedExecute(r ApiGameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedRequest) (*GameCenterLeaderboardSetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterLeaderboardSetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetMemberLocalizationsAPIService.GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/gameCenterLeaderboardSet"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSets]", r.fieldsGameCenterLeaderboardSets, "form", "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "form", "csv")
	}
	if r.fieldsGameCenterGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterGroups]", r.fieldsGameCenterGroups, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSetLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetLocalizations]", r.fieldsGameCenterLeaderboardSetLocalizations, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboards]", r.fieldsGameCenterLeaderboards, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSetReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetReleases]", r.fieldsGameCenterLeaderboardSetReleases, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[localizations]", r.limitLocalizations, "form", "")
	}
	if r.limitGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboards]", r.limitGameCenterLeaderboards, "form", "")
	}
	if r.limitReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[releases]", r.limitReleases, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetMemberLocalizationsAPIService
	filterGameCenterLeaderboardSet *[]string
	filterGameCenterLeaderboard *[]string
	fieldsGameCenterLeaderboardSetMemberLocalizations *[]string
	fieldsGameCenterLeaderboardSets *[]string
	fieldsGameCenterLeaderboards *[]string
	limit *int32
	include *[]string
}

// filter by id(s) of related &#39;gameCenterLeaderboardSet&#39;
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest) FilterGameCenterLeaderboardSet(filterGameCenterLeaderboardSet []string) ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest {
	r.filterGameCenterLeaderboardSet = &filterGameCenterLeaderboardSet
	return r
}

// filter by id(s) of related &#39;gameCenterLeaderboard&#39;
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest) FilterGameCenterLeaderboard(filterGameCenterLeaderboard []string) ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest {
	r.filterGameCenterLeaderboard = &filterGameCenterLeaderboard
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSetMemberLocalizations
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest) FieldsGameCenterLeaderboardSetMemberLocalizations(fieldsGameCenterLeaderboardSetMemberLocalizations []string) ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest {
	r.fieldsGameCenterLeaderboardSetMemberLocalizations = &fieldsGameCenterLeaderboardSetMemberLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSets
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest) FieldsGameCenterLeaderboardSets(fieldsGameCenterLeaderboardSets []string) ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest {
	r.fieldsGameCenterLeaderboardSets = &fieldsGameCenterLeaderboardSets
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboards
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest) FieldsGameCenterLeaderboards(fieldsGameCenterLeaderboards []string) ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest {
	r.fieldsGameCenterLeaderboards = &fieldsGameCenterLeaderboards
	return r
}

// maximum resources per page
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest) Limit(limit int32) ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest) Include(include []string) ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest) Execute() (*GameCenterLeaderboardSetMemberLocalizationsResponse, *http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetMemberLocalizationsGetCollectionExecute(r)
}

/*
GameCenterLeaderboardSetMemberLocalizationsGetCollection Method for GameCenterLeaderboardSetMemberLocalizationsGetCollection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest
*/
func (a *GameCenterLeaderboardSetMemberLocalizationsAPIService) GameCenterLeaderboardSetMemberLocalizationsGetCollection(ctx context.Context) ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest {
	return ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GameCenterLeaderboardSetMemberLocalizationsResponse
func (a *GameCenterLeaderboardSetMemberLocalizationsAPIService) GameCenterLeaderboardSetMemberLocalizationsGetCollectionExecute(r ApiGameCenterLeaderboardSetMemberLocalizationsGetCollectionRequest) (*GameCenterLeaderboardSetMemberLocalizationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterLeaderboardSetMemberLocalizationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetMemberLocalizationsAPIService.GameCenterLeaderboardSetMemberLocalizationsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSetMemberLocalizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filterGameCenterLeaderboardSet == nil {
		return localVarReturnValue, nil, reportError("filterGameCenterLeaderboardSet is required and must be specified")
	}
	if r.filterGameCenterLeaderboard == nil {
		return localVarReturnValue, nil, reportError("filterGameCenterLeaderboard is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterLeaderboardSet]", r.filterGameCenterLeaderboardSet, "form", "csv")
	parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterLeaderboard]", r.filterGameCenterLeaderboard, "form", "csv")
	if r.fieldsGameCenterLeaderboardSetMemberLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetMemberLocalizations]", r.fieldsGameCenterLeaderboardSetMemberLocalizations, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSets]", r.fieldsGameCenterLeaderboardSets, "form", "csv")
	}
	if r.fieldsGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboards]", r.fieldsGameCenterLeaderboards, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetMemberLocalizationsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterLeaderboardSetMemberLocalizationsAPIService
	id string
	gameCenterLeaderboardSetMemberLocalizationUpdateRequest *GameCenterLeaderboardSetMemberLocalizationUpdateRequest
}

// GameCenterLeaderboardSetMemberLocalization representation
func (r ApiGameCenterLeaderboardSetMemberLocalizationsUpdateInstanceRequest) GameCenterLeaderboardSetMemberLocalizationUpdateRequest(gameCenterLeaderboardSetMemberLocalizationUpdateRequest GameCenterLeaderboardSetMemberLocalizationUpdateRequest) ApiGameCenterLeaderboardSetMemberLocalizationsUpdateInstanceRequest {
	r.gameCenterLeaderboardSetMemberLocalizationUpdateRequest = &gameCenterLeaderboardSetMemberLocalizationUpdateRequest
	return r
}

func (r ApiGameCenterLeaderboardSetMemberLocalizationsUpdateInstanceRequest) Execute() (*GameCenterLeaderboardSetMemberLocalizationResponse, *http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceExecute(r)
}

/*
GameCenterLeaderboardSetMemberLocalizationsUpdateInstance Method for GameCenterLeaderboardSetMemberLocalizationsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterLeaderboardSetMemberLocalizationsUpdateInstanceRequest
*/
func (a *GameCenterLeaderboardSetMemberLocalizationsAPIService) GameCenterLeaderboardSetMemberLocalizationsUpdateInstance(ctx context.Context, id string) ApiGameCenterLeaderboardSetMemberLocalizationsUpdateInstanceRequest {
	return ApiGameCenterLeaderboardSetMemberLocalizationsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterLeaderboardSetMemberLocalizationResponse
func (a *GameCenterLeaderboardSetMemberLocalizationsAPIService) GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceExecute(r ApiGameCenterLeaderboardSetMemberLocalizationsUpdateInstanceRequest) (*GameCenterLeaderboardSetMemberLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterLeaderboardSetMemberLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetMemberLocalizationsAPIService.GameCenterLeaderboardSetMemberLocalizationsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSetMemberLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterLeaderboardSetMemberLocalizationUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterLeaderboardSetMemberLocalizationUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterLeaderboardSetMemberLocalizationUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"encoding/json"
)

// checks if the DiagnosticInsight type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiagnosticInsight{}

// DiagnosticInsight struct for DiagnosticInsight
type DiagnosticInsight struct {
	InsightType *DiagnosticInsightType `json:"insightType,omitempty"`
	Direction *DiagnosticInsightDirection `json:"direction,omitempty"`
	ReferenceVersions []DiagnosticInsightReferenceVersionsInner `json:"referenceVersions,omitempty"`
}

// NewDiagnosticInsight instantiates a new DiagnosticInsight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiagnosticInsight() *DiagnosticInsight {
	this := DiagnosticInsight{}
	return &this
}

// NewDiagnosticInsightWithDefaults instantiates a new DiagnosticInsight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiagnosticInsightWithDefaults() *DiagnosticInsight {
	this := DiagnosticInsight{}
	return &this
}

// GetInsightType returns the InsightType field value if set, zero value otherwise.
func (o *DiagnosticInsight) GetInsightType() DiagnosticInsightType {
	if o == nil || IsNil(o.InsightType) {
		var ret DiagnosticInsightType
		return ret
	}
	return *o.InsightType
}

// GetInsightTypeOk returns a tuple with the InsightType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticInsight) GetInsightTypeOk() (*DiagnosticInsightType, bool) {
	if o == nil || IsNil(o.InsightType) {
		return nil, false
	}
	return o.InsightType, true
}

// HasInsightType returns a boolean if a field has been set.
func (o *DiagnosticInsight) HasInsightType() bool {
	if o != nil && !IsNil(o.InsightType) {
		return true
	}

	return false
}

// SetInsightType gets a reference to the given DiagnosticInsightType and assigns it to the InsightType field.
func (o *DiagnosticInsight) SetInsightType(v DiagnosticInsightType) {
	o.InsightType = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *DiagnosticInsight) GetDirection() DiagnosticInsightDirection {
	if o == nil || IsNil(o.Direction) {
		var ret DiagnosticInsightDirection
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticInsight) GetDirectionOk() (*DiagnosticInsightDirection, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *DiagnosticInsight) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given DiagnosticInsightDirection and assigns it to the Direction field.
func (o *DiagnosticInsight) SetDirection(v DiagnosticInsightDirection) {
	o.Direction = &v
}

// GetReferenceVersions returns the ReferenceVersions field value if set, zero value otherwise.
func (o *DiagnosticInsight) GetReferenceVersions() []DiagnosticInsightReferenceVersionsInner {
	if o == nil || IsNil(o.ReferenceVersions) {
		var ret []DiagnosticInsightReferenceVersionsInner
		return ret
	}
	return o.ReferenceVersions
}

// GetReferenceVersionsOk returns a tuple with the ReferenceVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticInsight) GetReferenceVersionsOk() ([]DiagnosticInsightReferenceVersionsInner, bool) {
	if o == nil || IsNil(o.ReferenceVersions) {
		return nil, false
	}
	return o.ReferenceVersions, true
}

// HasReferenceVersions returns a boolean if a field has been set.
func (o *DiagnosticInsight) HasReferenceVersions() bool {
	if o != nil && !IsNil(o.ReferenceVersions) {
		return true
	}

	return false
}

// SetReferenceVersions gets a reference to the given []DiagnosticInsightReferenceVersionsInner and assigns it to the ReferenceVersions field.
func (o *DiagnosticInsight) SetReferenceVersions(v []DiagnosticInsightReferenceVersionsInner) {
	o.ReferenceVersions = v
}

func (o DiagnosticInsight) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiagnosticInsight) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InsightType) {
		toSerialize["insightType"] = o.InsightType
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.ReferenceVersions) {
		toSerialize["referenceVersions"] = o.ReferenceVersions
	}
	return toSerialize, nil
}

type NullableDiagnosticInsight struct {
	value *DiagnosticInsight
	isSet bool
}

func (v NullableDiagnosticInsight) Get() *DiagnosticInsight {
	return v.value
}

func (v *NullableDiagnosticInsight) Set(val *DiagnosticInsight) {
	v.value = val
	v.isSet = true
}

func (v NullableDiagnosticInsight) IsSet() bool {
	return v.isSet
}

func (v *NullableDiagnosticInsight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiagnosticInsight(val *DiagnosticInsight) *NullableDiagnosticInsight {
	return &NullableDiagnosticInsight{value: val, isSet: true}
}

func (v NullableDiagnosticInsight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiagnosticInsight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



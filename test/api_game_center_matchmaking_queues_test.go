/*
App Store Connect API

Testing GameCenterMatchmakingQueuesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package appstoreconnectclient_test

import (
	"context"
	openapiclient "github.com/spyrosmouchlianitis/appstoreconnect-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_appstoreconnectclient_GameCenterMatchmakingQueuesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GameCenterMatchmakingQueuesAPIService GameCenterMatchmakingQueuesCreateInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.GameCenterMatchmakingQueuesAPI.GameCenterMatchmakingQueuesCreateInstance(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GameCenterMatchmakingQueuesAPIService GameCenterMatchmakingQueuesDeleteInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		httpRes, err := apiClient.GameCenterMatchmakingQueuesAPI.GameCenterMatchmakingQueuesDeleteInstance(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GameCenterMatchmakingQueuesAPIService GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.GameCenterMatchmakingQueuesAPI.GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GameCenterMatchmakingQueuesAPIService GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.GameCenterMatchmakingQueuesAPI.GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GameCenterMatchmakingQueuesAPIService GameCenterMatchmakingQueuesGetCollection", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.GameCenterMatchmakingQueuesAPI.GameCenterMatchmakingQueuesGetCollection(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GameCenterMatchmakingQueuesAPIService GameCenterMatchmakingQueuesGetInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.GameCenterMatchmakingQueuesAPI.GameCenterMatchmakingQueuesGetInstance(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GameCenterMatchmakingQueuesAPIService GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.GameCenterMatchmakingQueuesAPI.GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GameCenterMatchmakingQueuesAPIService GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.GameCenterMatchmakingQueuesAPI.GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GameCenterMatchmakingQueuesAPIService GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.GameCenterMatchmakingQueuesAPI.GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GameCenterMatchmakingQueuesAPIService GameCenterMatchmakingQueuesUpdateInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.GameCenterMatchmakingQueuesAPI.GameCenterMatchmakingQueuesUpdateInstance(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"encoding/json"
)

// checks if the AnalyticsReportRequestRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyticsReportRequestRelationships{}

// AnalyticsReportRequestRelationships struct for AnalyticsReportRequestRelationships
type AnalyticsReportRequestRelationships struct {
	Reports *AnalyticsReportRequestRelationshipsReports `json:"reports,omitempty"`
}

// NewAnalyticsReportRequestRelationships instantiates a new AnalyticsReportRequestRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyticsReportRequestRelationships() *AnalyticsReportRequestRelationships {
	this := AnalyticsReportRequestRelationships{}
	return &this
}

// NewAnalyticsReportRequestRelationshipsWithDefaults instantiates a new AnalyticsReportRequestRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyticsReportRequestRelationshipsWithDefaults() *AnalyticsReportRequestRelationships {
	this := AnalyticsReportRequestRelationships{}
	return &this
}

// GetReports returns the Reports field value if set, zero value otherwise.
func (o *AnalyticsReportRequestRelationships) GetReports() AnalyticsReportRequestRelationshipsReports {
	if o == nil || IsNil(o.Reports) {
		var ret AnalyticsReportRequestRelationshipsReports
		return ret
	}
	return *o.Reports
}

// GetReportsOk returns a tuple with the Reports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyticsReportRequestRelationships) GetReportsOk() (*AnalyticsReportRequestRelationshipsReports, bool) {
	if o == nil || IsNil(o.Reports) {
		return nil, false
	}
	return o.Reports, true
}

// HasReports returns a boolean if a field has been set.
func (o *AnalyticsReportRequestRelationships) HasReports() bool {
	if o != nil && !IsNil(o.Reports) {
		return true
	}

	return false
}

// SetReports gets a reference to the given AnalyticsReportRequestRelationshipsReports and assigns it to the Reports field.
func (o *AnalyticsReportRequestRelationships) SetReports(v AnalyticsReportRequestRelationshipsReports) {
	o.Reports = &v
}

func (o AnalyticsReportRequestRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyticsReportRequestRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reports) {
		toSerialize["reports"] = o.Reports
	}
	return toSerialize, nil
}

type NullableAnalyticsReportRequestRelationships struct {
	value *AnalyticsReportRequestRelationships
	isSet bool
}

func (v NullableAnalyticsReportRequestRelationships) Get() *AnalyticsReportRequestRelationships {
	return v.value
}

func (v *NullableAnalyticsReportRequestRelationships) Set(val *AnalyticsReportRequestRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsReportRequestRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsReportRequestRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsReportRequestRelationships(val *AnalyticsReportRequestRelationships) *NullableAnalyticsReportRequestRelationships {
	return &NullableAnalyticsReportRequestRelationships{value: val, isSet: true}
}

func (v NullableAnalyticsReportRequestRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsReportRequestRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



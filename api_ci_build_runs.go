/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CiBuildRunsAPIService CiBuildRunsAPI service
type CiBuildRunsAPIService service

type ApiCiBuildRunsActionsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *CiBuildRunsAPIService
	id string
	fieldsCiBuildActions *[]string
	fieldsCiBuildRuns *[]string
	limit *int32
	include *[]string
}

// the fields to include for returned resources of type ciBuildActions
func (r ApiCiBuildRunsActionsGetToManyRelatedRequest) FieldsCiBuildActions(fieldsCiBuildActions []string) ApiCiBuildRunsActionsGetToManyRelatedRequest {
	r.fieldsCiBuildActions = &fieldsCiBuildActions
	return r
}

// the fields to include for returned resources of type ciBuildRuns
func (r ApiCiBuildRunsActionsGetToManyRelatedRequest) FieldsCiBuildRuns(fieldsCiBuildRuns []string) ApiCiBuildRunsActionsGetToManyRelatedRequest {
	r.fieldsCiBuildRuns = &fieldsCiBuildRuns
	return r
}

// maximum resources per page
func (r ApiCiBuildRunsActionsGetToManyRelatedRequest) Limit(limit int32) ApiCiBuildRunsActionsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiCiBuildRunsActionsGetToManyRelatedRequest) Include(include []string) ApiCiBuildRunsActionsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiCiBuildRunsActionsGetToManyRelatedRequest) Execute() (*CiBuildActionsResponse, *http.Response, error) {
	return r.ApiService.CiBuildRunsActionsGetToManyRelatedExecute(r)
}

/*
CiBuildRunsActionsGetToManyRelated Method for CiBuildRunsActionsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiCiBuildRunsActionsGetToManyRelatedRequest
*/
func (a *CiBuildRunsAPIService) CiBuildRunsActionsGetToManyRelated(ctx context.Context, id string) ApiCiBuildRunsActionsGetToManyRelatedRequest {
	return ApiCiBuildRunsActionsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CiBuildActionsResponse
func (a *CiBuildRunsAPIService) CiBuildRunsActionsGetToManyRelatedExecute(r ApiCiBuildRunsActionsGetToManyRelatedRequest) (*CiBuildActionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CiBuildActionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiBuildRunsAPIService.CiBuildRunsActionsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciBuildRuns/{id}/actions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsCiBuildActions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciBuildActions]", r.fieldsCiBuildActions, "form", "csv")
	}
	if r.fieldsCiBuildRuns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciBuildRuns]", r.fieldsCiBuildRuns, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCiBuildRunsBuildsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *CiBuildRunsAPIService
	id string
	filterVersion *[]string
	filterExpired *[]string
	filterProcessingState *[]string
	filterBetaAppReviewSubmissionBetaReviewState *[]string
	filterUsesNonExemptEncryption *[]string
	filterPreReleaseVersionVersion *[]string
	filterPreReleaseVersionPlatform *[]string
	filterBuildAudienceType *[]string
	filterPreReleaseVersion *[]string
	filterApp *[]string
	filterBetaGroups *[]string
	filterAppStoreVersion *[]string
	filterId *[]string
	sort *[]string
	fieldsBuilds *[]string
	fieldsPreReleaseVersions *[]string
	fieldsBetaTesters *[]string
	fieldsBetaGroups *[]string
	fieldsBetaBuildLocalizations *[]string
	fieldsAppEncryptionDeclarations *[]string
	fieldsBetaAppReviewSubmissions *[]string
	fieldsApps *[]string
	fieldsBuildBetaDetails *[]string
	fieldsAppStoreVersions *[]string
	fieldsBuildIcons *[]string
	fieldsBuildBundles *[]string
	limit *int32
	include *[]string
	limitIndividualTesters *int32
	limitBetaGroups *int32
	limitBetaBuildLocalizations *int32
	limitIcons *int32
	limitBuildBundles *int32
}

// filter by attribute &#39;version&#39;
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FilterVersion(filterVersion []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.filterVersion = &filterVersion
	return r
}

// filter by attribute &#39;expired&#39;
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FilterExpired(filterExpired []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.filterExpired = &filterExpired
	return r
}

// filter by attribute &#39;processingState&#39;
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FilterProcessingState(filterProcessingState []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.filterProcessingState = &filterProcessingState
	return r
}

// filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39;
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FilterBetaAppReviewSubmissionBetaReviewState(filterBetaAppReviewSubmissionBetaReviewState []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.filterBetaAppReviewSubmissionBetaReviewState = &filterBetaAppReviewSubmissionBetaReviewState
	return r
}

// filter by attribute &#39;usesNonExemptEncryption&#39;
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FilterUsesNonExemptEncryption(filterUsesNonExemptEncryption []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.filterUsesNonExemptEncryption = &filterUsesNonExemptEncryption
	return r
}

// filter by attribute &#39;preReleaseVersion.version&#39;
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FilterPreReleaseVersionVersion(filterPreReleaseVersionVersion []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.filterPreReleaseVersionVersion = &filterPreReleaseVersionVersion
	return r
}

// filter by attribute &#39;preReleaseVersion.platform&#39;
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FilterPreReleaseVersionPlatform(filterPreReleaseVersionPlatform []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.filterPreReleaseVersionPlatform = &filterPreReleaseVersionPlatform
	return r
}

// filter by attribute &#39;buildAudienceType&#39;
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FilterBuildAudienceType(filterBuildAudienceType []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.filterBuildAudienceType = &filterBuildAudienceType
	return r
}

// filter by id(s) of related &#39;preReleaseVersion&#39;
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FilterPreReleaseVersion(filterPreReleaseVersion []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.filterPreReleaseVersion = &filterPreReleaseVersion
	return r
}

// filter by id(s) of related &#39;app&#39;
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FilterApp(filterApp []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.filterApp = &filterApp
	return r
}

// filter by id(s) of related &#39;betaGroups&#39;
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FilterBetaGroups(filterBetaGroups []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.filterBetaGroups = &filterBetaGroups
	return r
}

// filter by id(s) of related &#39;appStoreVersion&#39;
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FilterAppStoreVersion(filterAppStoreVersion []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.filterAppStoreVersion = &filterAppStoreVersion
	return r
}

// filter by id(s)
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FilterId(filterId []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.filterId = &filterId
	return r
}

// comma-separated list of sort expressions; resources will be sorted as specified
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) Sort(sort []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.sort = &sort
	return r
}

// the fields to include for returned resources of type builds
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FieldsBuilds(fieldsBuilds []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// the fields to include for returned resources of type preReleaseVersions
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FieldsPreReleaseVersions(fieldsPreReleaseVersions []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.fieldsPreReleaseVersions = &fieldsPreReleaseVersions
	return r
}

// the fields to include for returned resources of type betaTesters
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FieldsBetaTesters(fieldsBetaTesters []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.fieldsBetaTesters = &fieldsBetaTesters
	return r
}

// the fields to include for returned resources of type betaGroups
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FieldsBetaGroups(fieldsBetaGroups []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.fieldsBetaGroups = &fieldsBetaGroups
	return r
}

// the fields to include for returned resources of type betaBuildLocalizations
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FieldsBetaBuildLocalizations(fieldsBetaBuildLocalizations []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.fieldsBetaBuildLocalizations = &fieldsBetaBuildLocalizations
	return r
}

// the fields to include for returned resources of type appEncryptionDeclarations
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FieldsAppEncryptionDeclarations(fieldsAppEncryptionDeclarations []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.fieldsAppEncryptionDeclarations = &fieldsAppEncryptionDeclarations
	return r
}

// the fields to include for returned resources of type betaAppReviewSubmissions
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FieldsBetaAppReviewSubmissions(fieldsBetaAppReviewSubmissions []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.fieldsBetaAppReviewSubmissions = &fieldsBetaAppReviewSubmissions
	return r
}

// the fields to include for returned resources of type apps
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FieldsApps(fieldsApps []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// the fields to include for returned resources of type buildBetaDetails
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FieldsBuildBetaDetails(fieldsBuildBetaDetails []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.fieldsBuildBetaDetails = &fieldsBuildBetaDetails
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type buildIcons
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FieldsBuildIcons(fieldsBuildIcons []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.fieldsBuildIcons = &fieldsBuildIcons
	return r
}

// the fields to include for returned resources of type buildBundles
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) FieldsBuildBundles(fieldsBuildBundles []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.fieldsBuildBundles = &fieldsBuildBundles
	return r
}

// maximum resources per page
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) Limit(limit int32) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) Include(include []string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related individualTesters returned (when they are included)
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) LimitIndividualTesters(limitIndividualTesters int32) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.limitIndividualTesters = &limitIndividualTesters
	return r
}

// maximum number of related betaGroups returned (when they are included)
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) LimitBetaGroups(limitBetaGroups int32) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.limitBetaGroups = &limitBetaGroups
	return r
}

// maximum number of related betaBuildLocalizations returned (when they are included)
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) LimitBetaBuildLocalizations(limitBetaBuildLocalizations int32) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.limitBetaBuildLocalizations = &limitBetaBuildLocalizations
	return r
}

// maximum number of related icons returned (when they are included)
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) LimitIcons(limitIcons int32) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.limitIcons = &limitIcons
	return r
}

// maximum number of related buildBundles returned (when they are included)
func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) LimitBuildBundles(limitBuildBundles int32) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	r.limitBuildBundles = &limitBuildBundles
	return r
}

func (r ApiCiBuildRunsBuildsGetToManyRelatedRequest) Execute() (*BuildsResponse, *http.Response, error) {
	return r.ApiService.CiBuildRunsBuildsGetToManyRelatedExecute(r)
}

/*
CiBuildRunsBuildsGetToManyRelated Method for CiBuildRunsBuildsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiCiBuildRunsBuildsGetToManyRelatedRequest
*/
func (a *CiBuildRunsAPIService) CiBuildRunsBuildsGetToManyRelated(ctx context.Context, id string) ApiCiBuildRunsBuildsGetToManyRelatedRequest {
	return ApiCiBuildRunsBuildsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BuildsResponse
func (a *CiBuildRunsAPIService) CiBuildRunsBuildsGetToManyRelatedExecute(r ApiCiBuildRunsBuildsGetToManyRelatedRequest) (*BuildsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BuildsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiBuildRunsAPIService.CiBuildRunsBuildsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciBuildRuns/{id}/builds"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[version]", r.filterVersion, "form", "csv")
	}
	if r.filterExpired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[expired]", r.filterExpired, "form", "csv")
	}
	if r.filterProcessingState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[processingState]", r.filterProcessingState, "form", "csv")
	}
	if r.filterBetaAppReviewSubmissionBetaReviewState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[betaAppReviewSubmission.betaReviewState]", r.filterBetaAppReviewSubmissionBetaReviewState, "form", "csv")
	}
	if r.filterUsesNonExemptEncryption != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[usesNonExemptEncryption]", r.filterUsesNonExemptEncryption, "form", "csv")
	}
	if r.filterPreReleaseVersionVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[preReleaseVersion.version]", r.filterPreReleaseVersionVersion, "form", "csv")
	}
	if r.filterPreReleaseVersionPlatform != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[preReleaseVersion.platform]", r.filterPreReleaseVersionPlatform, "form", "csv")
	}
	if r.filterBuildAudienceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[buildAudienceType]", r.filterBuildAudienceType, "form", "csv")
	}
	if r.filterPreReleaseVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[preReleaseVersion]", r.filterPreReleaseVersion, "form", "csv")
	}
	if r.filterApp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[app]", r.filterApp, "form", "csv")
	}
	if r.filterBetaGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[betaGroups]", r.filterBetaGroups, "form", "csv")
	}
	if r.filterAppStoreVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[appStoreVersion]", r.filterAppStoreVersion, "form", "csv")
	}
	if r.filterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[id]", r.filterId, "form", "csv")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "form", "csv")
	}
	if r.fieldsPreReleaseVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[preReleaseVersions]", r.fieldsPreReleaseVersions, "form", "csv")
	}
	if r.fieldsBetaTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaTesters]", r.fieldsBetaTesters, "form", "csv")
	}
	if r.fieldsBetaGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaGroups]", r.fieldsBetaGroups, "form", "csv")
	}
	if r.fieldsBetaBuildLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaBuildLocalizations]", r.fieldsBetaBuildLocalizations, "form", "csv")
	}
	if r.fieldsAppEncryptionDeclarations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEncryptionDeclarations]", r.fieldsAppEncryptionDeclarations, "form", "csv")
	}
	if r.fieldsBetaAppReviewSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaAppReviewSubmissions]", r.fieldsBetaAppReviewSubmissions, "form", "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "form", "csv")
	}
	if r.fieldsBuildBetaDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[buildBetaDetails]", r.fieldsBuildBetaDetails, "form", "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "form", "csv")
	}
	if r.fieldsBuildIcons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[buildIcons]", r.fieldsBuildIcons, "form", "csv")
	}
	if r.fieldsBuildBundles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[buildBundles]", r.fieldsBuildBundles, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitIndividualTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[individualTesters]", r.limitIndividualTesters, "form", "")
	}
	if r.limitBetaGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[betaGroups]", r.limitBetaGroups, "form", "")
	}
	if r.limitBetaBuildLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[betaBuildLocalizations]", r.limitBetaBuildLocalizations, "form", "")
	}
	if r.limitIcons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[icons]", r.limitIcons, "form", "")
	}
	if r.limitBuildBundles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[buildBundles]", r.limitBuildBundles, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCiBuildRunsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *CiBuildRunsAPIService
	ciBuildRunCreateRequest *CiBuildRunCreateRequest
}

// CiBuildRun representation
func (r ApiCiBuildRunsCreateInstanceRequest) CiBuildRunCreateRequest(ciBuildRunCreateRequest CiBuildRunCreateRequest) ApiCiBuildRunsCreateInstanceRequest {
	r.ciBuildRunCreateRequest = &ciBuildRunCreateRequest
	return r
}

func (r ApiCiBuildRunsCreateInstanceRequest) Execute() (*CiBuildRunResponse, *http.Response, error) {
	return r.ApiService.CiBuildRunsCreateInstanceExecute(r)
}

/*
CiBuildRunsCreateInstance Method for CiBuildRunsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCiBuildRunsCreateInstanceRequest
*/
func (a *CiBuildRunsAPIService) CiBuildRunsCreateInstance(ctx context.Context) ApiCiBuildRunsCreateInstanceRequest {
	return ApiCiBuildRunsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CiBuildRunResponse
func (a *CiBuildRunsAPIService) CiBuildRunsCreateInstanceExecute(r ApiCiBuildRunsCreateInstanceRequest) (*CiBuildRunResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CiBuildRunResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiBuildRunsAPIService.CiBuildRunsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciBuildRuns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ciBuildRunCreateRequest == nil {
		return localVarReturnValue, nil, reportError("ciBuildRunCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ciBuildRunCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCiBuildRunsGetInstanceRequest struct {
	ctx context.Context
	ApiService *CiBuildRunsAPIService
	id string
	fieldsCiBuildRuns *[]string
	fieldsBuilds *[]string
	include *[]string
	limitBuilds *int32
}

// the fields to include for returned resources of type ciBuildRuns
func (r ApiCiBuildRunsGetInstanceRequest) FieldsCiBuildRuns(fieldsCiBuildRuns []string) ApiCiBuildRunsGetInstanceRequest {
	r.fieldsCiBuildRuns = &fieldsCiBuildRuns
	return r
}

// the fields to include for returned resources of type builds
func (r ApiCiBuildRunsGetInstanceRequest) FieldsBuilds(fieldsBuilds []string) ApiCiBuildRunsGetInstanceRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// comma-separated list of relationships to include
func (r ApiCiBuildRunsGetInstanceRequest) Include(include []string) ApiCiBuildRunsGetInstanceRequest {
	r.include = &include
	return r
}

// maximum number of related builds returned (when they are included)
func (r ApiCiBuildRunsGetInstanceRequest) LimitBuilds(limitBuilds int32) ApiCiBuildRunsGetInstanceRequest {
	r.limitBuilds = &limitBuilds
	return r
}

func (r ApiCiBuildRunsGetInstanceRequest) Execute() (*CiBuildRunResponse, *http.Response, error) {
	return r.ApiService.CiBuildRunsGetInstanceExecute(r)
}

/*
CiBuildRunsGetInstance Method for CiBuildRunsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiCiBuildRunsGetInstanceRequest
*/
func (a *CiBuildRunsAPIService) CiBuildRunsGetInstance(ctx context.Context, id string) ApiCiBuildRunsGetInstanceRequest {
	return ApiCiBuildRunsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CiBuildRunResponse
func (a *CiBuildRunsAPIService) CiBuildRunsGetInstanceExecute(r ApiCiBuildRunsGetInstanceRequest) (*CiBuildRunResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CiBuildRunResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiBuildRunsAPIService.CiBuildRunsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciBuildRuns/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsCiBuildRuns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciBuildRuns]", r.fieldsCiBuildRuns, "form", "csv")
	}
	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[builds]", r.limitBuilds, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect-client

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// GameCenterDetailsResponseIncludedInner - struct for GameCenterDetailsResponseIncludedInner
type GameCenterDetailsResponseIncludedInner struct {
	App *App
	GameCenterAchievement *GameCenterAchievement
	GameCenterAchievementRelease *GameCenterAchievementRelease
	GameCenterAppVersion *GameCenterAppVersion
	GameCenterGroup *GameCenterGroup
	GameCenterLeaderboard *GameCenterLeaderboard
	GameCenterLeaderboardRelease *GameCenterLeaderboardRelease
	GameCenterLeaderboardSet *GameCenterLeaderboardSet
	GameCenterLeaderboardSetRelease *GameCenterLeaderboardSetRelease
}

// AppAsGameCenterDetailsResponseIncludedInner is a convenience function that returns App wrapped in GameCenterDetailsResponseIncludedInner
func AppAsGameCenterDetailsResponseIncludedInner(v *App) GameCenterDetailsResponseIncludedInner {
	return GameCenterDetailsResponseIncludedInner{
		App: v,
	}
}

// GameCenterAchievementAsGameCenterDetailsResponseIncludedInner is a convenience function that returns GameCenterAchievement wrapped in GameCenterDetailsResponseIncludedInner
func GameCenterAchievementAsGameCenterDetailsResponseIncludedInner(v *GameCenterAchievement) GameCenterDetailsResponseIncludedInner {
	return GameCenterDetailsResponseIncludedInner{
		GameCenterAchievement: v,
	}
}

// GameCenterAchievementReleaseAsGameCenterDetailsResponseIncludedInner is a convenience function that returns GameCenterAchievementRelease wrapped in GameCenterDetailsResponseIncludedInner
func GameCenterAchievementReleaseAsGameCenterDetailsResponseIncludedInner(v *GameCenterAchievementRelease) GameCenterDetailsResponseIncludedInner {
	return GameCenterDetailsResponseIncludedInner{
		GameCenterAchievementRelease: v,
	}
}

// GameCenterAppVersionAsGameCenterDetailsResponseIncludedInner is a convenience function that returns GameCenterAppVersion wrapped in GameCenterDetailsResponseIncludedInner
func GameCenterAppVersionAsGameCenterDetailsResponseIncludedInner(v *GameCenterAppVersion) GameCenterDetailsResponseIncludedInner {
	return GameCenterDetailsResponseIncludedInner{
		GameCenterAppVersion: v,
	}
}

// GameCenterGroupAsGameCenterDetailsResponseIncludedInner is a convenience function that returns GameCenterGroup wrapped in GameCenterDetailsResponseIncludedInner
func GameCenterGroupAsGameCenterDetailsResponseIncludedInner(v *GameCenterGroup) GameCenterDetailsResponseIncludedInner {
	return GameCenterDetailsResponseIncludedInner{
		GameCenterGroup: v,
	}
}

// GameCenterLeaderboardAsGameCenterDetailsResponseIncludedInner is a convenience function that returns GameCenterLeaderboard wrapped in GameCenterDetailsResponseIncludedInner
func GameCenterLeaderboardAsGameCenterDetailsResponseIncludedInner(v *GameCenterLeaderboard) GameCenterDetailsResponseIncludedInner {
	return GameCenterDetailsResponseIncludedInner{
		GameCenterLeaderboard: v,
	}
}

// GameCenterLeaderboardReleaseAsGameCenterDetailsResponseIncludedInner is a convenience function that returns GameCenterLeaderboardRelease wrapped in GameCenterDetailsResponseIncludedInner
func GameCenterLeaderboardReleaseAsGameCenterDetailsResponseIncludedInner(v *GameCenterLeaderboardRelease) GameCenterDetailsResponseIncludedInner {
	return GameCenterDetailsResponseIncludedInner{
		GameCenterLeaderboardRelease: v,
	}
}

// GameCenterLeaderboardSetAsGameCenterDetailsResponseIncludedInner is a convenience function that returns GameCenterLeaderboardSet wrapped in GameCenterDetailsResponseIncludedInner
func GameCenterLeaderboardSetAsGameCenterDetailsResponseIncludedInner(v *GameCenterLeaderboardSet) GameCenterDetailsResponseIncludedInner {
	return GameCenterDetailsResponseIncludedInner{
		GameCenterLeaderboardSet: v,
	}
}

// GameCenterLeaderboardSetReleaseAsGameCenterDetailsResponseIncludedInner is a convenience function that returns GameCenterLeaderboardSetRelease wrapped in GameCenterDetailsResponseIncludedInner
func GameCenterLeaderboardSetReleaseAsGameCenterDetailsResponseIncludedInner(v *GameCenterLeaderboardSetRelease) GameCenterDetailsResponseIncludedInner {
	return GameCenterDetailsResponseIncludedInner{
		GameCenterLeaderboardSetRelease: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GameCenterDetailsResponseIncludedInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into App
	err = newStrictDecoder(data).Decode(&dst.App)
	if err == nil {
		jsonApp, _ := json.Marshal(dst.App)
		if string(jsonApp) == "{}" { // empty struct
			dst.App = nil
		} else {
			if err = validator.Validate(dst.App); err != nil {
				dst.App = nil
			} else {
				match++
			}
		}
	} else {
		dst.App = nil
	}

	// try to unmarshal data into GameCenterAchievement
	err = newStrictDecoder(data).Decode(&dst.GameCenterAchievement)
	if err == nil {
		jsonGameCenterAchievement, _ := json.Marshal(dst.GameCenterAchievement)
		if string(jsonGameCenterAchievement) == "{}" { // empty struct
			dst.GameCenterAchievement = nil
		} else {
			if err = validator.Validate(dst.GameCenterAchievement); err != nil {
				dst.GameCenterAchievement = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterAchievement = nil
	}

	// try to unmarshal data into GameCenterAchievementRelease
	err = newStrictDecoder(data).Decode(&dst.GameCenterAchievementRelease)
	if err == nil {
		jsonGameCenterAchievementRelease, _ := json.Marshal(dst.GameCenterAchievementRelease)
		if string(jsonGameCenterAchievementRelease) == "{}" { // empty struct
			dst.GameCenterAchievementRelease = nil
		} else {
			if err = validator.Validate(dst.GameCenterAchievementRelease); err != nil {
				dst.GameCenterAchievementRelease = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterAchievementRelease = nil
	}

	// try to unmarshal data into GameCenterAppVersion
	err = newStrictDecoder(data).Decode(&dst.GameCenterAppVersion)
	if err == nil {
		jsonGameCenterAppVersion, _ := json.Marshal(dst.GameCenterAppVersion)
		if string(jsonGameCenterAppVersion) == "{}" { // empty struct
			dst.GameCenterAppVersion = nil
		} else {
			if err = validator.Validate(dst.GameCenterAppVersion); err != nil {
				dst.GameCenterAppVersion = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterAppVersion = nil
	}

	// try to unmarshal data into GameCenterGroup
	err = newStrictDecoder(data).Decode(&dst.GameCenterGroup)
	if err == nil {
		jsonGameCenterGroup, _ := json.Marshal(dst.GameCenterGroup)
		if string(jsonGameCenterGroup) == "{}" { // empty struct
			dst.GameCenterGroup = nil
		} else {
			if err = validator.Validate(dst.GameCenterGroup); err != nil {
				dst.GameCenterGroup = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterGroup = nil
	}

	// try to unmarshal data into GameCenterLeaderboard
	err = newStrictDecoder(data).Decode(&dst.GameCenterLeaderboard)
	if err == nil {
		jsonGameCenterLeaderboard, _ := json.Marshal(dst.GameCenterLeaderboard)
		if string(jsonGameCenterLeaderboard) == "{}" { // empty struct
			dst.GameCenterLeaderboard = nil
		} else {
			if err = validator.Validate(dst.GameCenterLeaderboard); err != nil {
				dst.GameCenterLeaderboard = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterLeaderboard = nil
	}

	// try to unmarshal data into GameCenterLeaderboardRelease
	err = newStrictDecoder(data).Decode(&dst.GameCenterLeaderboardRelease)
	if err == nil {
		jsonGameCenterLeaderboardRelease, _ := json.Marshal(dst.GameCenterLeaderboardRelease)
		if string(jsonGameCenterLeaderboardRelease) == "{}" { // empty struct
			dst.GameCenterLeaderboardRelease = nil
		} else {
			if err = validator.Validate(dst.GameCenterLeaderboardRelease); err != nil {
				dst.GameCenterLeaderboardRelease = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterLeaderboardRelease = nil
	}

	// try to unmarshal data into GameCenterLeaderboardSet
	err = newStrictDecoder(data).Decode(&dst.GameCenterLeaderboardSet)
	if err == nil {
		jsonGameCenterLeaderboardSet, _ := json.Marshal(dst.GameCenterLeaderboardSet)
		if string(jsonGameCenterLeaderboardSet) == "{}" { // empty struct
			dst.GameCenterLeaderboardSet = nil
		} else {
			if err = validator.Validate(dst.GameCenterLeaderboardSet); err != nil {
				dst.GameCenterLeaderboardSet = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterLeaderboardSet = nil
	}

	// try to unmarshal data into GameCenterLeaderboardSetRelease
	err = newStrictDecoder(data).Decode(&dst.GameCenterLeaderboardSetRelease)
	if err == nil {
		jsonGameCenterLeaderboardSetRelease, _ := json.Marshal(dst.GameCenterLeaderboardSetRelease)
		if string(jsonGameCenterLeaderboardSetRelease) == "{}" { // empty struct
			dst.GameCenterLeaderboardSetRelease = nil
		} else {
			if err = validator.Validate(dst.GameCenterLeaderboardSetRelease); err != nil {
				dst.GameCenterLeaderboardSetRelease = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterLeaderboardSetRelease = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.App = nil
		dst.GameCenterAchievement = nil
		dst.GameCenterAchievementRelease = nil
		dst.GameCenterAppVersion = nil
		dst.GameCenterGroup = nil
		dst.GameCenterLeaderboard = nil
		dst.GameCenterLeaderboardRelease = nil
		dst.GameCenterLeaderboardSet = nil
		dst.GameCenterLeaderboardSetRelease = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GameCenterDetailsResponseIncludedInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GameCenterDetailsResponseIncludedInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GameCenterDetailsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	if src.App != nil {
		return json.Marshal(&src.App)
	}

	if src.GameCenterAchievement != nil {
		return json.Marshal(&src.GameCenterAchievement)
	}

	if src.GameCenterAchievementRelease != nil {
		return json.Marshal(&src.GameCenterAchievementRelease)
	}

	if src.GameCenterAppVersion != nil {
		return json.Marshal(&src.GameCenterAppVersion)
	}

	if src.GameCenterGroup != nil {
		return json.Marshal(&src.GameCenterGroup)
	}

	if src.GameCenterLeaderboard != nil {
		return json.Marshal(&src.GameCenterLeaderboard)
	}

	if src.GameCenterLeaderboardRelease != nil {
		return json.Marshal(&src.GameCenterLeaderboardRelease)
	}

	if src.GameCenterLeaderboardSet != nil {
		return json.Marshal(&src.GameCenterLeaderboardSet)
	}

	if src.GameCenterLeaderboardSetRelease != nil {
		return json.Marshal(&src.GameCenterLeaderboardSetRelease)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GameCenterDetailsResponseIncludedInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.App != nil {
		return obj.App
	}

	if obj.GameCenterAchievement != nil {
		return obj.GameCenterAchievement
	}

	if obj.GameCenterAchievementRelease != nil {
		return obj.GameCenterAchievementRelease
	}

	if obj.GameCenterAppVersion != nil {
		return obj.GameCenterAppVersion
	}

	if obj.GameCenterGroup != nil {
		return obj.GameCenterGroup
	}

	if obj.GameCenterLeaderboard != nil {
		return obj.GameCenterLeaderboard
	}

	if obj.GameCenterLeaderboardRelease != nil {
		return obj.GameCenterLeaderboardRelease
	}

	if obj.GameCenterLeaderboardSet != nil {
		return obj.GameCenterLeaderboardSet
	}

	if obj.GameCenterLeaderboardSetRelease != nil {
		return obj.GameCenterLeaderboardSetRelease
	}

	// all schemas are nil
	return nil
}

type NullableGameCenterDetailsResponseIncludedInner struct {
	value *GameCenterDetailsResponseIncludedInner
	isSet bool
}

func (v NullableGameCenterDetailsResponseIncludedInner) Get() *GameCenterDetailsResponseIncludedInner {
	return v.value
}

func (v *NullableGameCenterDetailsResponseIncludedInner) Set(val *GameCenterDetailsResponseIncludedInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGameCenterDetailsResponseIncludedInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGameCenterDetailsResponseIncludedInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGameCenterDetailsResponseIncludedInner(val *GameCenterDetailsResponseIncludedInner) *NullableGameCenterDetailsResponseIncludedInner {
	return &NullableGameCenterDetailsResponseIncludedInner{value: val, isSet: true}
}

func (v NullableGameCenterDetailsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGameCenterDetailsResponseIncludedInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



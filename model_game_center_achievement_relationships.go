/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect-client

import (
	"encoding/json"
)

// checks if the GameCenterAchievementRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GameCenterAchievementRelationships{}

// GameCenterAchievementRelationships struct for GameCenterAchievementRelationships
type GameCenterAchievementRelationships struct {
	GameCenterDetail *GameCenterAchievementReleaseRelationshipsGameCenterDetail `json:"gameCenterDetail,omitempty"`
	GameCenterGroup *GameCenterAchievementRelationshipsGameCenterGroup `json:"gameCenterGroup,omitempty"`
	GroupAchievement *GameCenterAchievementLocalizationRelationshipsGameCenterAchievement `json:"groupAchievement,omitempty"`
	Localizations *GameCenterAchievementRelationshipsLocalizations `json:"localizations,omitempty"`
	Releases *GameCenterAchievementRelationshipsReleases `json:"releases,omitempty"`
}

// NewGameCenterAchievementRelationships instantiates a new GameCenterAchievementRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGameCenterAchievementRelationships() *GameCenterAchievementRelationships {
	this := GameCenterAchievementRelationships{}
	return &this
}

// NewGameCenterAchievementRelationshipsWithDefaults instantiates a new GameCenterAchievementRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGameCenterAchievementRelationshipsWithDefaults() *GameCenterAchievementRelationships {
	this := GameCenterAchievementRelationships{}
	return &this
}

// GetGameCenterDetail returns the GameCenterDetail field value if set, zero value otherwise.
func (o *GameCenterAchievementRelationships) GetGameCenterDetail() GameCenterAchievementReleaseRelationshipsGameCenterDetail {
	if o == nil || IsNil(o.GameCenterDetail) {
		var ret GameCenterAchievementReleaseRelationshipsGameCenterDetail
		return ret
	}
	return *o.GameCenterDetail
}

// GetGameCenterDetailOk returns a tuple with the GameCenterDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterAchievementRelationships) GetGameCenterDetailOk() (*GameCenterAchievementReleaseRelationshipsGameCenterDetail, bool) {
	if o == nil || IsNil(o.GameCenterDetail) {
		return nil, false
	}
	return o.GameCenterDetail, true
}

// HasGameCenterDetail returns a boolean if a field has been set.
func (o *GameCenterAchievementRelationships) HasGameCenterDetail() bool {
	if o != nil && !IsNil(o.GameCenterDetail) {
		return true
	}

	return false
}

// SetGameCenterDetail gets a reference to the given GameCenterAchievementReleaseRelationshipsGameCenterDetail and assigns it to the GameCenterDetail field.
func (o *GameCenterAchievementRelationships) SetGameCenterDetail(v GameCenterAchievementReleaseRelationshipsGameCenterDetail) {
	o.GameCenterDetail = &v
}

// GetGameCenterGroup returns the GameCenterGroup field value if set, zero value otherwise.
func (o *GameCenterAchievementRelationships) GetGameCenterGroup() GameCenterAchievementRelationshipsGameCenterGroup {
	if o == nil || IsNil(o.GameCenterGroup) {
		var ret GameCenterAchievementRelationshipsGameCenterGroup
		return ret
	}
	return *o.GameCenterGroup
}

// GetGameCenterGroupOk returns a tuple with the GameCenterGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterAchievementRelationships) GetGameCenterGroupOk() (*GameCenterAchievementRelationshipsGameCenterGroup, bool) {
	if o == nil || IsNil(o.GameCenterGroup) {
		return nil, false
	}
	return o.GameCenterGroup, true
}

// HasGameCenterGroup returns a boolean if a field has been set.
func (o *GameCenterAchievementRelationships) HasGameCenterGroup() bool {
	if o != nil && !IsNil(o.GameCenterGroup) {
		return true
	}

	return false
}

// SetGameCenterGroup gets a reference to the given GameCenterAchievementRelationshipsGameCenterGroup and assigns it to the GameCenterGroup field.
func (o *GameCenterAchievementRelationships) SetGameCenterGroup(v GameCenterAchievementRelationshipsGameCenterGroup) {
	o.GameCenterGroup = &v
}

// GetGroupAchievement returns the GroupAchievement field value if set, zero value otherwise.
func (o *GameCenterAchievementRelationships) GetGroupAchievement() GameCenterAchievementLocalizationRelationshipsGameCenterAchievement {
	if o == nil || IsNil(o.GroupAchievement) {
		var ret GameCenterAchievementLocalizationRelationshipsGameCenterAchievement
		return ret
	}
	return *o.GroupAchievement
}

// GetGroupAchievementOk returns a tuple with the GroupAchievement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterAchievementRelationships) GetGroupAchievementOk() (*GameCenterAchievementLocalizationRelationshipsGameCenterAchievement, bool) {
	if o == nil || IsNil(o.GroupAchievement) {
		return nil, false
	}
	return o.GroupAchievement, true
}

// HasGroupAchievement returns a boolean if a field has been set.
func (o *GameCenterAchievementRelationships) HasGroupAchievement() bool {
	if o != nil && !IsNil(o.GroupAchievement) {
		return true
	}

	return false
}

// SetGroupAchievement gets a reference to the given GameCenterAchievementLocalizationRelationshipsGameCenterAchievement and assigns it to the GroupAchievement field.
func (o *GameCenterAchievementRelationships) SetGroupAchievement(v GameCenterAchievementLocalizationRelationshipsGameCenterAchievement) {
	o.GroupAchievement = &v
}

// GetLocalizations returns the Localizations field value if set, zero value otherwise.
func (o *GameCenterAchievementRelationships) GetLocalizations() GameCenterAchievementRelationshipsLocalizations {
	if o == nil || IsNil(o.Localizations) {
		var ret GameCenterAchievementRelationshipsLocalizations
		return ret
	}
	return *o.Localizations
}

// GetLocalizationsOk returns a tuple with the Localizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterAchievementRelationships) GetLocalizationsOk() (*GameCenterAchievementRelationshipsLocalizations, bool) {
	if o == nil || IsNil(o.Localizations) {
		return nil, false
	}
	return o.Localizations, true
}

// HasLocalizations returns a boolean if a field has been set.
func (o *GameCenterAchievementRelationships) HasLocalizations() bool {
	if o != nil && !IsNil(o.Localizations) {
		return true
	}

	return false
}

// SetLocalizations gets a reference to the given GameCenterAchievementRelationshipsLocalizations and assigns it to the Localizations field.
func (o *GameCenterAchievementRelationships) SetLocalizations(v GameCenterAchievementRelationshipsLocalizations) {
	o.Localizations = &v
}

// GetReleases returns the Releases field value if set, zero value otherwise.
func (o *GameCenterAchievementRelationships) GetReleases() GameCenterAchievementRelationshipsReleases {
	if o == nil || IsNil(o.Releases) {
		var ret GameCenterAchievementRelationshipsReleases
		return ret
	}
	return *o.Releases
}

// GetReleasesOk returns a tuple with the Releases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterAchievementRelationships) GetReleasesOk() (*GameCenterAchievementRelationshipsReleases, bool) {
	if o == nil || IsNil(o.Releases) {
		return nil, false
	}
	return o.Releases, true
}

// HasReleases returns a boolean if a field has been set.
func (o *GameCenterAchievementRelationships) HasReleases() bool {
	if o != nil && !IsNil(o.Releases) {
		return true
	}

	return false
}

// SetReleases gets a reference to the given GameCenterAchievementRelationshipsReleases and assigns it to the Releases field.
func (o *GameCenterAchievementRelationships) SetReleases(v GameCenterAchievementRelationshipsReleases) {
	o.Releases = &v
}

func (o GameCenterAchievementRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GameCenterAchievementRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GameCenterDetail) {
		toSerialize["gameCenterDetail"] = o.GameCenterDetail
	}
	if !IsNil(o.GameCenterGroup) {
		toSerialize["gameCenterGroup"] = o.GameCenterGroup
	}
	if !IsNil(o.GroupAchievement) {
		toSerialize["groupAchievement"] = o.GroupAchievement
	}
	if !IsNil(o.Localizations) {
		toSerialize["localizations"] = o.Localizations
	}
	if !IsNil(o.Releases) {
		toSerialize["releases"] = o.Releases
	}
	return toSerialize, nil
}

type NullableGameCenterAchievementRelationships struct {
	value *GameCenterAchievementRelationships
	isSet bool
}

func (v NullableGameCenterAchievementRelationships) Get() *GameCenterAchievementRelationships {
	return v.value
}

func (v *NullableGameCenterAchievementRelationships) Set(val *GameCenterAchievementRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableGameCenterAchievementRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableGameCenterAchievementRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGameCenterAchievementRelationships(val *GameCenterAchievementRelationships) *NullableGameCenterAchievementRelationships {
	return &NullableGameCenterAchievementRelationships{value: val, isSet: true}
}

func (v NullableGameCenterAchievementRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGameCenterAchievementRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



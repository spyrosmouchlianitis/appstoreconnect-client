/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BuildBundlesAPIService BuildBundlesAPI service
type BuildBundlesAPIService service

type ApiBuildBundlesAppClipDomainCacheStatusGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *BuildBundlesAPIService
	id string
	fieldsAppClipDomainStatuses *[]string
}

// the fields to include for returned resources of type appClipDomainStatuses
func (r ApiBuildBundlesAppClipDomainCacheStatusGetToOneRelatedRequest) FieldsAppClipDomainStatuses(fieldsAppClipDomainStatuses []string) ApiBuildBundlesAppClipDomainCacheStatusGetToOneRelatedRequest {
	r.fieldsAppClipDomainStatuses = &fieldsAppClipDomainStatuses
	return r
}

func (r ApiBuildBundlesAppClipDomainCacheStatusGetToOneRelatedRequest) Execute() (*AppClipDomainStatusResponse, *http.Response, error) {
	return r.ApiService.BuildBundlesAppClipDomainCacheStatusGetToOneRelatedExecute(r)
}

/*
BuildBundlesAppClipDomainCacheStatusGetToOneRelated Method for BuildBundlesAppClipDomainCacheStatusGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiBuildBundlesAppClipDomainCacheStatusGetToOneRelatedRequest
*/
func (a *BuildBundlesAPIService) BuildBundlesAppClipDomainCacheStatusGetToOneRelated(ctx context.Context, id string) ApiBuildBundlesAppClipDomainCacheStatusGetToOneRelatedRequest {
	return ApiBuildBundlesAppClipDomainCacheStatusGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppClipDomainStatusResponse
func (a *BuildBundlesAPIService) BuildBundlesAppClipDomainCacheStatusGetToOneRelatedExecute(r ApiBuildBundlesAppClipDomainCacheStatusGetToOneRelatedRequest) (*AppClipDomainStatusResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppClipDomainStatusResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildBundlesAPIService.BuildBundlesAppClipDomainCacheStatusGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/buildBundles/{id}/appClipDomainCacheStatus"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppClipDomainStatuses != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipDomainStatuses]", r.fieldsAppClipDomainStatuses, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildBundlesAppClipDomainDebugStatusGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *BuildBundlesAPIService
	id string
	fieldsAppClipDomainStatuses *[]string
}

// the fields to include for returned resources of type appClipDomainStatuses
func (r ApiBuildBundlesAppClipDomainDebugStatusGetToOneRelatedRequest) FieldsAppClipDomainStatuses(fieldsAppClipDomainStatuses []string) ApiBuildBundlesAppClipDomainDebugStatusGetToOneRelatedRequest {
	r.fieldsAppClipDomainStatuses = &fieldsAppClipDomainStatuses
	return r
}

func (r ApiBuildBundlesAppClipDomainDebugStatusGetToOneRelatedRequest) Execute() (*AppClipDomainStatusResponse, *http.Response, error) {
	return r.ApiService.BuildBundlesAppClipDomainDebugStatusGetToOneRelatedExecute(r)
}

/*
BuildBundlesAppClipDomainDebugStatusGetToOneRelated Method for BuildBundlesAppClipDomainDebugStatusGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiBuildBundlesAppClipDomainDebugStatusGetToOneRelatedRequest
*/
func (a *BuildBundlesAPIService) BuildBundlesAppClipDomainDebugStatusGetToOneRelated(ctx context.Context, id string) ApiBuildBundlesAppClipDomainDebugStatusGetToOneRelatedRequest {
	return ApiBuildBundlesAppClipDomainDebugStatusGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppClipDomainStatusResponse
func (a *BuildBundlesAPIService) BuildBundlesAppClipDomainDebugStatusGetToOneRelatedExecute(r ApiBuildBundlesAppClipDomainDebugStatusGetToOneRelatedRequest) (*AppClipDomainStatusResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppClipDomainStatusResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildBundlesAPIService.BuildBundlesAppClipDomainDebugStatusGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/buildBundles/{id}/appClipDomainDebugStatus"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppClipDomainStatuses != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipDomainStatuses]", r.fieldsAppClipDomainStatuses, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildBundlesBetaAppClipInvocationsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *BuildBundlesAPIService
	id string
	fieldsBetaAppClipInvocations *[]string
	fieldsBetaAppClipInvocationLocalizations *[]string
	limit *int32
	include *[]string
	limitBetaAppClipInvocationLocalizations *int32
}

// the fields to include for returned resources of type betaAppClipInvocations
func (r ApiBuildBundlesBetaAppClipInvocationsGetToManyRelatedRequest) FieldsBetaAppClipInvocations(fieldsBetaAppClipInvocations []string) ApiBuildBundlesBetaAppClipInvocationsGetToManyRelatedRequest {
	r.fieldsBetaAppClipInvocations = &fieldsBetaAppClipInvocations
	return r
}

// the fields to include for returned resources of type betaAppClipInvocationLocalizations
func (r ApiBuildBundlesBetaAppClipInvocationsGetToManyRelatedRequest) FieldsBetaAppClipInvocationLocalizations(fieldsBetaAppClipInvocationLocalizations []string) ApiBuildBundlesBetaAppClipInvocationsGetToManyRelatedRequest {
	r.fieldsBetaAppClipInvocationLocalizations = &fieldsBetaAppClipInvocationLocalizations
	return r
}

// maximum resources per page
func (r ApiBuildBundlesBetaAppClipInvocationsGetToManyRelatedRequest) Limit(limit int32) ApiBuildBundlesBetaAppClipInvocationsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiBuildBundlesBetaAppClipInvocationsGetToManyRelatedRequest) Include(include []string) ApiBuildBundlesBetaAppClipInvocationsGetToManyRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related betaAppClipInvocationLocalizations returned (when they are included)
func (r ApiBuildBundlesBetaAppClipInvocationsGetToManyRelatedRequest) LimitBetaAppClipInvocationLocalizations(limitBetaAppClipInvocationLocalizations int32) ApiBuildBundlesBetaAppClipInvocationsGetToManyRelatedRequest {
	r.limitBetaAppClipInvocationLocalizations = &limitBetaAppClipInvocationLocalizations
	return r
}

func (r ApiBuildBundlesBetaAppClipInvocationsGetToManyRelatedRequest) Execute() (*BetaAppClipInvocationsResponse, *http.Response, error) {
	return r.ApiService.BuildBundlesBetaAppClipInvocationsGetToManyRelatedExecute(r)
}

/*
BuildBundlesBetaAppClipInvocationsGetToManyRelated Method for BuildBundlesBetaAppClipInvocationsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiBuildBundlesBetaAppClipInvocationsGetToManyRelatedRequest
*/
func (a *BuildBundlesAPIService) BuildBundlesBetaAppClipInvocationsGetToManyRelated(ctx context.Context, id string) ApiBuildBundlesBetaAppClipInvocationsGetToManyRelatedRequest {
	return ApiBuildBundlesBetaAppClipInvocationsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BetaAppClipInvocationsResponse
func (a *BuildBundlesAPIService) BuildBundlesBetaAppClipInvocationsGetToManyRelatedExecute(r ApiBuildBundlesBetaAppClipInvocationsGetToManyRelatedRequest) (*BetaAppClipInvocationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BetaAppClipInvocationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildBundlesAPIService.BuildBundlesBetaAppClipInvocationsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/buildBundles/{id}/betaAppClipInvocations"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBetaAppClipInvocations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaAppClipInvocations]", r.fieldsBetaAppClipInvocations, "form", "csv")
	}
	if r.fieldsBetaAppClipInvocationLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaAppClipInvocationLocalizations]", r.fieldsBetaAppClipInvocationLocalizations, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitBetaAppClipInvocationLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[betaAppClipInvocationLocalizations]", r.limitBetaAppClipInvocationLocalizations, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildBundlesBuildBundleFileSizesGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *BuildBundlesAPIService
	id string
	fieldsBuildBundleFileSizes *[]string
	limit *int32
}

// the fields to include for returned resources of type buildBundleFileSizes
func (r ApiBuildBundlesBuildBundleFileSizesGetToManyRelatedRequest) FieldsBuildBundleFileSizes(fieldsBuildBundleFileSizes []string) ApiBuildBundlesBuildBundleFileSizesGetToManyRelatedRequest {
	r.fieldsBuildBundleFileSizes = &fieldsBuildBundleFileSizes
	return r
}

// maximum resources per page
func (r ApiBuildBundlesBuildBundleFileSizesGetToManyRelatedRequest) Limit(limit int32) ApiBuildBundlesBuildBundleFileSizesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r ApiBuildBundlesBuildBundleFileSizesGetToManyRelatedRequest) Execute() (*BuildBundleFileSizesResponse, *http.Response, error) {
	return r.ApiService.BuildBundlesBuildBundleFileSizesGetToManyRelatedExecute(r)
}

/*
BuildBundlesBuildBundleFileSizesGetToManyRelated Method for BuildBundlesBuildBundleFileSizesGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiBuildBundlesBuildBundleFileSizesGetToManyRelatedRequest
*/
func (a *BuildBundlesAPIService) BuildBundlesBuildBundleFileSizesGetToManyRelated(ctx context.Context, id string) ApiBuildBundlesBuildBundleFileSizesGetToManyRelatedRequest {
	return ApiBuildBundlesBuildBundleFileSizesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BuildBundleFileSizesResponse
func (a *BuildBundlesAPIService) BuildBundlesBuildBundleFileSizesGetToManyRelatedExecute(r ApiBuildBundlesBuildBundleFileSizesGetToManyRelatedRequest) (*BuildBundleFileSizesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BuildBundleFileSizesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildBundlesAPIService.BuildBundlesBuildBundleFileSizesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/buildBundles/{id}/buildBundleFileSizes"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBuildBundleFileSizes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[buildBundleFileSizes]", r.fieldsBuildBundleFileSizes, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

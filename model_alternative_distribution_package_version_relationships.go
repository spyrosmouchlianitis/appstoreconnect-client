/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"encoding/json"
)

// checks if the AlternativeDistributionPackageVersionRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlternativeDistributionPackageVersionRelationships{}

// AlternativeDistributionPackageVersionRelationships struct for AlternativeDistributionPackageVersionRelationships
type AlternativeDistributionPackageVersionRelationships struct {
	Variants *AlternativeDistributionPackageVersionRelationshipsVariants `json:"variants,omitempty"`
	Deltas *AlternativeDistributionPackageVersionRelationshipsDeltas `json:"deltas,omitempty"`
	AlternativeDistributionPackage *AlternativeDistributionPackageVersionRelationshipsAlternativeDistributionPackage `json:"alternativeDistributionPackage,omitempty"`
}

// NewAlternativeDistributionPackageVersionRelationships instantiates a new AlternativeDistributionPackageVersionRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlternativeDistributionPackageVersionRelationships() *AlternativeDistributionPackageVersionRelationships {
	this := AlternativeDistributionPackageVersionRelationships{}
	return &this
}

// NewAlternativeDistributionPackageVersionRelationshipsWithDefaults instantiates a new AlternativeDistributionPackageVersionRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlternativeDistributionPackageVersionRelationshipsWithDefaults() *AlternativeDistributionPackageVersionRelationships {
	this := AlternativeDistributionPackageVersionRelationships{}
	return &this
}

// GetVariants returns the Variants field value if set, zero value otherwise.
func (o *AlternativeDistributionPackageVersionRelationships) GetVariants() AlternativeDistributionPackageVersionRelationshipsVariants {
	if o == nil || IsNil(o.Variants) {
		var ret AlternativeDistributionPackageVersionRelationshipsVariants
		return ret
	}
	return *o.Variants
}

// GetVariantsOk returns a tuple with the Variants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternativeDistributionPackageVersionRelationships) GetVariantsOk() (*AlternativeDistributionPackageVersionRelationshipsVariants, bool) {
	if o == nil || IsNil(o.Variants) {
		return nil, false
	}
	return o.Variants, true
}

// HasVariants returns a boolean if a field has been set.
func (o *AlternativeDistributionPackageVersionRelationships) HasVariants() bool {
	if o != nil && !IsNil(o.Variants) {
		return true
	}

	return false
}

// SetVariants gets a reference to the given AlternativeDistributionPackageVersionRelationshipsVariants and assigns it to the Variants field.
func (o *AlternativeDistributionPackageVersionRelationships) SetVariants(v AlternativeDistributionPackageVersionRelationshipsVariants) {
	o.Variants = &v
}

// GetDeltas returns the Deltas field value if set, zero value otherwise.
func (o *AlternativeDistributionPackageVersionRelationships) GetDeltas() AlternativeDistributionPackageVersionRelationshipsDeltas {
	if o == nil || IsNil(o.Deltas) {
		var ret AlternativeDistributionPackageVersionRelationshipsDeltas
		return ret
	}
	return *o.Deltas
}

// GetDeltasOk returns a tuple with the Deltas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternativeDistributionPackageVersionRelationships) GetDeltasOk() (*AlternativeDistributionPackageVersionRelationshipsDeltas, bool) {
	if o == nil || IsNil(o.Deltas) {
		return nil, false
	}
	return o.Deltas, true
}

// HasDeltas returns a boolean if a field has been set.
func (o *AlternativeDistributionPackageVersionRelationships) HasDeltas() bool {
	if o != nil && !IsNil(o.Deltas) {
		return true
	}

	return false
}

// SetDeltas gets a reference to the given AlternativeDistributionPackageVersionRelationshipsDeltas and assigns it to the Deltas field.
func (o *AlternativeDistributionPackageVersionRelationships) SetDeltas(v AlternativeDistributionPackageVersionRelationshipsDeltas) {
	o.Deltas = &v
}

// GetAlternativeDistributionPackage returns the AlternativeDistributionPackage field value if set, zero value otherwise.
func (o *AlternativeDistributionPackageVersionRelationships) GetAlternativeDistributionPackage() AlternativeDistributionPackageVersionRelationshipsAlternativeDistributionPackage {
	if o == nil || IsNil(o.AlternativeDistributionPackage) {
		var ret AlternativeDistributionPackageVersionRelationshipsAlternativeDistributionPackage
		return ret
	}
	return *o.AlternativeDistributionPackage
}

// GetAlternativeDistributionPackageOk returns a tuple with the AlternativeDistributionPackage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternativeDistributionPackageVersionRelationships) GetAlternativeDistributionPackageOk() (*AlternativeDistributionPackageVersionRelationshipsAlternativeDistributionPackage, bool) {
	if o == nil || IsNil(o.AlternativeDistributionPackage) {
		return nil, false
	}
	return o.AlternativeDistributionPackage, true
}

// HasAlternativeDistributionPackage returns a boolean if a field has been set.
func (o *AlternativeDistributionPackageVersionRelationships) HasAlternativeDistributionPackage() bool {
	if o != nil && !IsNil(o.AlternativeDistributionPackage) {
		return true
	}

	return false
}

// SetAlternativeDistributionPackage gets a reference to the given AlternativeDistributionPackageVersionRelationshipsAlternativeDistributionPackage and assigns it to the AlternativeDistributionPackage field.
func (o *AlternativeDistributionPackageVersionRelationships) SetAlternativeDistributionPackage(v AlternativeDistributionPackageVersionRelationshipsAlternativeDistributionPackage) {
	o.AlternativeDistributionPackage = &v
}

func (o AlternativeDistributionPackageVersionRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlternativeDistributionPackageVersionRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Variants) {
		toSerialize["variants"] = o.Variants
	}
	if !IsNil(o.Deltas) {
		toSerialize["deltas"] = o.Deltas
	}
	if !IsNil(o.AlternativeDistributionPackage) {
		toSerialize["alternativeDistributionPackage"] = o.AlternativeDistributionPackage
	}
	return toSerialize, nil
}

type NullableAlternativeDistributionPackageVersionRelationships struct {
	value *AlternativeDistributionPackageVersionRelationships
	isSet bool
}

func (v NullableAlternativeDistributionPackageVersionRelationships) Get() *AlternativeDistributionPackageVersionRelationships {
	return v.value
}

func (v *NullableAlternativeDistributionPackageVersionRelationships) Set(val *AlternativeDistributionPackageVersionRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableAlternativeDistributionPackageVersionRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableAlternativeDistributionPackageVersionRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlternativeDistributionPackageVersionRelationships(val *AlternativeDistributionPackageVersionRelationships) *NullableAlternativeDistributionPackageVersionRelationships {
	return &NullableAlternativeDistributionPackageVersionRelationships{value: val, isSet: true}
}

func (v NullableAlternativeDistributionPackageVersionRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlternativeDistributionPackageVersionRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



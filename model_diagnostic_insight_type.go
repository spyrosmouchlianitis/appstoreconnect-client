/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"encoding/json"
	"fmt"
)

// DiagnosticInsightType the model 'DiagnosticInsightType'
type DiagnosticInsightType string

// List of DiagnosticInsightType
const (
	TREND DiagnosticInsightType = "TREND"
)

// All allowed values of DiagnosticInsightType enum
var AllowedDiagnosticInsightTypeEnumValues = []DiagnosticInsightType{
	"TREND",
}

func (v *DiagnosticInsightType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DiagnosticInsightType(value)
	for _, existing := range AllowedDiagnosticInsightTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DiagnosticInsightType", value)
}

// NewDiagnosticInsightTypeFromValue returns a pointer to a valid DiagnosticInsightType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDiagnosticInsightTypeFromValue(v string) (*DiagnosticInsightType, error) {
	ev := DiagnosticInsightType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DiagnosticInsightType: valid values are %v", v, AllowedDiagnosticInsightTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DiagnosticInsightType) IsValid() bool {
	for _, existing := range AllowedDiagnosticInsightTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DiagnosticInsightType value
func (v DiagnosticInsightType) Ptr() *DiagnosticInsightType {
	return &v
}

type NullableDiagnosticInsightType struct {
	value *DiagnosticInsightType
	isSet bool
}

func (v NullableDiagnosticInsightType) Get() *DiagnosticInsightType {
	return v.value
}

func (v *NullableDiagnosticInsightType) Set(val *DiagnosticInsightType) {
	v.value = val
	v.isSet = true
}

func (v NullableDiagnosticInsightType) IsSet() bool {
	return v.isSet
}

func (v *NullableDiagnosticInsightType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiagnosticInsightType(val *DiagnosticInsightType) *NullableDiagnosticInsightType {
	return &NullableDiagnosticInsightType{value: val, isSet: true}
}

func (v NullableDiagnosticInsightType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiagnosticInsightType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


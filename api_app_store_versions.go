/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AppStoreVersionsAPIService AppStoreVersionsAPI service
type AppStoreVersionsAPIService service

type ApiAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
	fieldsAgeRatingDeclarations *[]string
}

// the fields to include for returned resources of type ageRatingDeclarations
func (r ApiAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest) FieldsAgeRatingDeclarations(fieldsAgeRatingDeclarations []string) ApiAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest {
	r.fieldsAgeRatingDeclarations = &fieldsAgeRatingDeclarations
	return r
}

func (r ApiAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest) Execute() (*AgeRatingDeclarationWithoutIncludesResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsAgeRatingDeclarationGetToOneRelatedExecute(r)
}

/*
AppStoreVersionsAgeRatingDeclarationGetToOneRelated Method for AppStoreVersionsAgeRatingDeclarationGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest

Deprecated
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsAgeRatingDeclarationGetToOneRelated(ctx context.Context, id string) ApiAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest {
	return ApiAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AgeRatingDeclarationWithoutIncludesResponse
// Deprecated
func (a *AppStoreVersionsAPIService) AppStoreVersionsAgeRatingDeclarationGetToOneRelatedExecute(r ApiAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest) (*AgeRatingDeclarationWithoutIncludesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AgeRatingDeclarationWithoutIncludesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsAgeRatingDeclarationGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/ageRatingDeclaration"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAgeRatingDeclarations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ageRatingDeclarations]", r.fieldsAgeRatingDeclarations, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionsAlternativeDistributionPackageGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
	fieldsAlternativeDistributionPackages *[]string
	fieldsAlternativeDistributionPackageVersions *[]string
	include *[]string
	limitVersions *int32
}

// the fields to include for returned resources of type alternativeDistributionPackages
func (r ApiAppStoreVersionsAlternativeDistributionPackageGetToOneRelatedRequest) FieldsAlternativeDistributionPackages(fieldsAlternativeDistributionPackages []string) ApiAppStoreVersionsAlternativeDistributionPackageGetToOneRelatedRequest {
	r.fieldsAlternativeDistributionPackages = &fieldsAlternativeDistributionPackages
	return r
}

// the fields to include for returned resources of type alternativeDistributionPackageVersions
func (r ApiAppStoreVersionsAlternativeDistributionPackageGetToOneRelatedRequest) FieldsAlternativeDistributionPackageVersions(fieldsAlternativeDistributionPackageVersions []string) ApiAppStoreVersionsAlternativeDistributionPackageGetToOneRelatedRequest {
	r.fieldsAlternativeDistributionPackageVersions = &fieldsAlternativeDistributionPackageVersions
	return r
}

// comma-separated list of relationships to include
func (r ApiAppStoreVersionsAlternativeDistributionPackageGetToOneRelatedRequest) Include(include []string) ApiAppStoreVersionsAlternativeDistributionPackageGetToOneRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related versions returned (when they are included)
func (r ApiAppStoreVersionsAlternativeDistributionPackageGetToOneRelatedRequest) LimitVersions(limitVersions int32) ApiAppStoreVersionsAlternativeDistributionPackageGetToOneRelatedRequest {
	r.limitVersions = &limitVersions
	return r
}

func (r ApiAppStoreVersionsAlternativeDistributionPackageGetToOneRelatedRequest) Execute() (*AlternativeDistributionPackageResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedExecute(r)
}

/*
AppStoreVersionsAlternativeDistributionPackageGetToOneRelated Method for AppStoreVersionsAlternativeDistributionPackageGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsAlternativeDistributionPackageGetToOneRelatedRequest
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsAlternativeDistributionPackageGetToOneRelated(ctx context.Context, id string) ApiAppStoreVersionsAlternativeDistributionPackageGetToOneRelatedRequest {
	return ApiAppStoreVersionsAlternativeDistributionPackageGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AlternativeDistributionPackageResponse
func (a *AppStoreVersionsAPIService) AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedExecute(r ApiAppStoreVersionsAlternativeDistributionPackageGetToOneRelatedRequest) (*AlternativeDistributionPackageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlternativeDistributionPackageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsAlternativeDistributionPackageGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/alternativeDistributionPackage"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAlternativeDistributionPackages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[alternativeDistributionPackages]", r.fieldsAlternativeDistributionPackages, "form", "csv")
	}
	if r.fieldsAlternativeDistributionPackageVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[alternativeDistributionPackageVersions]", r.fieldsAlternativeDistributionPackageVersions, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[versions]", r.limitVersions, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
	fieldsAppClipDefaultExperiences *[]string
	fieldsAppClips *[]string
	fieldsAppStoreVersions *[]string
	fieldsAppClipDefaultExperienceLocalizations *[]string
	fieldsAppClipAppStoreReviewDetails *[]string
	include *[]string
	limitAppClipDefaultExperienceLocalizations *int32
}

// the fields to include for returned resources of type appClipDefaultExperiences
func (r ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest) FieldsAppClipDefaultExperiences(fieldsAppClipDefaultExperiences []string) ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest {
	r.fieldsAppClipDefaultExperiences = &fieldsAppClipDefaultExperiences
	return r
}

// the fields to include for returned resources of type appClips
func (r ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest) FieldsAppClips(fieldsAppClips []string) ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest {
	r.fieldsAppClips = &fieldsAppClips
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type appClipDefaultExperienceLocalizations
func (r ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest) FieldsAppClipDefaultExperienceLocalizations(fieldsAppClipDefaultExperienceLocalizations []string) ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest {
	r.fieldsAppClipDefaultExperienceLocalizations = &fieldsAppClipDefaultExperienceLocalizations
	return r
}

// the fields to include for returned resources of type appClipAppStoreReviewDetails
func (r ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest) FieldsAppClipAppStoreReviewDetails(fieldsAppClipAppStoreReviewDetails []string) ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest {
	r.fieldsAppClipAppStoreReviewDetails = &fieldsAppClipAppStoreReviewDetails
	return r
}

// comma-separated list of relationships to include
func (r ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest) Include(include []string) ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)
func (r ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest) LimitAppClipDefaultExperienceLocalizations(limitAppClipDefaultExperienceLocalizations int32) ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest {
	r.limitAppClipDefaultExperienceLocalizations = &limitAppClipDefaultExperienceLocalizations
	return r
}

func (r ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest) Execute() (*AppClipDefaultExperienceResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedExecute(r)
}

/*
AppStoreVersionsAppClipDefaultExperienceGetToOneRelated Method for AppStoreVersionsAppClipDefaultExperienceGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsAppClipDefaultExperienceGetToOneRelated(ctx context.Context, id string) ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest {
	return ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppClipDefaultExperienceResponse
func (a *AppStoreVersionsAPIService) AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedExecute(r ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest) (*AppClipDefaultExperienceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppClipDefaultExperienceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsAppClipDefaultExperienceGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/appClipDefaultExperience"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppClipDefaultExperiences != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipDefaultExperiences]", r.fieldsAppClipDefaultExperiences, "form", "csv")
	}
	if r.fieldsAppClips != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClips]", r.fieldsAppClips, "form", "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "form", "csv")
	}
	if r.fieldsAppClipDefaultExperienceLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipDefaultExperienceLocalizations]", r.fieldsAppClipDefaultExperienceLocalizations, "form", "csv")
	}
	if r.fieldsAppClipAppStoreReviewDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipAppStoreReviewDetails]", r.fieldsAppClipAppStoreReviewDetails, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitAppClipDefaultExperienceLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appClipDefaultExperienceLocalizations]", r.limitAppClipDefaultExperienceLocalizations, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
}

func (r ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRequest) Execute() (*AppStoreVersionAppClipDefaultExperienceLinkageResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipExecute(r)
}

/*
AppStoreVersionsAppClipDefaultExperienceGetToOneRelationship Method for AppStoreVersionsAppClipDefaultExperienceGetToOneRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRequest
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsAppClipDefaultExperienceGetToOneRelationship(ctx context.Context, id string) ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRequest {
	return ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionAppClipDefaultExperienceLinkageResponse
func (a *AppStoreVersionsAPIService) AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipExecute(r ApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRequest) (*AppStoreVersionAppClipDefaultExperienceLinkageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionAppClipDefaultExperienceLinkageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsAppClipDefaultExperienceGetToOneRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
	appStoreVersionAppClipDefaultExperienceLinkageRequest *AppStoreVersionAppClipDefaultExperienceLinkageRequest
}

// Related linkage
func (r ApiAppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest) AppStoreVersionAppClipDefaultExperienceLinkageRequest(appStoreVersionAppClipDefaultExperienceLinkageRequest AppStoreVersionAppClipDefaultExperienceLinkageRequest) ApiAppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest {
	r.appStoreVersionAppClipDefaultExperienceLinkageRequest = &appStoreVersionAppClipDefaultExperienceLinkageRequest
	return r
}

func (r ApiAppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipExecute(r)
}

/*
AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship Method for AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship(ctx context.Context, id string) ApiAppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest {
	return ApiAppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AppStoreVersionsAPIService) AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipExecute(r ApiAppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appStoreVersionAppClipDefaultExperienceLinkageRequest == nil {
		return nil, reportError("appStoreVersionAppClipDefaultExperienceLinkageRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appStoreVersionAppClipDefaultExperienceLinkageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
	fieldsAppStoreReviewDetails *[]string
	fieldsAppStoreVersions *[]string
	fieldsAppStoreReviewAttachments *[]string
	include *[]string
	limitAppStoreReviewAttachments *int32
}

// the fields to include for returned resources of type appStoreReviewDetails
func (r ApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest) FieldsAppStoreReviewDetails(fieldsAppStoreReviewDetails []string) ApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest {
	r.fieldsAppStoreReviewDetails = &fieldsAppStoreReviewDetails
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r ApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) ApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type appStoreReviewAttachments
func (r ApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest) FieldsAppStoreReviewAttachments(fieldsAppStoreReviewAttachments []string) ApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest {
	r.fieldsAppStoreReviewAttachments = &fieldsAppStoreReviewAttachments
	return r
}

// comma-separated list of relationships to include
func (r ApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest) Include(include []string) ApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related appStoreReviewAttachments returned (when they are included)
func (r ApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest) LimitAppStoreReviewAttachments(limitAppStoreReviewAttachments int32) ApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest {
	r.limitAppStoreReviewAttachments = &limitAppStoreReviewAttachments
	return r
}

func (r ApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest) Execute() (*AppStoreReviewDetailResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsAppStoreReviewDetailGetToOneRelatedExecute(r)
}

/*
AppStoreVersionsAppStoreReviewDetailGetToOneRelated Method for AppStoreVersionsAppStoreReviewDetailGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsAppStoreReviewDetailGetToOneRelated(ctx context.Context, id string) ApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest {
	return ApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreReviewDetailResponse
func (a *AppStoreVersionsAPIService) AppStoreVersionsAppStoreReviewDetailGetToOneRelatedExecute(r ApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest) (*AppStoreReviewDetailResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreReviewDetailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsAppStoreReviewDetailGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/appStoreReviewDetail"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppStoreReviewDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreReviewDetails]", r.fieldsAppStoreReviewDetails, "form", "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "form", "csv")
	}
	if r.fieldsAppStoreReviewAttachments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreReviewAttachments]", r.fieldsAppStoreReviewAttachments, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitAppStoreReviewAttachments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreReviewAttachments]", r.limitAppStoreReviewAttachments, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
	filterState *[]string
	fieldsAppStoreVersionExperiments *[]string
	fieldsAppStoreVersions *[]string
	fieldsAppStoreVersionExperimentTreatments *[]string
	limit *int32
	include *[]string
	limitAppStoreVersionExperimentTreatments *int32
}

// filter by attribute &#39;state&#39;
func (r ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest) FilterState(filterState []string) ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest {
	r.filterState = &filterState
	return r
}

// the fields to include for returned resources of type appStoreVersionExperiments
func (r ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest) FieldsAppStoreVersionExperiments(fieldsAppStoreVersionExperiments []string) ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionExperiments = &fieldsAppStoreVersionExperiments
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type appStoreVersionExperimentTreatments
func (r ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest) FieldsAppStoreVersionExperimentTreatments(fieldsAppStoreVersionExperimentTreatments []string) ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionExperimentTreatments = &fieldsAppStoreVersionExperimentTreatments
	return r
}

// maximum resources per page
func (r ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest) Limit(limit int32) ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest) Include(include []string) ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related appStoreVersionExperimentTreatments returned (when they are included)
func (r ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest) LimitAppStoreVersionExperimentTreatments(limitAppStoreVersionExperimentTreatments int32) ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest {
	r.limitAppStoreVersionExperimentTreatments = &limitAppStoreVersionExperimentTreatments
	return r
}

func (r ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest) Execute() (*AppStoreVersionExperimentsResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedExecute(r)
}

/*
AppStoreVersionsAppStoreVersionExperimentsGetToManyRelated Method for AppStoreVersionsAppStoreVersionExperimentsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest

Deprecated
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsAppStoreVersionExperimentsGetToManyRelated(ctx context.Context, id string) ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest {
	return ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionExperimentsResponse
// Deprecated
func (a *AppStoreVersionsAPIService) AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedExecute(r ApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest) (*AppStoreVersionExperimentsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionExperimentsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsAppStoreVersionExperimentsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/appStoreVersionExperiments"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[state]", r.filterState, "form", "csv")
	}
	if r.fieldsAppStoreVersionExperiments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperiments]", r.fieldsAppStoreVersionExperiments, "form", "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "form", "csv")
	}
	if r.fieldsAppStoreVersionExperimentTreatments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperimentTreatments]", r.fieldsAppStoreVersionExperimentTreatments, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitAppStoreVersionExperimentTreatments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreVersionExperimentTreatments]", r.limitAppStoreVersionExperimentTreatments, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
	filterState *[]string
	fieldsAppStoreVersionExperiments *[]string
	fieldsApps *[]string
	fieldsAppStoreVersions *[]string
	fieldsAppStoreVersionExperimentTreatments *[]string
	limit *int32
	include *[]string
	limitControlVersions *int32
	limitAppStoreVersionExperimentTreatments *int32
}

// filter by attribute &#39;state&#39;
func (r ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest) FilterState(filterState []string) ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest {
	r.filterState = &filterState
	return r
}

// the fields to include for returned resources of type appStoreVersionExperiments
func (r ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest) FieldsAppStoreVersionExperiments(fieldsAppStoreVersionExperiments []string) ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest {
	r.fieldsAppStoreVersionExperiments = &fieldsAppStoreVersionExperiments
	return r
}

// the fields to include for returned resources of type apps
func (r ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest) FieldsApps(fieldsApps []string) ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type appStoreVersionExperimentTreatments
func (r ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest) FieldsAppStoreVersionExperimentTreatments(fieldsAppStoreVersionExperimentTreatments []string) ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest {
	r.fieldsAppStoreVersionExperimentTreatments = &fieldsAppStoreVersionExperimentTreatments
	return r
}

// maximum resources per page
func (r ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest) Limit(limit int32) ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest) Include(include []string) ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related controlVersions returned (when they are included)
func (r ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest) LimitControlVersions(limitControlVersions int32) ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest {
	r.limitControlVersions = &limitControlVersions
	return r
}

// maximum number of related appStoreVersionExperimentTreatments returned (when they are included)
func (r ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest) LimitAppStoreVersionExperimentTreatments(limitAppStoreVersionExperimentTreatments int32) ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest {
	r.limitAppStoreVersionExperimentTreatments = &limitAppStoreVersionExperimentTreatments
	return r
}

func (r ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest) Execute() (*AppStoreVersionExperimentsV2Response, *http.Response, error) {
	return r.ApiService.AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedExecute(r)
}

/*
AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated Method for AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated(ctx context.Context, id string) ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest {
	return ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionExperimentsV2Response
func (a *AppStoreVersionsAPIService) AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedExecute(r ApiAppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRequest) (*AppStoreVersionExperimentsV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionExperimentsV2Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/appStoreVersionExperimentsV2"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[state]", r.filterState, "form", "csv")
	}
	if r.fieldsAppStoreVersionExperiments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperiments]", r.fieldsAppStoreVersionExperiments, "form", "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "form", "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "form", "csv")
	}
	if r.fieldsAppStoreVersionExperimentTreatments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperimentTreatments]", r.fieldsAppStoreVersionExperimentTreatments, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitControlVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[controlVersions]", r.limitControlVersions, "form", "")
	}
	if r.limitAppStoreVersionExperimentTreatments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreVersionExperimentTreatments]", r.limitAppStoreVersionExperimentTreatments, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
	filterLocale *[]string
	fieldsAppStoreVersionLocalizations *[]string
	fieldsAppStoreVersions *[]string
	fieldsAppScreenshotSets *[]string
	fieldsAppPreviewSets *[]string
	limit *int32
	include *[]string
	limitAppScreenshotSets *int32
	limitAppPreviewSets *int32
}

// filter by attribute &#39;locale&#39;
func (r ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest) FilterLocale(filterLocale []string) ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest {
	r.filterLocale = &filterLocale
	return r
}

// the fields to include for returned resources of type appStoreVersionLocalizations
func (r ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest) FieldsAppStoreVersionLocalizations(fieldsAppStoreVersionLocalizations []string) ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionLocalizations = &fieldsAppStoreVersionLocalizations
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type appScreenshotSets
func (r ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest) FieldsAppScreenshotSets(fieldsAppScreenshotSets []string) ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest {
	r.fieldsAppScreenshotSets = &fieldsAppScreenshotSets
	return r
}

// the fields to include for returned resources of type appPreviewSets
func (r ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest) FieldsAppPreviewSets(fieldsAppPreviewSets []string) ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest {
	r.fieldsAppPreviewSets = &fieldsAppPreviewSets
	return r
}

// maximum resources per page
func (r ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest) Limit(limit int32) ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest) Include(include []string) ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related appScreenshotSets returned (when they are included)
func (r ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest) LimitAppScreenshotSets(limitAppScreenshotSets int32) ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest {
	r.limitAppScreenshotSets = &limitAppScreenshotSets
	return r
}

// maximum number of related appPreviewSets returned (when they are included)
func (r ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest) LimitAppPreviewSets(limitAppPreviewSets int32) ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest {
	r.limitAppPreviewSets = &limitAppPreviewSets
	return r
}

func (r ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest) Execute() (*AppStoreVersionLocalizationsResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedExecute(r)
}

/*
AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated Method for AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(ctx context.Context, id string) ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest {
	return ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionLocalizationsResponse
func (a *AppStoreVersionsAPIService) AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedExecute(r ApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest) (*AppStoreVersionLocalizationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionLocalizationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/appStoreVersionLocalizations"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterLocale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[locale]", r.filterLocale, "form", "csv")
	}
	if r.fieldsAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionLocalizations]", r.fieldsAppStoreVersionLocalizations, "form", "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "form", "csv")
	}
	if r.fieldsAppScreenshotSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appScreenshotSets]", r.fieldsAppScreenshotSets, "form", "csv")
	}
	if r.fieldsAppPreviewSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appPreviewSets]", r.fieldsAppPreviewSets, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitAppScreenshotSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appScreenshotSets]", r.limitAppScreenshotSets, "form", "")
	}
	if r.limitAppPreviewSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appPreviewSets]", r.limitAppPreviewSets, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
	fieldsAppStoreVersionPhasedReleases *[]string
}

// the fields to include for returned resources of type appStoreVersionPhasedReleases
func (r ApiAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest) FieldsAppStoreVersionPhasedReleases(fieldsAppStoreVersionPhasedReleases []string) ApiAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest {
	r.fieldsAppStoreVersionPhasedReleases = &fieldsAppStoreVersionPhasedReleases
	return r
}

func (r ApiAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest) Execute() (*AppStoreVersionPhasedReleaseWithoutIncludesResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedExecute(r)
}

/*
AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated Method for AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(ctx context.Context, id string) ApiAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest {
	return ApiAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionPhasedReleaseWithoutIncludesResponse
func (a *AppStoreVersionsAPIService) AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedExecute(r ApiAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest) (*AppStoreVersionPhasedReleaseWithoutIncludesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionPhasedReleaseWithoutIncludesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppStoreVersionPhasedReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionPhasedReleases]", r.fieldsAppStoreVersionPhasedReleases, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
	fieldsAppStoreVersionSubmissions *[]string
	fieldsAppStoreVersions *[]string
	include *[]string
}

// the fields to include for returned resources of type appStoreVersionSubmissions
func (r ApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest) FieldsAppStoreVersionSubmissions(fieldsAppStoreVersionSubmissions []string) ApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest {
	r.fieldsAppStoreVersionSubmissions = &fieldsAppStoreVersionSubmissions
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r ApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) ApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// comma-separated list of relationships to include
func (r ApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest) Include(include []string) ApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest {
	r.include = &include
	return r
}

func (r ApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest) Execute() (*AppStoreVersionSubmissionResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedExecute(r)
}

/*
AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated Method for AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest

Deprecated
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated(ctx context.Context, id string) ApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest {
	return ApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionSubmissionResponse
// Deprecated
func (a *AppStoreVersionsAPIService) AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedExecute(r ApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest) (*AppStoreVersionSubmissionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionSubmissionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/appStoreVersionSubmission"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppStoreVersionSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionSubmissions]", r.fieldsAppStoreVersionSubmissions, "form", "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionsBuildGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
	fieldsBuilds *[]string
}

// the fields to include for returned resources of type builds
func (r ApiAppStoreVersionsBuildGetToOneRelatedRequest) FieldsBuilds(fieldsBuilds []string) ApiAppStoreVersionsBuildGetToOneRelatedRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

func (r ApiAppStoreVersionsBuildGetToOneRelatedRequest) Execute() (*BuildWithoutIncludesResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsBuildGetToOneRelatedExecute(r)
}

/*
AppStoreVersionsBuildGetToOneRelated Method for AppStoreVersionsBuildGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsBuildGetToOneRelatedRequest
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsBuildGetToOneRelated(ctx context.Context, id string) ApiAppStoreVersionsBuildGetToOneRelatedRequest {
	return ApiAppStoreVersionsBuildGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BuildWithoutIncludesResponse
func (a *AppStoreVersionsAPIService) AppStoreVersionsBuildGetToOneRelatedExecute(r ApiAppStoreVersionsBuildGetToOneRelatedRequest) (*BuildWithoutIncludesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BuildWithoutIncludesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsBuildGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/build"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionsBuildGetToOneRelationshipRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
}

func (r ApiAppStoreVersionsBuildGetToOneRelationshipRequest) Execute() (*AppStoreVersionBuildLinkageResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsBuildGetToOneRelationshipExecute(r)
}

/*
AppStoreVersionsBuildGetToOneRelationship Method for AppStoreVersionsBuildGetToOneRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsBuildGetToOneRelationshipRequest
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsBuildGetToOneRelationship(ctx context.Context, id string) ApiAppStoreVersionsBuildGetToOneRelationshipRequest {
	return ApiAppStoreVersionsBuildGetToOneRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionBuildLinkageResponse
func (a *AppStoreVersionsAPIService) AppStoreVersionsBuildGetToOneRelationshipExecute(r ApiAppStoreVersionsBuildGetToOneRelationshipRequest) (*AppStoreVersionBuildLinkageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionBuildLinkageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsBuildGetToOneRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/relationships/build"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionsBuildUpdateToOneRelationshipRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
	appStoreVersionBuildLinkageRequest *AppStoreVersionBuildLinkageRequest
}

// Related linkage
func (r ApiAppStoreVersionsBuildUpdateToOneRelationshipRequest) AppStoreVersionBuildLinkageRequest(appStoreVersionBuildLinkageRequest AppStoreVersionBuildLinkageRequest) ApiAppStoreVersionsBuildUpdateToOneRelationshipRequest {
	r.appStoreVersionBuildLinkageRequest = &appStoreVersionBuildLinkageRequest
	return r
}

func (r ApiAppStoreVersionsBuildUpdateToOneRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppStoreVersionsBuildUpdateToOneRelationshipExecute(r)
}

/*
AppStoreVersionsBuildUpdateToOneRelationship Method for AppStoreVersionsBuildUpdateToOneRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsBuildUpdateToOneRelationshipRequest
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsBuildUpdateToOneRelationship(ctx context.Context, id string) ApiAppStoreVersionsBuildUpdateToOneRelationshipRequest {
	return ApiAppStoreVersionsBuildUpdateToOneRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AppStoreVersionsAPIService) AppStoreVersionsBuildUpdateToOneRelationshipExecute(r ApiAppStoreVersionsBuildUpdateToOneRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsBuildUpdateToOneRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/relationships/build"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appStoreVersionBuildLinkageRequest == nil {
		return nil, reportError("appStoreVersionBuildLinkageRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appStoreVersionBuildLinkageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppStoreVersionsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	appStoreVersionCreateRequest *AppStoreVersionCreateRequest
}

// AppStoreVersion representation
func (r ApiAppStoreVersionsCreateInstanceRequest) AppStoreVersionCreateRequest(appStoreVersionCreateRequest AppStoreVersionCreateRequest) ApiAppStoreVersionsCreateInstanceRequest {
	r.appStoreVersionCreateRequest = &appStoreVersionCreateRequest
	return r
}

func (r ApiAppStoreVersionsCreateInstanceRequest) Execute() (*AppStoreVersionResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsCreateInstanceExecute(r)
}

/*
AppStoreVersionsCreateInstance Method for AppStoreVersionsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAppStoreVersionsCreateInstanceRequest
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsCreateInstance(ctx context.Context) ApiAppStoreVersionsCreateInstanceRequest {
	return ApiAppStoreVersionsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppStoreVersionResponse
func (a *AppStoreVersionsAPIService) AppStoreVersionsCreateInstanceExecute(r ApiAppStoreVersionsCreateInstanceRequest) (*AppStoreVersionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appStoreVersionCreateRequest == nil {
		return localVarReturnValue, nil, reportError("appStoreVersionCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appStoreVersionCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
	filterTerritory *[]string
	filterRating *[]string
	existsPublishedResponse *bool
	sort *[]string
	fieldsCustomerReviews *[]string
	fieldsCustomerReviewResponses *[]string
	limit *int32
	include *[]string
}

// filter by attribute &#39;territory&#39;
func (r ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) FilterTerritory(filterTerritory []string) ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
	r.filterTerritory = &filterTerritory
	return r
}

// filter by attribute &#39;rating&#39;
func (r ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) FilterRating(filterRating []string) ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
	r.filterRating = &filterRating
	return r
}

// filter by publishedResponse
func (r ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) ExistsPublishedResponse(existsPublishedResponse bool) ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
	r.existsPublishedResponse = &existsPublishedResponse
	return r
}

// comma-separated list of sort expressions; resources will be sorted as specified
func (r ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) Sort(sort []string) ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
	r.sort = &sort
	return r
}

// the fields to include for returned resources of type customerReviews
func (r ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) FieldsCustomerReviews(fieldsCustomerReviews []string) ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
	r.fieldsCustomerReviews = &fieldsCustomerReviews
	return r
}

// the fields to include for returned resources of type customerReviewResponses
func (r ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) FieldsCustomerReviewResponses(fieldsCustomerReviewResponses []string) ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
	r.fieldsCustomerReviewResponses = &fieldsCustomerReviewResponses
	return r
}

// maximum resources per page
func (r ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) Limit(limit int32) ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) Include(include []string) ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) Execute() (*CustomerReviewsResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsCustomerReviewsGetToManyRelatedExecute(r)
}

/*
AppStoreVersionsCustomerReviewsGetToManyRelated Method for AppStoreVersionsCustomerReviewsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsCustomerReviewsGetToManyRelated(ctx context.Context, id string) ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
	return ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomerReviewsResponse
func (a *AppStoreVersionsAPIService) AppStoreVersionsCustomerReviewsGetToManyRelatedExecute(r ApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) (*CustomerReviewsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomerReviewsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsCustomerReviewsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/customerReviews"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterTerritory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[territory]", r.filterTerritory, "form", "csv")
	}
	if r.filterRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[rating]", r.filterRating, "form", "csv")
	}
	if r.existsPublishedResponse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exists[publishedResponse]", r.existsPublishedResponse, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.fieldsCustomerReviews != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[customerReviews]", r.fieldsCustomerReviews, "form", "csv")
	}
	if r.fieldsCustomerReviewResponses != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[customerReviewResponses]", r.fieldsCustomerReviewResponses, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionsDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
}

func (r ApiAppStoreVersionsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppStoreVersionsDeleteInstanceExecute(r)
}

/*
AppStoreVersionsDeleteInstance Method for AppStoreVersionsDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsDeleteInstanceRequest
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsDeleteInstance(ctx context.Context, id string) ApiAppStoreVersionsDeleteInstanceRequest {
	return ApiAppStoreVersionsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AppStoreVersionsAPIService) AppStoreVersionsDeleteInstanceExecute(r ApiAppStoreVersionsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppStoreVersionsGameCenterAppVersionGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
	fieldsGameCenterAppVersions *[]string
	fieldsAppStoreVersions *[]string
	include *[]string
	limitCompatibilityVersions *int32
}

// the fields to include for returned resources of type gameCenterAppVersions
func (r ApiAppStoreVersionsGameCenterAppVersionGetToOneRelatedRequest) FieldsGameCenterAppVersions(fieldsGameCenterAppVersions []string) ApiAppStoreVersionsGameCenterAppVersionGetToOneRelatedRequest {
	r.fieldsGameCenterAppVersions = &fieldsGameCenterAppVersions
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r ApiAppStoreVersionsGameCenterAppVersionGetToOneRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) ApiAppStoreVersionsGameCenterAppVersionGetToOneRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// comma-separated list of relationships to include
func (r ApiAppStoreVersionsGameCenterAppVersionGetToOneRelatedRequest) Include(include []string) ApiAppStoreVersionsGameCenterAppVersionGetToOneRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related compatibilityVersions returned (when they are included)
func (r ApiAppStoreVersionsGameCenterAppVersionGetToOneRelatedRequest) LimitCompatibilityVersions(limitCompatibilityVersions int32) ApiAppStoreVersionsGameCenterAppVersionGetToOneRelatedRequest {
	r.limitCompatibilityVersions = &limitCompatibilityVersions
	return r
}

func (r ApiAppStoreVersionsGameCenterAppVersionGetToOneRelatedRequest) Execute() (*GameCenterAppVersionResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsGameCenterAppVersionGetToOneRelatedExecute(r)
}

/*
AppStoreVersionsGameCenterAppVersionGetToOneRelated Method for AppStoreVersionsGameCenterAppVersionGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsGameCenterAppVersionGetToOneRelatedRequest
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsGameCenterAppVersionGetToOneRelated(ctx context.Context, id string) ApiAppStoreVersionsGameCenterAppVersionGetToOneRelatedRequest {
	return ApiAppStoreVersionsGameCenterAppVersionGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterAppVersionResponse
func (a *AppStoreVersionsAPIService) AppStoreVersionsGameCenterAppVersionGetToOneRelatedExecute(r ApiAppStoreVersionsGameCenterAppVersionGetToOneRelatedRequest) (*GameCenterAppVersionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterAppVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsGameCenterAppVersionGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/gameCenterAppVersion"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterAppVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAppVersions]", r.fieldsGameCenterAppVersions, "form", "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitCompatibilityVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[compatibilityVersions]", r.limitCompatibilityVersions, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionsGetInstanceRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
	fieldsAppStoreVersions *[]string
	fieldsAgeRatingDeclarations *[]string
	fieldsAppStoreVersionLocalizations *[]string
	fieldsBuilds *[]string
	fieldsAppStoreVersionPhasedReleases *[]string
	fieldsGameCenterAppVersions *[]string
	fieldsRoutingAppCoverages *[]string
	fieldsAppStoreReviewDetails *[]string
	fieldsAppStoreVersionSubmissions *[]string
	fieldsAppClipDefaultExperiences *[]string
	fieldsAppStoreVersionExperiments *[]string
	fieldsAlternativeDistributionPackages *[]string
	include *[]string
	limitAppStoreVersionExperiments *int32
	limitAppStoreVersionExperimentsV2 *int32
	limitAppStoreVersionLocalizations *int32
}

// the fields to include for returned resources of type appStoreVersions
func (r ApiAppStoreVersionsGetInstanceRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) ApiAppStoreVersionsGetInstanceRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type ageRatingDeclarations
// Deprecated
func (r ApiAppStoreVersionsGetInstanceRequest) FieldsAgeRatingDeclarations(fieldsAgeRatingDeclarations []string) ApiAppStoreVersionsGetInstanceRequest {
	r.fieldsAgeRatingDeclarations = &fieldsAgeRatingDeclarations
	return r
}

// the fields to include for returned resources of type appStoreVersionLocalizations
func (r ApiAppStoreVersionsGetInstanceRequest) FieldsAppStoreVersionLocalizations(fieldsAppStoreVersionLocalizations []string) ApiAppStoreVersionsGetInstanceRequest {
	r.fieldsAppStoreVersionLocalizations = &fieldsAppStoreVersionLocalizations
	return r
}

// the fields to include for returned resources of type builds
func (r ApiAppStoreVersionsGetInstanceRequest) FieldsBuilds(fieldsBuilds []string) ApiAppStoreVersionsGetInstanceRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// the fields to include for returned resources of type appStoreVersionPhasedReleases
func (r ApiAppStoreVersionsGetInstanceRequest) FieldsAppStoreVersionPhasedReleases(fieldsAppStoreVersionPhasedReleases []string) ApiAppStoreVersionsGetInstanceRequest {
	r.fieldsAppStoreVersionPhasedReleases = &fieldsAppStoreVersionPhasedReleases
	return r
}

// the fields to include for returned resources of type gameCenterAppVersions
func (r ApiAppStoreVersionsGetInstanceRequest) FieldsGameCenterAppVersions(fieldsGameCenterAppVersions []string) ApiAppStoreVersionsGetInstanceRequest {
	r.fieldsGameCenterAppVersions = &fieldsGameCenterAppVersions
	return r
}

// the fields to include for returned resources of type routingAppCoverages
func (r ApiAppStoreVersionsGetInstanceRequest) FieldsRoutingAppCoverages(fieldsRoutingAppCoverages []string) ApiAppStoreVersionsGetInstanceRequest {
	r.fieldsRoutingAppCoverages = &fieldsRoutingAppCoverages
	return r
}

// the fields to include for returned resources of type appStoreReviewDetails
func (r ApiAppStoreVersionsGetInstanceRequest) FieldsAppStoreReviewDetails(fieldsAppStoreReviewDetails []string) ApiAppStoreVersionsGetInstanceRequest {
	r.fieldsAppStoreReviewDetails = &fieldsAppStoreReviewDetails
	return r
}

// the fields to include for returned resources of type appStoreVersionSubmissions
// Deprecated
func (r ApiAppStoreVersionsGetInstanceRequest) FieldsAppStoreVersionSubmissions(fieldsAppStoreVersionSubmissions []string) ApiAppStoreVersionsGetInstanceRequest {
	r.fieldsAppStoreVersionSubmissions = &fieldsAppStoreVersionSubmissions
	return r
}

// the fields to include for returned resources of type appClipDefaultExperiences
func (r ApiAppStoreVersionsGetInstanceRequest) FieldsAppClipDefaultExperiences(fieldsAppClipDefaultExperiences []string) ApiAppStoreVersionsGetInstanceRequest {
	r.fieldsAppClipDefaultExperiences = &fieldsAppClipDefaultExperiences
	return r
}

// the fields to include for returned resources of type appStoreVersionExperiments
func (r ApiAppStoreVersionsGetInstanceRequest) FieldsAppStoreVersionExperiments(fieldsAppStoreVersionExperiments []string) ApiAppStoreVersionsGetInstanceRequest {
	r.fieldsAppStoreVersionExperiments = &fieldsAppStoreVersionExperiments
	return r
}

// the fields to include for returned resources of type alternativeDistributionPackages
func (r ApiAppStoreVersionsGetInstanceRequest) FieldsAlternativeDistributionPackages(fieldsAlternativeDistributionPackages []string) ApiAppStoreVersionsGetInstanceRequest {
	r.fieldsAlternativeDistributionPackages = &fieldsAlternativeDistributionPackages
	return r
}

// comma-separated list of relationships to include
func (r ApiAppStoreVersionsGetInstanceRequest) Include(include []string) ApiAppStoreVersionsGetInstanceRequest {
	r.include = &include
	return r
}

// maximum number of related appStoreVersionExperiments returned (when they are included)
// Deprecated
func (r ApiAppStoreVersionsGetInstanceRequest) LimitAppStoreVersionExperiments(limitAppStoreVersionExperiments int32) ApiAppStoreVersionsGetInstanceRequest {
	r.limitAppStoreVersionExperiments = &limitAppStoreVersionExperiments
	return r
}

// maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
func (r ApiAppStoreVersionsGetInstanceRequest) LimitAppStoreVersionExperimentsV2(limitAppStoreVersionExperimentsV2 int32) ApiAppStoreVersionsGetInstanceRequest {
	r.limitAppStoreVersionExperimentsV2 = &limitAppStoreVersionExperimentsV2
	return r
}

// maximum number of related appStoreVersionLocalizations returned (when they are included)
func (r ApiAppStoreVersionsGetInstanceRequest) LimitAppStoreVersionLocalizations(limitAppStoreVersionLocalizations int32) ApiAppStoreVersionsGetInstanceRequest {
	r.limitAppStoreVersionLocalizations = &limitAppStoreVersionLocalizations
	return r
}

func (r ApiAppStoreVersionsGetInstanceRequest) Execute() (*AppStoreVersionResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsGetInstanceExecute(r)
}

/*
AppStoreVersionsGetInstance Method for AppStoreVersionsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsGetInstanceRequest
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsGetInstance(ctx context.Context, id string) ApiAppStoreVersionsGetInstanceRequest {
	return ApiAppStoreVersionsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionResponse
func (a *AppStoreVersionsAPIService) AppStoreVersionsGetInstanceExecute(r ApiAppStoreVersionsGetInstanceRequest) (*AppStoreVersionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "form", "csv")
	}
	if r.fieldsAgeRatingDeclarations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ageRatingDeclarations]", r.fieldsAgeRatingDeclarations, "form", "csv")
	}
	if r.fieldsAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionLocalizations]", r.fieldsAppStoreVersionLocalizations, "form", "csv")
	}
	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "form", "csv")
	}
	if r.fieldsAppStoreVersionPhasedReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionPhasedReleases]", r.fieldsAppStoreVersionPhasedReleases, "form", "csv")
	}
	if r.fieldsGameCenterAppVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAppVersions]", r.fieldsGameCenterAppVersions, "form", "csv")
	}
	if r.fieldsRoutingAppCoverages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[routingAppCoverages]", r.fieldsRoutingAppCoverages, "form", "csv")
	}
	if r.fieldsAppStoreReviewDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreReviewDetails]", r.fieldsAppStoreReviewDetails, "form", "csv")
	}
	if r.fieldsAppStoreVersionSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionSubmissions]", r.fieldsAppStoreVersionSubmissions, "form", "csv")
	}
	if r.fieldsAppClipDefaultExperiences != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipDefaultExperiences]", r.fieldsAppClipDefaultExperiences, "form", "csv")
	}
	if r.fieldsAppStoreVersionExperiments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperiments]", r.fieldsAppStoreVersionExperiments, "form", "csv")
	}
	if r.fieldsAlternativeDistributionPackages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[alternativeDistributionPackages]", r.fieldsAlternativeDistributionPackages, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitAppStoreVersionExperiments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreVersionExperiments]", r.limitAppStoreVersionExperiments, "form", "")
	}
	if r.limitAppStoreVersionExperimentsV2 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreVersionExperimentsV2]", r.limitAppStoreVersionExperimentsV2, "form", "")
	}
	if r.limitAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreVersionLocalizations]", r.limitAppStoreVersionLocalizations, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
	fieldsRoutingAppCoverages *[]string
}

// the fields to include for returned resources of type routingAppCoverages
func (r ApiAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest) FieldsRoutingAppCoverages(fieldsRoutingAppCoverages []string) ApiAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest {
	r.fieldsRoutingAppCoverages = &fieldsRoutingAppCoverages
	return r
}

func (r ApiAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest) Execute() (*RoutingAppCoverageWithoutIncludesResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsRoutingAppCoverageGetToOneRelatedExecute(r)
}

/*
AppStoreVersionsRoutingAppCoverageGetToOneRelated Method for AppStoreVersionsRoutingAppCoverageGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsRoutingAppCoverageGetToOneRelated(ctx context.Context, id string) ApiAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest {
	return ApiAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RoutingAppCoverageWithoutIncludesResponse
func (a *AppStoreVersionsAPIService) AppStoreVersionsRoutingAppCoverageGetToOneRelatedExecute(r ApiAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest) (*RoutingAppCoverageWithoutIncludesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RoutingAppCoverageWithoutIncludesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsRoutingAppCoverageGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/routingAppCoverage"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsRoutingAppCoverages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[routingAppCoverages]", r.fieldsRoutingAppCoverages, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsAPIService
	id string
	appStoreVersionUpdateRequest *AppStoreVersionUpdateRequest
}

// AppStoreVersion representation
func (r ApiAppStoreVersionsUpdateInstanceRequest) AppStoreVersionUpdateRequest(appStoreVersionUpdateRequest AppStoreVersionUpdateRequest) ApiAppStoreVersionsUpdateInstanceRequest {
	r.appStoreVersionUpdateRequest = &appStoreVersionUpdateRequest
	return r
}

func (r ApiAppStoreVersionsUpdateInstanceRequest) Execute() (*AppStoreVersionResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsUpdateInstanceExecute(r)
}

/*
AppStoreVersionsUpdateInstance Method for AppStoreVersionsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppStoreVersionsUpdateInstanceRequest
*/
func (a *AppStoreVersionsAPIService) AppStoreVersionsUpdateInstance(ctx context.Context, id string) ApiAppStoreVersionsUpdateInstanceRequest {
	return ApiAppStoreVersionsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionResponse
func (a *AppStoreVersionsAPIService) AppStoreVersionsUpdateInstanceExecute(r ApiAppStoreVersionsUpdateInstanceRequest) (*AppStoreVersionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsAPIService.AppStoreVersionsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appStoreVersionUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("appStoreVersionUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appStoreVersionUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

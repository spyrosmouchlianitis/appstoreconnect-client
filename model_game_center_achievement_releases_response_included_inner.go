/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// GameCenterAchievementReleasesResponseIncludedInner - struct for GameCenterAchievementReleasesResponseIncludedInner
type GameCenterAchievementReleasesResponseIncludedInner struct {
	GameCenterAchievement *GameCenterAchievement
	GameCenterDetail *GameCenterDetail
}

// GameCenterAchievementAsGameCenterAchievementReleasesResponseIncludedInner is a convenience function that returns GameCenterAchievement wrapped in GameCenterAchievementReleasesResponseIncludedInner
func GameCenterAchievementAsGameCenterAchievementReleasesResponseIncludedInner(v *GameCenterAchievement) GameCenterAchievementReleasesResponseIncludedInner {
	return GameCenterAchievementReleasesResponseIncludedInner{
		GameCenterAchievement: v,
	}
}

// GameCenterDetailAsGameCenterAchievementReleasesResponseIncludedInner is a convenience function that returns GameCenterDetail wrapped in GameCenterAchievementReleasesResponseIncludedInner
func GameCenterDetailAsGameCenterAchievementReleasesResponseIncludedInner(v *GameCenterDetail) GameCenterAchievementReleasesResponseIncludedInner {
	return GameCenterAchievementReleasesResponseIncludedInner{
		GameCenterDetail: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GameCenterAchievementReleasesResponseIncludedInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GameCenterAchievement
	err = newStrictDecoder(data).Decode(&dst.GameCenterAchievement)
	if err == nil {
		jsonGameCenterAchievement, _ := json.Marshal(dst.GameCenterAchievement)
		if string(jsonGameCenterAchievement) == "{}" { // empty struct
			dst.GameCenterAchievement = nil
		} else {
			if err = validator.Validate(dst.GameCenterAchievement); err != nil {
				dst.GameCenterAchievement = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterAchievement = nil
	}

	// try to unmarshal data into GameCenterDetail
	err = newStrictDecoder(data).Decode(&dst.GameCenterDetail)
	if err == nil {
		jsonGameCenterDetail, _ := json.Marshal(dst.GameCenterDetail)
		if string(jsonGameCenterDetail) == "{}" { // empty struct
			dst.GameCenterDetail = nil
		} else {
			if err = validator.Validate(dst.GameCenterDetail); err != nil {
				dst.GameCenterDetail = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterDetail = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GameCenterAchievement = nil
		dst.GameCenterDetail = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GameCenterAchievementReleasesResponseIncludedInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GameCenterAchievementReleasesResponseIncludedInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GameCenterAchievementReleasesResponseIncludedInner) MarshalJSON() ([]byte, error) {
	if src.GameCenterAchievement != nil {
		return json.Marshal(&src.GameCenterAchievement)
	}

	if src.GameCenterDetail != nil {
		return json.Marshal(&src.GameCenterDetail)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GameCenterAchievementReleasesResponseIncludedInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GameCenterAchievement != nil {
		return obj.GameCenterAchievement
	}

	if obj.GameCenterDetail != nil {
		return obj.GameCenterDetail
	}

	// all schemas are nil
	return nil
}

type NullableGameCenterAchievementReleasesResponseIncludedInner struct {
	value *GameCenterAchievementReleasesResponseIncludedInner
	isSet bool
}

func (v NullableGameCenterAchievementReleasesResponseIncludedInner) Get() *GameCenterAchievementReleasesResponseIncludedInner {
	return v.value
}

func (v *NullableGameCenterAchievementReleasesResponseIncludedInner) Set(val *GameCenterAchievementReleasesResponseIncludedInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGameCenterAchievementReleasesResponseIncludedInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGameCenterAchievementReleasesResponseIncludedInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGameCenterAchievementReleasesResponseIncludedInner(val *GameCenterAchievementReleasesResponseIncludedInner) *NullableGameCenterAchievementReleasesResponseIncludedInner {
	return &NullableGameCenterAchievementReleasesResponseIncludedInner{value: val, isSet: true}
}

func (v NullableGameCenterAchievementReleasesResponseIncludedInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGameCenterAchievementReleasesResponseIncludedInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CiWorkflowCreateRequestData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CiWorkflowCreateRequestData{}

// CiWorkflowCreateRequestData struct for CiWorkflowCreateRequestData
type CiWorkflowCreateRequestData struct {
	Type string `json:"type"`
	Attributes CiWorkflowCreateRequestDataAttributes `json:"attributes"`
	Relationships CiWorkflowCreateRequestDataRelationships `json:"relationships"`
}

type _CiWorkflowCreateRequestData CiWorkflowCreateRequestData

// NewCiWorkflowCreateRequestData instantiates a new CiWorkflowCreateRequestData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCiWorkflowCreateRequestData(type_ string, attributes CiWorkflowCreateRequestDataAttributes, relationships CiWorkflowCreateRequestDataRelationships) *CiWorkflowCreateRequestData {
	this := CiWorkflowCreateRequestData{}
	this.Type = type_
	this.Attributes = attributes
	this.Relationships = relationships
	return &this
}

// NewCiWorkflowCreateRequestDataWithDefaults instantiates a new CiWorkflowCreateRequestData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCiWorkflowCreateRequestDataWithDefaults() *CiWorkflowCreateRequestData {
	this := CiWorkflowCreateRequestData{}
	return &this
}

// GetType returns the Type field value
func (o *CiWorkflowCreateRequestData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CiWorkflowCreateRequestData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CiWorkflowCreateRequestData) SetType(v string) {
	o.Type = v
}

// GetAttributes returns the Attributes field value
func (o *CiWorkflowCreateRequestData) GetAttributes() CiWorkflowCreateRequestDataAttributes {
	if o == nil {
		var ret CiWorkflowCreateRequestDataAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *CiWorkflowCreateRequestData) GetAttributesOk() (*CiWorkflowCreateRequestDataAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *CiWorkflowCreateRequestData) SetAttributes(v CiWorkflowCreateRequestDataAttributes) {
	o.Attributes = v
}

// GetRelationships returns the Relationships field value
func (o *CiWorkflowCreateRequestData) GetRelationships() CiWorkflowCreateRequestDataRelationships {
	if o == nil {
		var ret CiWorkflowCreateRequestDataRelationships
		return ret
	}

	return o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value
// and a boolean to check if the value has been set.
func (o *CiWorkflowCreateRequestData) GetRelationshipsOk() (*CiWorkflowCreateRequestDataRelationships, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Relationships, true
}

// SetRelationships sets field value
func (o *CiWorkflowCreateRequestData) SetRelationships(v CiWorkflowCreateRequestDataRelationships) {
	o.Relationships = v
}

func (o CiWorkflowCreateRequestData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CiWorkflowCreateRequestData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["attributes"] = o.Attributes
	toSerialize["relationships"] = o.Relationships
	return toSerialize, nil
}

func (o *CiWorkflowCreateRequestData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"attributes",
		"relationships",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCiWorkflowCreateRequestData := _CiWorkflowCreateRequestData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCiWorkflowCreateRequestData)

	if err != nil {
		return err
	}

	*o = CiWorkflowCreateRequestData(varCiWorkflowCreateRequestData)

	return err
}

type NullableCiWorkflowCreateRequestData struct {
	value *CiWorkflowCreateRequestData
	isSet bool
}

func (v NullableCiWorkflowCreateRequestData) Get() *CiWorkflowCreateRequestData {
	return v.value
}

func (v *NullableCiWorkflowCreateRequestData) Set(val *CiWorkflowCreateRequestData) {
	v.value = val
	v.isSet = true
}

func (v NullableCiWorkflowCreateRequestData) IsSet() bool {
	return v.isSet
}

func (v *NullableCiWorkflowCreateRequestData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiWorkflowCreateRequestData(val *CiWorkflowCreateRequestData) *NullableCiWorkflowCreateRequestData {
	return &NullableCiWorkflowCreateRequestData{value: val, isSet: true}
}

func (v NullableCiWorkflowCreateRequestData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiWorkflowCreateRequestData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



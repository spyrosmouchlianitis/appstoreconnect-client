/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SubscriptionOfferCodesAPIService SubscriptionOfferCodesAPI service
type SubscriptionOfferCodesAPIService service

type ApiSubscriptionOfferCodesCreateInstanceRequest struct {
	ctx context.Context
	ApiService *SubscriptionOfferCodesAPIService
	subscriptionOfferCodeCreateRequest *SubscriptionOfferCodeCreateRequest
}

// SubscriptionOfferCode representation
func (r ApiSubscriptionOfferCodesCreateInstanceRequest) SubscriptionOfferCodeCreateRequest(subscriptionOfferCodeCreateRequest SubscriptionOfferCodeCreateRequest) ApiSubscriptionOfferCodesCreateInstanceRequest {
	r.subscriptionOfferCodeCreateRequest = &subscriptionOfferCodeCreateRequest
	return r
}

func (r ApiSubscriptionOfferCodesCreateInstanceRequest) Execute() (*SubscriptionOfferCodeResponse, *http.Response, error) {
	return r.ApiService.SubscriptionOfferCodesCreateInstanceExecute(r)
}

/*
SubscriptionOfferCodesCreateInstance Method for SubscriptionOfferCodesCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSubscriptionOfferCodesCreateInstanceRequest
*/
func (a *SubscriptionOfferCodesAPIService) SubscriptionOfferCodesCreateInstance(ctx context.Context) ApiSubscriptionOfferCodesCreateInstanceRequest {
	return ApiSubscriptionOfferCodesCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SubscriptionOfferCodeResponse
func (a *SubscriptionOfferCodesAPIService) SubscriptionOfferCodesCreateInstanceExecute(r ApiSubscriptionOfferCodesCreateInstanceRequest) (*SubscriptionOfferCodeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionOfferCodeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionOfferCodesAPIService.SubscriptionOfferCodesCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionOfferCodes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subscriptionOfferCodeCreateRequest == nil {
		return localVarReturnValue, nil, reportError("subscriptionOfferCodeCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.subscriptionOfferCodeCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *SubscriptionOfferCodesAPIService
	id string
	fieldsSubscriptionOfferCodeCustomCodes *[]string
	fieldsSubscriptionOfferCodes *[]string
	limit *int32
	include *[]string
}

// the fields to include for returned resources of type subscriptionOfferCodeCustomCodes
func (r ApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest) FieldsSubscriptionOfferCodeCustomCodes(fieldsSubscriptionOfferCodeCustomCodes []string) ApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest {
	r.fieldsSubscriptionOfferCodeCustomCodes = &fieldsSubscriptionOfferCodeCustomCodes
	return r
}

// the fields to include for returned resources of type subscriptionOfferCodes
func (r ApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest) FieldsSubscriptionOfferCodes(fieldsSubscriptionOfferCodes []string) ApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest {
	r.fieldsSubscriptionOfferCodes = &fieldsSubscriptionOfferCodes
	return r
}

// maximum resources per page
func (r ApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest) Limit(limit int32) ApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest) Include(include []string) ApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest) Execute() (*SubscriptionOfferCodeCustomCodesResponse, *http.Response, error) {
	return r.ApiService.SubscriptionOfferCodesCustomCodesGetToManyRelatedExecute(r)
}

/*
SubscriptionOfferCodesCustomCodesGetToManyRelated Method for SubscriptionOfferCodesCustomCodesGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest
*/
func (a *SubscriptionOfferCodesAPIService) SubscriptionOfferCodesCustomCodesGetToManyRelated(ctx context.Context, id string) ApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest {
	return ApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubscriptionOfferCodeCustomCodesResponse
func (a *SubscriptionOfferCodesAPIService) SubscriptionOfferCodesCustomCodesGetToManyRelatedExecute(r ApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest) (*SubscriptionOfferCodeCustomCodesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionOfferCodeCustomCodesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionOfferCodesAPIService.SubscriptionOfferCodesCustomCodesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionOfferCodes/{id}/customCodes"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsSubscriptionOfferCodeCustomCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodeCustomCodes]", r.fieldsSubscriptionOfferCodeCustomCodes, "form", "csv")
	}
	if r.fieldsSubscriptionOfferCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodes]", r.fieldsSubscriptionOfferCodes, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscriptionOfferCodesGetInstanceRequest struct {
	ctx context.Context
	ApiService *SubscriptionOfferCodesAPIService
	id string
	fieldsSubscriptionOfferCodes *[]string
	fieldsSubscriptionOfferCodeOneTimeUseCodes *[]string
	fieldsSubscriptionOfferCodeCustomCodes *[]string
	fieldsSubscriptionOfferCodePrices *[]string
	include *[]string
	limitCustomCodes *int32
	limitOneTimeUseCodes *int32
	limitPrices *int32
}

// the fields to include for returned resources of type subscriptionOfferCodes
func (r ApiSubscriptionOfferCodesGetInstanceRequest) FieldsSubscriptionOfferCodes(fieldsSubscriptionOfferCodes []string) ApiSubscriptionOfferCodesGetInstanceRequest {
	r.fieldsSubscriptionOfferCodes = &fieldsSubscriptionOfferCodes
	return r
}

// the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes
func (r ApiSubscriptionOfferCodesGetInstanceRequest) FieldsSubscriptionOfferCodeOneTimeUseCodes(fieldsSubscriptionOfferCodeOneTimeUseCodes []string) ApiSubscriptionOfferCodesGetInstanceRequest {
	r.fieldsSubscriptionOfferCodeOneTimeUseCodes = &fieldsSubscriptionOfferCodeOneTimeUseCodes
	return r
}

// the fields to include for returned resources of type subscriptionOfferCodeCustomCodes
func (r ApiSubscriptionOfferCodesGetInstanceRequest) FieldsSubscriptionOfferCodeCustomCodes(fieldsSubscriptionOfferCodeCustomCodes []string) ApiSubscriptionOfferCodesGetInstanceRequest {
	r.fieldsSubscriptionOfferCodeCustomCodes = &fieldsSubscriptionOfferCodeCustomCodes
	return r
}

// the fields to include for returned resources of type subscriptionOfferCodePrices
func (r ApiSubscriptionOfferCodesGetInstanceRequest) FieldsSubscriptionOfferCodePrices(fieldsSubscriptionOfferCodePrices []string) ApiSubscriptionOfferCodesGetInstanceRequest {
	r.fieldsSubscriptionOfferCodePrices = &fieldsSubscriptionOfferCodePrices
	return r
}

// comma-separated list of relationships to include
func (r ApiSubscriptionOfferCodesGetInstanceRequest) Include(include []string) ApiSubscriptionOfferCodesGetInstanceRequest {
	r.include = &include
	return r
}

// maximum number of related customCodes returned (when they are included)
func (r ApiSubscriptionOfferCodesGetInstanceRequest) LimitCustomCodes(limitCustomCodes int32) ApiSubscriptionOfferCodesGetInstanceRequest {
	r.limitCustomCodes = &limitCustomCodes
	return r
}

// maximum number of related oneTimeUseCodes returned (when they are included)
func (r ApiSubscriptionOfferCodesGetInstanceRequest) LimitOneTimeUseCodes(limitOneTimeUseCodes int32) ApiSubscriptionOfferCodesGetInstanceRequest {
	r.limitOneTimeUseCodes = &limitOneTimeUseCodes
	return r
}

// maximum number of related prices returned (when they are included)
func (r ApiSubscriptionOfferCodesGetInstanceRequest) LimitPrices(limitPrices int32) ApiSubscriptionOfferCodesGetInstanceRequest {
	r.limitPrices = &limitPrices
	return r
}

func (r ApiSubscriptionOfferCodesGetInstanceRequest) Execute() (*SubscriptionOfferCodeResponse, *http.Response, error) {
	return r.ApiService.SubscriptionOfferCodesGetInstanceExecute(r)
}

/*
SubscriptionOfferCodesGetInstance Method for SubscriptionOfferCodesGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiSubscriptionOfferCodesGetInstanceRequest
*/
func (a *SubscriptionOfferCodesAPIService) SubscriptionOfferCodesGetInstance(ctx context.Context, id string) ApiSubscriptionOfferCodesGetInstanceRequest {
	return ApiSubscriptionOfferCodesGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubscriptionOfferCodeResponse
func (a *SubscriptionOfferCodesAPIService) SubscriptionOfferCodesGetInstanceExecute(r ApiSubscriptionOfferCodesGetInstanceRequest) (*SubscriptionOfferCodeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionOfferCodeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionOfferCodesAPIService.SubscriptionOfferCodesGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionOfferCodes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsSubscriptionOfferCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodes]", r.fieldsSubscriptionOfferCodes, "form", "csv")
	}
	if r.fieldsSubscriptionOfferCodeOneTimeUseCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodeOneTimeUseCodes]", r.fieldsSubscriptionOfferCodeOneTimeUseCodes, "form", "csv")
	}
	if r.fieldsSubscriptionOfferCodeCustomCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodeCustomCodes]", r.fieldsSubscriptionOfferCodeCustomCodes, "form", "csv")
	}
	if r.fieldsSubscriptionOfferCodePrices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodePrices]", r.fieldsSubscriptionOfferCodePrices, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitCustomCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[customCodes]", r.limitCustomCodes, "form", "")
	}
	if r.limitOneTimeUseCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[oneTimeUseCodes]", r.limitOneTimeUseCodes, "form", "")
	}
	if r.limitPrices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[prices]", r.limitPrices, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *SubscriptionOfferCodesAPIService
	id string
	fieldsSubscriptionOfferCodeOneTimeUseCodes *[]string
	fieldsSubscriptionOfferCodes *[]string
	limit *int32
	include *[]string
}

// the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes
func (r ApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest) FieldsSubscriptionOfferCodeOneTimeUseCodes(fieldsSubscriptionOfferCodeOneTimeUseCodes []string) ApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest {
	r.fieldsSubscriptionOfferCodeOneTimeUseCodes = &fieldsSubscriptionOfferCodeOneTimeUseCodes
	return r
}

// the fields to include for returned resources of type subscriptionOfferCodes
func (r ApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest) FieldsSubscriptionOfferCodes(fieldsSubscriptionOfferCodes []string) ApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest {
	r.fieldsSubscriptionOfferCodes = &fieldsSubscriptionOfferCodes
	return r
}

// maximum resources per page
func (r ApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest) Limit(limit int32) ApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest) Include(include []string) ApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest) Execute() (*SubscriptionOfferCodeOneTimeUseCodesResponse, *http.Response, error) {
	return r.ApiService.SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedExecute(r)
}

/*
SubscriptionOfferCodesOneTimeUseCodesGetToManyRelated Method for SubscriptionOfferCodesOneTimeUseCodesGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest
*/
func (a *SubscriptionOfferCodesAPIService) SubscriptionOfferCodesOneTimeUseCodesGetToManyRelated(ctx context.Context, id string) ApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest {
	return ApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubscriptionOfferCodeOneTimeUseCodesResponse
func (a *SubscriptionOfferCodesAPIService) SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedExecute(r ApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest) (*SubscriptionOfferCodeOneTimeUseCodesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionOfferCodeOneTimeUseCodesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionOfferCodesAPIService.SubscriptionOfferCodesOneTimeUseCodesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionOfferCodes/{id}/oneTimeUseCodes"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsSubscriptionOfferCodeOneTimeUseCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodeOneTimeUseCodes]", r.fieldsSubscriptionOfferCodeOneTimeUseCodes, "form", "csv")
	}
	if r.fieldsSubscriptionOfferCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodes]", r.fieldsSubscriptionOfferCodes, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscriptionOfferCodesPricesGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *SubscriptionOfferCodesAPIService
	id string
	filterTerritory *[]string
	fieldsSubscriptionOfferCodePrices *[]string
	fieldsTerritories *[]string
	fieldsSubscriptionPricePoints *[]string
	limit *int32
	include *[]string
}

// filter by id(s) of related &#39;territory&#39;
func (r ApiSubscriptionOfferCodesPricesGetToManyRelatedRequest) FilterTerritory(filterTerritory []string) ApiSubscriptionOfferCodesPricesGetToManyRelatedRequest {
	r.filterTerritory = &filterTerritory
	return r
}

// the fields to include for returned resources of type subscriptionOfferCodePrices
func (r ApiSubscriptionOfferCodesPricesGetToManyRelatedRequest) FieldsSubscriptionOfferCodePrices(fieldsSubscriptionOfferCodePrices []string) ApiSubscriptionOfferCodesPricesGetToManyRelatedRequest {
	r.fieldsSubscriptionOfferCodePrices = &fieldsSubscriptionOfferCodePrices
	return r
}

// the fields to include for returned resources of type territories
func (r ApiSubscriptionOfferCodesPricesGetToManyRelatedRequest) FieldsTerritories(fieldsTerritories []string) ApiSubscriptionOfferCodesPricesGetToManyRelatedRequest {
	r.fieldsTerritories = &fieldsTerritories
	return r
}

// the fields to include for returned resources of type subscriptionPricePoints
func (r ApiSubscriptionOfferCodesPricesGetToManyRelatedRequest) FieldsSubscriptionPricePoints(fieldsSubscriptionPricePoints []string) ApiSubscriptionOfferCodesPricesGetToManyRelatedRequest {
	r.fieldsSubscriptionPricePoints = &fieldsSubscriptionPricePoints
	return r
}

// maximum resources per page
func (r ApiSubscriptionOfferCodesPricesGetToManyRelatedRequest) Limit(limit int32) ApiSubscriptionOfferCodesPricesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiSubscriptionOfferCodesPricesGetToManyRelatedRequest) Include(include []string) ApiSubscriptionOfferCodesPricesGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiSubscriptionOfferCodesPricesGetToManyRelatedRequest) Execute() (*SubscriptionOfferCodePricesResponse, *http.Response, error) {
	return r.ApiService.SubscriptionOfferCodesPricesGetToManyRelatedExecute(r)
}

/*
SubscriptionOfferCodesPricesGetToManyRelated Method for SubscriptionOfferCodesPricesGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiSubscriptionOfferCodesPricesGetToManyRelatedRequest
*/
func (a *SubscriptionOfferCodesAPIService) SubscriptionOfferCodesPricesGetToManyRelated(ctx context.Context, id string) ApiSubscriptionOfferCodesPricesGetToManyRelatedRequest {
	return ApiSubscriptionOfferCodesPricesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubscriptionOfferCodePricesResponse
func (a *SubscriptionOfferCodesAPIService) SubscriptionOfferCodesPricesGetToManyRelatedExecute(r ApiSubscriptionOfferCodesPricesGetToManyRelatedRequest) (*SubscriptionOfferCodePricesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionOfferCodePricesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionOfferCodesAPIService.SubscriptionOfferCodesPricesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionOfferCodes/{id}/prices"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterTerritory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[territory]", r.filterTerritory, "form", "csv")
	}
	if r.fieldsSubscriptionOfferCodePrices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodePrices]", r.fieldsSubscriptionOfferCodePrices, "form", "csv")
	}
	if r.fieldsTerritories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[territories]", r.fieldsTerritories, "form", "csv")
	}
	if r.fieldsSubscriptionPricePoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionPricePoints]", r.fieldsSubscriptionPricePoints, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscriptionOfferCodesUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *SubscriptionOfferCodesAPIService
	id string
	subscriptionOfferCodeUpdateRequest *SubscriptionOfferCodeUpdateRequest
}

// SubscriptionOfferCode representation
func (r ApiSubscriptionOfferCodesUpdateInstanceRequest) SubscriptionOfferCodeUpdateRequest(subscriptionOfferCodeUpdateRequest SubscriptionOfferCodeUpdateRequest) ApiSubscriptionOfferCodesUpdateInstanceRequest {
	r.subscriptionOfferCodeUpdateRequest = &subscriptionOfferCodeUpdateRequest
	return r
}

func (r ApiSubscriptionOfferCodesUpdateInstanceRequest) Execute() (*SubscriptionOfferCodeResponse, *http.Response, error) {
	return r.ApiService.SubscriptionOfferCodesUpdateInstanceExecute(r)
}

/*
SubscriptionOfferCodesUpdateInstance Method for SubscriptionOfferCodesUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiSubscriptionOfferCodesUpdateInstanceRequest
*/
func (a *SubscriptionOfferCodesAPIService) SubscriptionOfferCodesUpdateInstance(ctx context.Context, id string) ApiSubscriptionOfferCodesUpdateInstanceRequest {
	return ApiSubscriptionOfferCodesUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubscriptionOfferCodeResponse
func (a *SubscriptionOfferCodesAPIService) SubscriptionOfferCodesUpdateInstanceExecute(r ApiSubscriptionOfferCodesUpdateInstanceRequest) (*SubscriptionOfferCodeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionOfferCodeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionOfferCodesAPIService.SubscriptionOfferCodesUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionOfferCodes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subscriptionOfferCodeUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("subscriptionOfferCodeUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.subscriptionOfferCodeUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect-client

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// GameCenterLeaderboardsResponseIncludedInner - struct for GameCenterLeaderboardsResponseIncludedInner
type GameCenterLeaderboardsResponseIncludedInner struct {
	GameCenterDetail *GameCenterDetail
	GameCenterGroup *GameCenterGroup
	GameCenterLeaderboard *GameCenterLeaderboard
	GameCenterLeaderboardLocalization *GameCenterLeaderboardLocalization
	GameCenterLeaderboardRelease *GameCenterLeaderboardRelease
	GameCenterLeaderboardSet *GameCenterLeaderboardSet
}

// GameCenterDetailAsGameCenterLeaderboardsResponseIncludedInner is a convenience function that returns GameCenterDetail wrapped in GameCenterLeaderboardsResponseIncludedInner
func GameCenterDetailAsGameCenterLeaderboardsResponseIncludedInner(v *GameCenterDetail) GameCenterLeaderboardsResponseIncludedInner {
	return GameCenterLeaderboardsResponseIncludedInner{
		GameCenterDetail: v,
	}
}

// GameCenterGroupAsGameCenterLeaderboardsResponseIncludedInner is a convenience function that returns GameCenterGroup wrapped in GameCenterLeaderboardsResponseIncludedInner
func GameCenterGroupAsGameCenterLeaderboardsResponseIncludedInner(v *GameCenterGroup) GameCenterLeaderboardsResponseIncludedInner {
	return GameCenterLeaderboardsResponseIncludedInner{
		GameCenterGroup: v,
	}
}

// GameCenterLeaderboardAsGameCenterLeaderboardsResponseIncludedInner is a convenience function that returns GameCenterLeaderboard wrapped in GameCenterLeaderboardsResponseIncludedInner
func GameCenterLeaderboardAsGameCenterLeaderboardsResponseIncludedInner(v *GameCenterLeaderboard) GameCenterLeaderboardsResponseIncludedInner {
	return GameCenterLeaderboardsResponseIncludedInner{
		GameCenterLeaderboard: v,
	}
}

// GameCenterLeaderboardLocalizationAsGameCenterLeaderboardsResponseIncludedInner is a convenience function that returns GameCenterLeaderboardLocalization wrapped in GameCenterLeaderboardsResponseIncludedInner
func GameCenterLeaderboardLocalizationAsGameCenterLeaderboardsResponseIncludedInner(v *GameCenterLeaderboardLocalization) GameCenterLeaderboardsResponseIncludedInner {
	return GameCenterLeaderboardsResponseIncludedInner{
		GameCenterLeaderboardLocalization: v,
	}
}

// GameCenterLeaderboardReleaseAsGameCenterLeaderboardsResponseIncludedInner is a convenience function that returns GameCenterLeaderboardRelease wrapped in GameCenterLeaderboardsResponseIncludedInner
func GameCenterLeaderboardReleaseAsGameCenterLeaderboardsResponseIncludedInner(v *GameCenterLeaderboardRelease) GameCenterLeaderboardsResponseIncludedInner {
	return GameCenterLeaderboardsResponseIncludedInner{
		GameCenterLeaderboardRelease: v,
	}
}

// GameCenterLeaderboardSetAsGameCenterLeaderboardsResponseIncludedInner is a convenience function that returns GameCenterLeaderboardSet wrapped in GameCenterLeaderboardsResponseIncludedInner
func GameCenterLeaderboardSetAsGameCenterLeaderboardsResponseIncludedInner(v *GameCenterLeaderboardSet) GameCenterLeaderboardsResponseIncludedInner {
	return GameCenterLeaderboardsResponseIncludedInner{
		GameCenterLeaderboardSet: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GameCenterLeaderboardsResponseIncludedInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GameCenterDetail
	err = newStrictDecoder(data).Decode(&dst.GameCenterDetail)
	if err == nil {
		jsonGameCenterDetail, _ := json.Marshal(dst.GameCenterDetail)
		if string(jsonGameCenterDetail) == "{}" { // empty struct
			dst.GameCenterDetail = nil
		} else {
			if err = validator.Validate(dst.GameCenterDetail); err != nil {
				dst.GameCenterDetail = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterDetail = nil
	}

	// try to unmarshal data into GameCenterGroup
	err = newStrictDecoder(data).Decode(&dst.GameCenterGroup)
	if err == nil {
		jsonGameCenterGroup, _ := json.Marshal(dst.GameCenterGroup)
		if string(jsonGameCenterGroup) == "{}" { // empty struct
			dst.GameCenterGroup = nil
		} else {
			if err = validator.Validate(dst.GameCenterGroup); err != nil {
				dst.GameCenterGroup = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterGroup = nil
	}

	// try to unmarshal data into GameCenterLeaderboard
	err = newStrictDecoder(data).Decode(&dst.GameCenterLeaderboard)
	if err == nil {
		jsonGameCenterLeaderboard, _ := json.Marshal(dst.GameCenterLeaderboard)
		if string(jsonGameCenterLeaderboard) == "{}" { // empty struct
			dst.GameCenterLeaderboard = nil
		} else {
			if err = validator.Validate(dst.GameCenterLeaderboard); err != nil {
				dst.GameCenterLeaderboard = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterLeaderboard = nil
	}

	// try to unmarshal data into GameCenterLeaderboardLocalization
	err = newStrictDecoder(data).Decode(&dst.GameCenterLeaderboardLocalization)
	if err == nil {
		jsonGameCenterLeaderboardLocalization, _ := json.Marshal(dst.GameCenterLeaderboardLocalization)
		if string(jsonGameCenterLeaderboardLocalization) == "{}" { // empty struct
			dst.GameCenterLeaderboardLocalization = nil
		} else {
			if err = validator.Validate(dst.GameCenterLeaderboardLocalization); err != nil {
				dst.GameCenterLeaderboardLocalization = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterLeaderboardLocalization = nil
	}

	// try to unmarshal data into GameCenterLeaderboardRelease
	err = newStrictDecoder(data).Decode(&dst.GameCenterLeaderboardRelease)
	if err == nil {
		jsonGameCenterLeaderboardRelease, _ := json.Marshal(dst.GameCenterLeaderboardRelease)
		if string(jsonGameCenterLeaderboardRelease) == "{}" { // empty struct
			dst.GameCenterLeaderboardRelease = nil
		} else {
			if err = validator.Validate(dst.GameCenterLeaderboardRelease); err != nil {
				dst.GameCenterLeaderboardRelease = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterLeaderboardRelease = nil
	}

	// try to unmarshal data into GameCenterLeaderboardSet
	err = newStrictDecoder(data).Decode(&dst.GameCenterLeaderboardSet)
	if err == nil {
		jsonGameCenterLeaderboardSet, _ := json.Marshal(dst.GameCenterLeaderboardSet)
		if string(jsonGameCenterLeaderboardSet) == "{}" { // empty struct
			dst.GameCenterLeaderboardSet = nil
		} else {
			if err = validator.Validate(dst.GameCenterLeaderboardSet); err != nil {
				dst.GameCenterLeaderboardSet = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterLeaderboardSet = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GameCenterDetail = nil
		dst.GameCenterGroup = nil
		dst.GameCenterLeaderboard = nil
		dst.GameCenterLeaderboardLocalization = nil
		dst.GameCenterLeaderboardRelease = nil
		dst.GameCenterLeaderboardSet = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GameCenterLeaderboardsResponseIncludedInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GameCenterLeaderboardsResponseIncludedInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GameCenterLeaderboardsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	if src.GameCenterDetail != nil {
		return json.Marshal(&src.GameCenterDetail)
	}

	if src.GameCenterGroup != nil {
		return json.Marshal(&src.GameCenterGroup)
	}

	if src.GameCenterLeaderboard != nil {
		return json.Marshal(&src.GameCenterLeaderboard)
	}

	if src.GameCenterLeaderboardLocalization != nil {
		return json.Marshal(&src.GameCenterLeaderboardLocalization)
	}

	if src.GameCenterLeaderboardRelease != nil {
		return json.Marshal(&src.GameCenterLeaderboardRelease)
	}

	if src.GameCenterLeaderboardSet != nil {
		return json.Marshal(&src.GameCenterLeaderboardSet)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GameCenterLeaderboardsResponseIncludedInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GameCenterDetail != nil {
		return obj.GameCenterDetail
	}

	if obj.GameCenterGroup != nil {
		return obj.GameCenterGroup
	}

	if obj.GameCenterLeaderboard != nil {
		return obj.GameCenterLeaderboard
	}

	if obj.GameCenterLeaderboardLocalization != nil {
		return obj.GameCenterLeaderboardLocalization
	}

	if obj.GameCenterLeaderboardRelease != nil {
		return obj.GameCenterLeaderboardRelease
	}

	if obj.GameCenterLeaderboardSet != nil {
		return obj.GameCenterLeaderboardSet
	}

	// all schemas are nil
	return nil
}

type NullableGameCenterLeaderboardsResponseIncludedInner struct {
	value *GameCenterLeaderboardsResponseIncludedInner
	isSet bool
}

func (v NullableGameCenterLeaderboardsResponseIncludedInner) Get() *GameCenterLeaderboardsResponseIncludedInner {
	return v.value
}

func (v *NullableGameCenterLeaderboardsResponseIncludedInner) Set(val *GameCenterLeaderboardsResponseIncludedInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGameCenterLeaderboardsResponseIncludedInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGameCenterLeaderboardsResponseIncludedInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGameCenterLeaderboardsResponseIncludedInner(val *GameCenterLeaderboardsResponseIncludedInner) *NullableGameCenterLeaderboardsResponseIncludedInner {
	return &NullableGameCenterLeaderboardsResponseIncludedInner{value: val, isSet: true}
}

func (v NullableGameCenterLeaderboardsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGameCenterLeaderboardsResponseIncludedInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



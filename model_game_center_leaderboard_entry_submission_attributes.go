/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect-client

import (
	"encoding/json"
	"time"
)

// checks if the GameCenterLeaderboardEntrySubmissionAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GameCenterLeaderboardEntrySubmissionAttributes{}

// GameCenterLeaderboardEntrySubmissionAttributes struct for GameCenterLeaderboardEntrySubmissionAttributes
type GameCenterLeaderboardEntrySubmissionAttributes struct {
	BundleId *string `json:"bundleId,omitempty"`
	ChallengeIds []string `json:"challengeIds,omitempty"`
	Context *float64 `json:"context,omitempty"`
	ScopedPlayerId *string `json:"scopedPlayerId,omitempty"`
	Score *float64 `json:"score,omitempty"`
	SubmittedDate *time.Time `json:"submittedDate,omitempty"`
	VendorIdentifier *string `json:"vendorIdentifier,omitempty"`
}

// NewGameCenterLeaderboardEntrySubmissionAttributes instantiates a new GameCenterLeaderboardEntrySubmissionAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGameCenterLeaderboardEntrySubmissionAttributes() *GameCenterLeaderboardEntrySubmissionAttributes {
	this := GameCenterLeaderboardEntrySubmissionAttributes{}
	return &this
}

// NewGameCenterLeaderboardEntrySubmissionAttributesWithDefaults instantiates a new GameCenterLeaderboardEntrySubmissionAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGameCenterLeaderboardEntrySubmissionAttributesWithDefaults() *GameCenterLeaderboardEntrySubmissionAttributes {
	this := GameCenterLeaderboardEntrySubmissionAttributes{}
	return &this
}

// GetBundleId returns the BundleId field value if set, zero value otherwise.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) GetBundleId() string {
	if o == nil || IsNil(o.BundleId) {
		var ret string
		return ret
	}
	return *o.BundleId
}

// GetBundleIdOk returns a tuple with the BundleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) GetBundleIdOk() (*string, bool) {
	if o == nil || IsNil(o.BundleId) {
		return nil, false
	}
	return o.BundleId, true
}

// HasBundleId returns a boolean if a field has been set.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) HasBundleId() bool {
	if o != nil && !IsNil(o.BundleId) {
		return true
	}

	return false
}

// SetBundleId gets a reference to the given string and assigns it to the BundleId field.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) SetBundleId(v string) {
	o.BundleId = &v
}

// GetChallengeIds returns the ChallengeIds field value if set, zero value otherwise.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) GetChallengeIds() []string {
	if o == nil || IsNil(o.ChallengeIds) {
		var ret []string
		return ret
	}
	return o.ChallengeIds
}

// GetChallengeIdsOk returns a tuple with the ChallengeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) GetChallengeIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ChallengeIds) {
		return nil, false
	}
	return o.ChallengeIds, true
}

// HasChallengeIds returns a boolean if a field has been set.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) HasChallengeIds() bool {
	if o != nil && !IsNil(o.ChallengeIds) {
		return true
	}

	return false
}

// SetChallengeIds gets a reference to the given []string and assigns it to the ChallengeIds field.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) SetChallengeIds(v []string) {
	o.ChallengeIds = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) GetContext() float64 {
	if o == nil || IsNil(o.Context) {
		var ret float64
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) GetContextOk() (*float64, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given float64 and assigns it to the Context field.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) SetContext(v float64) {
	o.Context = &v
}

// GetScopedPlayerId returns the ScopedPlayerId field value if set, zero value otherwise.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) GetScopedPlayerId() string {
	if o == nil || IsNil(o.ScopedPlayerId) {
		var ret string
		return ret
	}
	return *o.ScopedPlayerId
}

// GetScopedPlayerIdOk returns a tuple with the ScopedPlayerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) GetScopedPlayerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScopedPlayerId) {
		return nil, false
	}
	return o.ScopedPlayerId, true
}

// HasScopedPlayerId returns a boolean if a field has been set.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) HasScopedPlayerId() bool {
	if o != nil && !IsNil(o.ScopedPlayerId) {
		return true
	}

	return false
}

// SetScopedPlayerId gets a reference to the given string and assigns it to the ScopedPlayerId field.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) SetScopedPlayerId(v string) {
	o.ScopedPlayerId = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) GetScore() float64 {
	if o == nil || IsNil(o.Score) {
		var ret float64
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) GetScoreOk() (*float64, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given float64 and assigns it to the Score field.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) SetScore(v float64) {
	o.Score = &v
}

// GetSubmittedDate returns the SubmittedDate field value if set, zero value otherwise.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) GetSubmittedDate() time.Time {
	if o == nil || IsNil(o.SubmittedDate) {
		var ret time.Time
		return ret
	}
	return *o.SubmittedDate
}

// GetSubmittedDateOk returns a tuple with the SubmittedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) GetSubmittedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SubmittedDate) {
		return nil, false
	}
	return o.SubmittedDate, true
}

// HasSubmittedDate returns a boolean if a field has been set.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) HasSubmittedDate() bool {
	if o != nil && !IsNil(o.SubmittedDate) {
		return true
	}

	return false
}

// SetSubmittedDate gets a reference to the given time.Time and assigns it to the SubmittedDate field.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) SetSubmittedDate(v time.Time) {
	o.SubmittedDate = &v
}

// GetVendorIdentifier returns the VendorIdentifier field value if set, zero value otherwise.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) GetVendorIdentifier() string {
	if o == nil || IsNil(o.VendorIdentifier) {
		var ret string
		return ret
	}
	return *o.VendorIdentifier
}

// GetVendorIdentifierOk returns a tuple with the VendorIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) GetVendorIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.VendorIdentifier) {
		return nil, false
	}
	return o.VendorIdentifier, true
}

// HasVendorIdentifier returns a boolean if a field has been set.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) HasVendorIdentifier() bool {
	if o != nil && !IsNil(o.VendorIdentifier) {
		return true
	}

	return false
}

// SetVendorIdentifier gets a reference to the given string and assigns it to the VendorIdentifier field.
func (o *GameCenterLeaderboardEntrySubmissionAttributes) SetVendorIdentifier(v string) {
	o.VendorIdentifier = &v
}

func (o GameCenterLeaderboardEntrySubmissionAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GameCenterLeaderboardEntrySubmissionAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BundleId) {
		toSerialize["bundleId"] = o.BundleId
	}
	if !IsNil(o.ChallengeIds) {
		toSerialize["challengeIds"] = o.ChallengeIds
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.ScopedPlayerId) {
		toSerialize["scopedPlayerId"] = o.ScopedPlayerId
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !IsNil(o.SubmittedDate) {
		toSerialize["submittedDate"] = o.SubmittedDate
	}
	if !IsNil(o.VendorIdentifier) {
		toSerialize["vendorIdentifier"] = o.VendorIdentifier
	}
	return toSerialize, nil
}

type NullableGameCenterLeaderboardEntrySubmissionAttributes struct {
	value *GameCenterLeaderboardEntrySubmissionAttributes
	isSet bool
}

func (v NullableGameCenterLeaderboardEntrySubmissionAttributes) Get() *GameCenterLeaderboardEntrySubmissionAttributes {
	return v.value
}

func (v *NullableGameCenterLeaderboardEntrySubmissionAttributes) Set(val *GameCenterLeaderboardEntrySubmissionAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableGameCenterLeaderboardEntrySubmissionAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableGameCenterLeaderboardEntrySubmissionAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGameCenterLeaderboardEntrySubmissionAttributes(val *GameCenterLeaderboardEntrySubmissionAttributes) *NullableGameCenterLeaderboardEntrySubmissionAttributes {
	return &NullableGameCenterLeaderboardEntrySubmissionAttributes{value: val, isSet: true}
}

func (v NullableGameCenterLeaderboardEntrySubmissionAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGameCenterLeaderboardEntrySubmissionAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect-client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// GameCenterAchievementsAPIService GameCenterAchievementsAPI service
type GameCenterAchievementsAPIService service

type ApiGameCenterAchievementsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterAchievementsAPIService
	gameCenterAchievementCreateRequest *GameCenterAchievementCreateRequest
}

// GameCenterAchievement representation
func (r ApiGameCenterAchievementsCreateInstanceRequest) GameCenterAchievementCreateRequest(gameCenterAchievementCreateRequest GameCenterAchievementCreateRequest) ApiGameCenterAchievementsCreateInstanceRequest {
	r.gameCenterAchievementCreateRequest = &gameCenterAchievementCreateRequest
	return r
}

func (r ApiGameCenterAchievementsCreateInstanceRequest) Execute() (*GameCenterAchievementResponse, *http.Response, error) {
	return r.ApiService.GameCenterAchievementsCreateInstanceExecute(r)
}

/*
GameCenterAchievementsCreateInstance Method for GameCenterAchievementsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGameCenterAchievementsCreateInstanceRequest
*/
func (a *GameCenterAchievementsAPIService) GameCenterAchievementsCreateInstance(ctx context.Context) ApiGameCenterAchievementsCreateInstanceRequest {
	return ApiGameCenterAchievementsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GameCenterAchievementResponse
func (a *GameCenterAchievementsAPIService) GameCenterAchievementsCreateInstanceExecute(r ApiGameCenterAchievementsCreateInstanceRequest) (*GameCenterAchievementResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterAchievementResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterAchievementsAPIService.GameCenterAchievementsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterAchievements"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterAchievementCreateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterAchievementCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterAchievementCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterAchievementsDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterAchievementsAPIService
	id string
}

func (r ApiGameCenterAchievementsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterAchievementsDeleteInstanceExecute(r)
}

/*
GameCenterAchievementsDeleteInstance Method for GameCenterAchievementsDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterAchievementsDeleteInstanceRequest
*/
func (a *GameCenterAchievementsAPIService) GameCenterAchievementsDeleteInstance(ctx context.Context, id string) ApiGameCenterAchievementsDeleteInstanceRequest {
	return ApiGameCenterAchievementsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GameCenterAchievementsAPIService) GameCenterAchievementsDeleteInstanceExecute(r ApiGameCenterAchievementsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterAchievementsAPIService.GameCenterAchievementsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterAchievements/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterAchievementsGetInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterAchievementsAPIService
	id string
	fieldsGameCenterAchievements *[]string
	fieldsGameCenterAchievementLocalizations *[]string
	fieldsGameCenterAchievementReleases *[]string
	include *[]string
	limitLocalizations *int32
	limitReleases *int32
}

// the fields to include for returned resources of type gameCenterAchievements
func (r ApiGameCenterAchievementsGetInstanceRequest) FieldsGameCenterAchievements(fieldsGameCenterAchievements []string) ApiGameCenterAchievementsGetInstanceRequest {
	r.fieldsGameCenterAchievements = &fieldsGameCenterAchievements
	return r
}

// the fields to include for returned resources of type gameCenterAchievementLocalizations
func (r ApiGameCenterAchievementsGetInstanceRequest) FieldsGameCenterAchievementLocalizations(fieldsGameCenterAchievementLocalizations []string) ApiGameCenterAchievementsGetInstanceRequest {
	r.fieldsGameCenterAchievementLocalizations = &fieldsGameCenterAchievementLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterAchievementReleases
func (r ApiGameCenterAchievementsGetInstanceRequest) FieldsGameCenterAchievementReleases(fieldsGameCenterAchievementReleases []string) ApiGameCenterAchievementsGetInstanceRequest {
	r.fieldsGameCenterAchievementReleases = &fieldsGameCenterAchievementReleases
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterAchievementsGetInstanceRequest) Include(include []string) ApiGameCenterAchievementsGetInstanceRequest {
	r.include = &include
	return r
}

// maximum number of related localizations returned (when they are included)
func (r ApiGameCenterAchievementsGetInstanceRequest) LimitLocalizations(limitLocalizations int32) ApiGameCenterAchievementsGetInstanceRequest {
	r.limitLocalizations = &limitLocalizations
	return r
}

// maximum number of related releases returned (when they are included)
func (r ApiGameCenterAchievementsGetInstanceRequest) LimitReleases(limitReleases int32) ApiGameCenterAchievementsGetInstanceRequest {
	r.limitReleases = &limitReleases
	return r
}

func (r ApiGameCenterAchievementsGetInstanceRequest) Execute() (*GameCenterAchievementResponse, *http.Response, error) {
	return r.ApiService.GameCenterAchievementsGetInstanceExecute(r)
}

/*
GameCenterAchievementsGetInstance Method for GameCenterAchievementsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterAchievementsGetInstanceRequest
*/
func (a *GameCenterAchievementsAPIService) GameCenterAchievementsGetInstance(ctx context.Context, id string) ApiGameCenterAchievementsGetInstanceRequest {
	return ApiGameCenterAchievementsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterAchievementResponse
func (a *GameCenterAchievementsAPIService) GameCenterAchievementsGetInstanceExecute(r ApiGameCenterAchievementsGetInstanceRequest) (*GameCenterAchievementResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterAchievementResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterAchievementsAPIService.GameCenterAchievementsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterAchievements/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievements]", r.fieldsGameCenterAchievements, "form", "csv")
	}
	if r.fieldsGameCenterAchievementLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementLocalizations]", r.fieldsGameCenterAchievementLocalizations, "form", "csv")
	}
	if r.fieldsGameCenterAchievementReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementReleases]", r.fieldsGameCenterAchievementReleases, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[localizations]", r.limitLocalizations, "form", "")
	}
	if r.limitReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[releases]", r.limitReleases, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *GameCenterAchievementsAPIService
	id string
	fieldsGameCenterAchievements *[]string
	fieldsGameCenterDetails *[]string
	fieldsGameCenterGroups *[]string
	fieldsGameCenterAchievementLocalizations *[]string
	fieldsGameCenterAchievementReleases *[]string
	include *[]string
	limitLocalizations *int32
	limitReleases *int32
}

// the fields to include for returned resources of type gameCenterAchievements
func (r ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest) FieldsGameCenterAchievements(fieldsGameCenterAchievements []string) ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest {
	r.fieldsGameCenterAchievements = &fieldsGameCenterAchievements
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterGroups
func (r ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest) FieldsGameCenterGroups(fieldsGameCenterGroups []string) ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest {
	r.fieldsGameCenterGroups = &fieldsGameCenterGroups
	return r
}

// the fields to include for returned resources of type gameCenterAchievementLocalizations
func (r ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest) FieldsGameCenterAchievementLocalizations(fieldsGameCenterAchievementLocalizations []string) ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest {
	r.fieldsGameCenterAchievementLocalizations = &fieldsGameCenterAchievementLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterAchievementReleases
func (r ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest) FieldsGameCenterAchievementReleases(fieldsGameCenterAchievementReleases []string) ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest {
	r.fieldsGameCenterAchievementReleases = &fieldsGameCenterAchievementReleases
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest) Include(include []string) ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related localizations returned (when they are included)
func (r ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest) LimitLocalizations(limitLocalizations int32) ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest {
	r.limitLocalizations = &limitLocalizations
	return r
}

// maximum number of related releases returned (when they are included)
func (r ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest) LimitReleases(limitReleases int32) ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest {
	r.limitReleases = &limitReleases
	return r
}

func (r ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest) Execute() (*GameCenterAchievementResponse, *http.Response, error) {
	return r.ApiService.GameCenterAchievementsGroupAchievementGetToOneRelatedExecute(r)
}

/*
GameCenterAchievementsGroupAchievementGetToOneRelated Method for GameCenterAchievementsGroupAchievementGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest
*/
func (a *GameCenterAchievementsAPIService) GameCenterAchievementsGroupAchievementGetToOneRelated(ctx context.Context, id string) ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest {
	return ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterAchievementResponse
func (a *GameCenterAchievementsAPIService) GameCenterAchievementsGroupAchievementGetToOneRelatedExecute(r ApiGameCenterAchievementsGroupAchievementGetToOneRelatedRequest) (*GameCenterAchievementResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterAchievementResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterAchievementsAPIService.GameCenterAchievementsGroupAchievementGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterAchievements/{id}/groupAchievement"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievements]", r.fieldsGameCenterAchievements, "form", "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "form", "csv")
	}
	if r.fieldsGameCenterGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterGroups]", r.fieldsGameCenterGroups, "form", "csv")
	}
	if r.fieldsGameCenterAchievementLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementLocalizations]", r.fieldsGameCenterAchievementLocalizations, "form", "csv")
	}
	if r.fieldsGameCenterAchievementReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementReleases]", r.fieldsGameCenterAchievementReleases, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[localizations]", r.limitLocalizations, "form", "")
	}
	if r.limitReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[releases]", r.limitReleases, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterAchievementsGroupAchievementGetToOneRelationshipRequest struct {
	ctx context.Context
	ApiService *GameCenterAchievementsAPIService
	id string
}

func (r ApiGameCenterAchievementsGroupAchievementGetToOneRelationshipRequest) Execute() (*GameCenterAchievementGroupAchievementLinkageResponse, *http.Response, error) {
	return r.ApiService.GameCenterAchievementsGroupAchievementGetToOneRelationshipExecute(r)
}

/*
GameCenterAchievementsGroupAchievementGetToOneRelationship Method for GameCenterAchievementsGroupAchievementGetToOneRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterAchievementsGroupAchievementGetToOneRelationshipRequest
*/
func (a *GameCenterAchievementsAPIService) GameCenterAchievementsGroupAchievementGetToOneRelationship(ctx context.Context, id string) ApiGameCenterAchievementsGroupAchievementGetToOneRelationshipRequest {
	return ApiGameCenterAchievementsGroupAchievementGetToOneRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterAchievementGroupAchievementLinkageResponse
func (a *GameCenterAchievementsAPIService) GameCenterAchievementsGroupAchievementGetToOneRelationshipExecute(r ApiGameCenterAchievementsGroupAchievementGetToOneRelationshipRequest) (*GameCenterAchievementGroupAchievementLinkageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterAchievementGroupAchievementLinkageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterAchievementsAPIService.GameCenterAchievementsGroupAchievementGetToOneRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterAchievements/{id}/relationships/groupAchievement"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterAchievementsGroupAchievementUpdateToOneRelationshipRequest struct {
	ctx context.Context
	ApiService *GameCenterAchievementsAPIService
	id string
	gameCenterAchievementGroupAchievementLinkageRequest *GameCenterAchievementGroupAchievementLinkageRequest
}

// Related linkage
func (r ApiGameCenterAchievementsGroupAchievementUpdateToOneRelationshipRequest) GameCenterAchievementGroupAchievementLinkageRequest(gameCenterAchievementGroupAchievementLinkageRequest GameCenterAchievementGroupAchievementLinkageRequest) ApiGameCenterAchievementsGroupAchievementUpdateToOneRelationshipRequest {
	r.gameCenterAchievementGroupAchievementLinkageRequest = &gameCenterAchievementGroupAchievementLinkageRequest
	return r
}

func (r ApiGameCenterAchievementsGroupAchievementUpdateToOneRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterAchievementsGroupAchievementUpdateToOneRelationshipExecute(r)
}

/*
GameCenterAchievementsGroupAchievementUpdateToOneRelationship Method for GameCenterAchievementsGroupAchievementUpdateToOneRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterAchievementsGroupAchievementUpdateToOneRelationshipRequest
*/
func (a *GameCenterAchievementsAPIService) GameCenterAchievementsGroupAchievementUpdateToOneRelationship(ctx context.Context, id string) ApiGameCenterAchievementsGroupAchievementUpdateToOneRelationshipRequest {
	return ApiGameCenterAchievementsGroupAchievementUpdateToOneRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GameCenterAchievementsAPIService) GameCenterAchievementsGroupAchievementUpdateToOneRelationshipExecute(r ApiGameCenterAchievementsGroupAchievementUpdateToOneRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterAchievementsAPIService.GameCenterAchievementsGroupAchievementUpdateToOneRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterAchievements/{id}/relationships/groupAchievement"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterAchievementGroupAchievementLinkageRequest == nil {
		return nil, reportError("gameCenterAchievementGroupAchievementLinkageRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterAchievementGroupAchievementLinkageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterAchievementsLocalizationsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *GameCenterAchievementsAPIService
	id string
	fieldsGameCenterAchievementLocalizations *[]string
	fieldsGameCenterAchievements *[]string
	fieldsGameCenterAchievementImages *[]string
	limit *int32
	include *[]string
}

// the fields to include for returned resources of type gameCenterAchievementLocalizations
func (r ApiGameCenterAchievementsLocalizationsGetToManyRelatedRequest) FieldsGameCenterAchievementLocalizations(fieldsGameCenterAchievementLocalizations []string) ApiGameCenterAchievementsLocalizationsGetToManyRelatedRequest {
	r.fieldsGameCenterAchievementLocalizations = &fieldsGameCenterAchievementLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterAchievements
func (r ApiGameCenterAchievementsLocalizationsGetToManyRelatedRequest) FieldsGameCenterAchievements(fieldsGameCenterAchievements []string) ApiGameCenterAchievementsLocalizationsGetToManyRelatedRequest {
	r.fieldsGameCenterAchievements = &fieldsGameCenterAchievements
	return r
}

// the fields to include for returned resources of type gameCenterAchievementImages
func (r ApiGameCenterAchievementsLocalizationsGetToManyRelatedRequest) FieldsGameCenterAchievementImages(fieldsGameCenterAchievementImages []string) ApiGameCenterAchievementsLocalizationsGetToManyRelatedRequest {
	r.fieldsGameCenterAchievementImages = &fieldsGameCenterAchievementImages
	return r
}

// maximum resources per page
func (r ApiGameCenterAchievementsLocalizationsGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterAchievementsLocalizationsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterAchievementsLocalizationsGetToManyRelatedRequest) Include(include []string) ApiGameCenterAchievementsLocalizationsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterAchievementsLocalizationsGetToManyRelatedRequest) Execute() (*GameCenterAchievementLocalizationsResponse, *http.Response, error) {
	return r.ApiService.GameCenterAchievementsLocalizationsGetToManyRelatedExecute(r)
}

/*
GameCenterAchievementsLocalizationsGetToManyRelated Method for GameCenterAchievementsLocalizationsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterAchievementsLocalizationsGetToManyRelatedRequest
*/
func (a *GameCenterAchievementsAPIService) GameCenterAchievementsLocalizationsGetToManyRelated(ctx context.Context, id string) ApiGameCenterAchievementsLocalizationsGetToManyRelatedRequest {
	return ApiGameCenterAchievementsLocalizationsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterAchievementLocalizationsResponse
func (a *GameCenterAchievementsAPIService) GameCenterAchievementsLocalizationsGetToManyRelatedExecute(r ApiGameCenterAchievementsLocalizationsGetToManyRelatedRequest) (*GameCenterAchievementLocalizationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterAchievementLocalizationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterAchievementsAPIService.GameCenterAchievementsLocalizationsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterAchievements/{id}/localizations"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterAchievementLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementLocalizations]", r.fieldsGameCenterAchievementLocalizations, "form", "csv")
	}
	if r.fieldsGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievements]", r.fieldsGameCenterAchievements, "form", "csv")
	}
	if r.fieldsGameCenterAchievementImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementImages]", r.fieldsGameCenterAchievementImages, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterAchievementsReleasesGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *GameCenterAchievementsAPIService
	id string
	filterLive *[]string
	filterGameCenterDetail *[]string
	fieldsGameCenterAchievementReleases *[]string
	fieldsGameCenterDetails *[]string
	fieldsGameCenterAchievements *[]string
	limit *int32
	include *[]string
}

// filter by attribute &#39;live&#39;
func (r ApiGameCenterAchievementsReleasesGetToManyRelatedRequest) FilterLive(filterLive []string) ApiGameCenterAchievementsReleasesGetToManyRelatedRequest {
	r.filterLive = &filterLive
	return r
}

// filter by id(s) of related &#39;gameCenterDetail&#39;
func (r ApiGameCenterAchievementsReleasesGetToManyRelatedRequest) FilterGameCenterDetail(filterGameCenterDetail []string) ApiGameCenterAchievementsReleasesGetToManyRelatedRequest {
	r.filterGameCenterDetail = &filterGameCenterDetail
	return r
}

// the fields to include for returned resources of type gameCenterAchievementReleases
func (r ApiGameCenterAchievementsReleasesGetToManyRelatedRequest) FieldsGameCenterAchievementReleases(fieldsGameCenterAchievementReleases []string) ApiGameCenterAchievementsReleasesGetToManyRelatedRequest {
	r.fieldsGameCenterAchievementReleases = &fieldsGameCenterAchievementReleases
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterAchievementsReleasesGetToManyRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterAchievementsReleasesGetToManyRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterAchievements
func (r ApiGameCenterAchievementsReleasesGetToManyRelatedRequest) FieldsGameCenterAchievements(fieldsGameCenterAchievements []string) ApiGameCenterAchievementsReleasesGetToManyRelatedRequest {
	r.fieldsGameCenterAchievements = &fieldsGameCenterAchievements
	return r
}

// maximum resources per page
func (r ApiGameCenterAchievementsReleasesGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterAchievementsReleasesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterAchievementsReleasesGetToManyRelatedRequest) Include(include []string) ApiGameCenterAchievementsReleasesGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterAchievementsReleasesGetToManyRelatedRequest) Execute() (*GameCenterAchievementReleasesResponse, *http.Response, error) {
	return r.ApiService.GameCenterAchievementsReleasesGetToManyRelatedExecute(r)
}

/*
GameCenterAchievementsReleasesGetToManyRelated Method for GameCenterAchievementsReleasesGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterAchievementsReleasesGetToManyRelatedRequest
*/
func (a *GameCenterAchievementsAPIService) GameCenterAchievementsReleasesGetToManyRelated(ctx context.Context, id string) ApiGameCenterAchievementsReleasesGetToManyRelatedRequest {
	return ApiGameCenterAchievementsReleasesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterAchievementReleasesResponse
func (a *GameCenterAchievementsAPIService) GameCenterAchievementsReleasesGetToManyRelatedExecute(r ApiGameCenterAchievementsReleasesGetToManyRelatedRequest) (*GameCenterAchievementReleasesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterAchievementReleasesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterAchievementsAPIService.GameCenterAchievementsReleasesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterAchievements/{id}/releases"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterLive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[live]", r.filterLive, "form", "csv")
	}
	if r.filterGameCenterDetail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterDetail]", r.filterGameCenterDetail, "form", "csv")
	}
	if r.fieldsGameCenterAchievementReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementReleases]", r.fieldsGameCenterAchievementReleases, "form", "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "form", "csv")
	}
	if r.fieldsGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievements]", r.fieldsGameCenterAchievements, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterAchievementsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterAchievementsAPIService
	id string
	gameCenterAchievementUpdateRequest *GameCenterAchievementUpdateRequest
}

// GameCenterAchievement representation
func (r ApiGameCenterAchievementsUpdateInstanceRequest) GameCenterAchievementUpdateRequest(gameCenterAchievementUpdateRequest GameCenterAchievementUpdateRequest) ApiGameCenterAchievementsUpdateInstanceRequest {
	r.gameCenterAchievementUpdateRequest = &gameCenterAchievementUpdateRequest
	return r
}

func (r ApiGameCenterAchievementsUpdateInstanceRequest) Execute() (*GameCenterAchievementResponse, *http.Response, error) {
	return r.ApiService.GameCenterAchievementsUpdateInstanceExecute(r)
}

/*
GameCenterAchievementsUpdateInstance Method for GameCenterAchievementsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterAchievementsUpdateInstanceRequest
*/
func (a *GameCenterAchievementsAPIService) GameCenterAchievementsUpdateInstance(ctx context.Context, id string) ApiGameCenterAchievementsUpdateInstanceRequest {
	return ApiGameCenterAchievementsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterAchievementResponse
func (a *GameCenterAchievementsAPIService) GameCenterAchievementsUpdateInstanceExecute(r ApiGameCenterAchievementsUpdateInstanceRequest) (*GameCenterAchievementResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterAchievementResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterAchievementsAPIService.GameCenterAchievementsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterAchievements/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterAchievementUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterAchievementUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterAchievementUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

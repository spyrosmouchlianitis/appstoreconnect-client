/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"encoding/json"
	"time"
)

// checks if the GameCenterPlayerAchievementSubmissionAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GameCenterPlayerAchievementSubmissionAttributes{}

// GameCenterPlayerAchievementSubmissionAttributes struct for GameCenterPlayerAchievementSubmissionAttributes
type GameCenterPlayerAchievementSubmissionAttributes struct {
	BundleId *string `json:"bundleId,omitempty"`
	ChallengeIds []string `json:"challengeIds,omitempty"`
	PercentageAchieved *int32 `json:"percentageAchieved,omitempty"`
	ScopedPlayerId *string `json:"scopedPlayerId,omitempty"`
	SubmittedDate *time.Time `json:"submittedDate,omitempty"`
	VendorIdentifier *string `json:"vendorIdentifier,omitempty"`
}

// NewGameCenterPlayerAchievementSubmissionAttributes instantiates a new GameCenterPlayerAchievementSubmissionAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGameCenterPlayerAchievementSubmissionAttributes() *GameCenterPlayerAchievementSubmissionAttributes {
	this := GameCenterPlayerAchievementSubmissionAttributes{}
	return &this
}

// NewGameCenterPlayerAchievementSubmissionAttributesWithDefaults instantiates a new GameCenterPlayerAchievementSubmissionAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGameCenterPlayerAchievementSubmissionAttributesWithDefaults() *GameCenterPlayerAchievementSubmissionAttributes {
	this := GameCenterPlayerAchievementSubmissionAttributes{}
	return &this
}

// GetBundleId returns the BundleId field value if set, zero value otherwise.
func (o *GameCenterPlayerAchievementSubmissionAttributes) GetBundleId() string {
	if o == nil || IsNil(o.BundleId) {
		var ret string
		return ret
	}
	return *o.BundleId
}

// GetBundleIdOk returns a tuple with the BundleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterPlayerAchievementSubmissionAttributes) GetBundleIdOk() (*string, bool) {
	if o == nil || IsNil(o.BundleId) {
		return nil, false
	}
	return o.BundleId, true
}

// HasBundleId returns a boolean if a field has been set.
func (o *GameCenterPlayerAchievementSubmissionAttributes) HasBundleId() bool {
	if o != nil && !IsNil(o.BundleId) {
		return true
	}

	return false
}

// SetBundleId gets a reference to the given string and assigns it to the BundleId field.
func (o *GameCenterPlayerAchievementSubmissionAttributes) SetBundleId(v string) {
	o.BundleId = &v
}

// GetChallengeIds returns the ChallengeIds field value if set, zero value otherwise.
func (o *GameCenterPlayerAchievementSubmissionAttributes) GetChallengeIds() []string {
	if o == nil || IsNil(o.ChallengeIds) {
		var ret []string
		return ret
	}
	return o.ChallengeIds
}

// GetChallengeIdsOk returns a tuple with the ChallengeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterPlayerAchievementSubmissionAttributes) GetChallengeIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ChallengeIds) {
		return nil, false
	}
	return o.ChallengeIds, true
}

// HasChallengeIds returns a boolean if a field has been set.
func (o *GameCenterPlayerAchievementSubmissionAttributes) HasChallengeIds() bool {
	if o != nil && !IsNil(o.ChallengeIds) {
		return true
	}

	return false
}

// SetChallengeIds gets a reference to the given []string and assigns it to the ChallengeIds field.
func (o *GameCenterPlayerAchievementSubmissionAttributes) SetChallengeIds(v []string) {
	o.ChallengeIds = v
}

// GetPercentageAchieved returns the PercentageAchieved field value if set, zero value otherwise.
func (o *GameCenterPlayerAchievementSubmissionAttributes) GetPercentageAchieved() int32 {
	if o == nil || IsNil(o.PercentageAchieved) {
		var ret int32
		return ret
	}
	return *o.PercentageAchieved
}

// GetPercentageAchievedOk returns a tuple with the PercentageAchieved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterPlayerAchievementSubmissionAttributes) GetPercentageAchievedOk() (*int32, bool) {
	if o == nil || IsNil(o.PercentageAchieved) {
		return nil, false
	}
	return o.PercentageAchieved, true
}

// HasPercentageAchieved returns a boolean if a field has been set.
func (o *GameCenterPlayerAchievementSubmissionAttributes) HasPercentageAchieved() bool {
	if o != nil && !IsNil(o.PercentageAchieved) {
		return true
	}

	return false
}

// SetPercentageAchieved gets a reference to the given int32 and assigns it to the PercentageAchieved field.
func (o *GameCenterPlayerAchievementSubmissionAttributes) SetPercentageAchieved(v int32) {
	o.PercentageAchieved = &v
}

// GetScopedPlayerId returns the ScopedPlayerId field value if set, zero value otherwise.
func (o *GameCenterPlayerAchievementSubmissionAttributes) GetScopedPlayerId() string {
	if o == nil || IsNil(o.ScopedPlayerId) {
		var ret string
		return ret
	}
	return *o.ScopedPlayerId
}

// GetScopedPlayerIdOk returns a tuple with the ScopedPlayerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterPlayerAchievementSubmissionAttributes) GetScopedPlayerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScopedPlayerId) {
		return nil, false
	}
	return o.ScopedPlayerId, true
}

// HasScopedPlayerId returns a boolean if a field has been set.
func (o *GameCenterPlayerAchievementSubmissionAttributes) HasScopedPlayerId() bool {
	if o != nil && !IsNil(o.ScopedPlayerId) {
		return true
	}

	return false
}

// SetScopedPlayerId gets a reference to the given string and assigns it to the ScopedPlayerId field.
func (o *GameCenterPlayerAchievementSubmissionAttributes) SetScopedPlayerId(v string) {
	o.ScopedPlayerId = &v
}

// GetSubmittedDate returns the SubmittedDate field value if set, zero value otherwise.
func (o *GameCenterPlayerAchievementSubmissionAttributes) GetSubmittedDate() time.Time {
	if o == nil || IsNil(o.SubmittedDate) {
		var ret time.Time
		return ret
	}
	return *o.SubmittedDate
}

// GetSubmittedDateOk returns a tuple with the SubmittedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterPlayerAchievementSubmissionAttributes) GetSubmittedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SubmittedDate) {
		return nil, false
	}
	return o.SubmittedDate, true
}

// HasSubmittedDate returns a boolean if a field has been set.
func (o *GameCenterPlayerAchievementSubmissionAttributes) HasSubmittedDate() bool {
	if o != nil && !IsNil(o.SubmittedDate) {
		return true
	}

	return false
}

// SetSubmittedDate gets a reference to the given time.Time and assigns it to the SubmittedDate field.
func (o *GameCenterPlayerAchievementSubmissionAttributes) SetSubmittedDate(v time.Time) {
	o.SubmittedDate = &v
}

// GetVendorIdentifier returns the VendorIdentifier field value if set, zero value otherwise.
func (o *GameCenterPlayerAchievementSubmissionAttributes) GetVendorIdentifier() string {
	if o == nil || IsNil(o.VendorIdentifier) {
		var ret string
		return ret
	}
	return *o.VendorIdentifier
}

// GetVendorIdentifierOk returns a tuple with the VendorIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GameCenterPlayerAchievementSubmissionAttributes) GetVendorIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.VendorIdentifier) {
		return nil, false
	}
	return o.VendorIdentifier, true
}

// HasVendorIdentifier returns a boolean if a field has been set.
func (o *GameCenterPlayerAchievementSubmissionAttributes) HasVendorIdentifier() bool {
	if o != nil && !IsNil(o.VendorIdentifier) {
		return true
	}

	return false
}

// SetVendorIdentifier gets a reference to the given string and assigns it to the VendorIdentifier field.
func (o *GameCenterPlayerAchievementSubmissionAttributes) SetVendorIdentifier(v string) {
	o.VendorIdentifier = &v
}

func (o GameCenterPlayerAchievementSubmissionAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GameCenterPlayerAchievementSubmissionAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BundleId) {
		toSerialize["bundleId"] = o.BundleId
	}
	if !IsNil(o.ChallengeIds) {
		toSerialize["challengeIds"] = o.ChallengeIds
	}
	if !IsNil(o.PercentageAchieved) {
		toSerialize["percentageAchieved"] = o.PercentageAchieved
	}
	if !IsNil(o.ScopedPlayerId) {
		toSerialize["scopedPlayerId"] = o.ScopedPlayerId
	}
	if !IsNil(o.SubmittedDate) {
		toSerialize["submittedDate"] = o.SubmittedDate
	}
	if !IsNil(o.VendorIdentifier) {
		toSerialize["vendorIdentifier"] = o.VendorIdentifier
	}
	return toSerialize, nil
}

type NullableGameCenterPlayerAchievementSubmissionAttributes struct {
	value *GameCenterPlayerAchievementSubmissionAttributes
	isSet bool
}

func (v NullableGameCenterPlayerAchievementSubmissionAttributes) Get() *GameCenterPlayerAchievementSubmissionAttributes {
	return v.value
}

func (v *NullableGameCenterPlayerAchievementSubmissionAttributes) Set(val *GameCenterPlayerAchievementSubmissionAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableGameCenterPlayerAchievementSubmissionAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableGameCenterPlayerAchievementSubmissionAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGameCenterPlayerAchievementSubmissionAttributes(val *GameCenterPlayerAchievementSubmissionAttributes) *NullableGameCenterPlayerAchievementSubmissionAttributes {
	return &NullableGameCenterPlayerAchievementSubmissionAttributes{value: val, isSet: true}
}

func (v NullableGameCenterPlayerAchievementSubmissionAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGameCenterPlayerAchievementSubmissionAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



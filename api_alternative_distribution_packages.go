/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AlternativeDistributionPackagesAPIService AlternativeDistributionPackagesAPI service
type AlternativeDistributionPackagesAPIService service

type ApiAlternativeDistributionPackagesCreateInstanceRequest struct {
	ctx context.Context
	ApiService *AlternativeDistributionPackagesAPIService
	alternativeDistributionPackageCreateRequest *AlternativeDistributionPackageCreateRequest
}

// AlternativeDistributionPackage representation
func (r ApiAlternativeDistributionPackagesCreateInstanceRequest) AlternativeDistributionPackageCreateRequest(alternativeDistributionPackageCreateRequest AlternativeDistributionPackageCreateRequest) ApiAlternativeDistributionPackagesCreateInstanceRequest {
	r.alternativeDistributionPackageCreateRequest = &alternativeDistributionPackageCreateRequest
	return r
}

func (r ApiAlternativeDistributionPackagesCreateInstanceRequest) Execute() (*AlternativeDistributionPackageResponse, *http.Response, error) {
	return r.ApiService.AlternativeDistributionPackagesCreateInstanceExecute(r)
}

/*
AlternativeDistributionPackagesCreateInstance Method for AlternativeDistributionPackagesCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlternativeDistributionPackagesCreateInstanceRequest
*/
func (a *AlternativeDistributionPackagesAPIService) AlternativeDistributionPackagesCreateInstance(ctx context.Context) ApiAlternativeDistributionPackagesCreateInstanceRequest {
	return ApiAlternativeDistributionPackagesCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AlternativeDistributionPackageResponse
func (a *AlternativeDistributionPackagesAPIService) AlternativeDistributionPackagesCreateInstanceExecute(r ApiAlternativeDistributionPackagesCreateInstanceRequest) (*AlternativeDistributionPackageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlternativeDistributionPackageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlternativeDistributionPackagesAPIService.AlternativeDistributionPackagesCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/alternativeDistributionPackages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.alternativeDistributionPackageCreateRequest == nil {
		return localVarReturnValue, nil, reportError("alternativeDistributionPackageCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alternativeDistributionPackageCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlternativeDistributionPackagesGetInstanceRequest struct {
	ctx context.Context
	ApiService *AlternativeDistributionPackagesAPIService
	id string
	fieldsAlternativeDistributionPackages *[]string
	fieldsAlternativeDistributionPackageVersions *[]string
	include *[]string
	limitVersions *int32
}

// the fields to include for returned resources of type alternativeDistributionPackages
func (r ApiAlternativeDistributionPackagesGetInstanceRequest) FieldsAlternativeDistributionPackages(fieldsAlternativeDistributionPackages []string) ApiAlternativeDistributionPackagesGetInstanceRequest {
	r.fieldsAlternativeDistributionPackages = &fieldsAlternativeDistributionPackages
	return r
}

// the fields to include for returned resources of type alternativeDistributionPackageVersions
func (r ApiAlternativeDistributionPackagesGetInstanceRequest) FieldsAlternativeDistributionPackageVersions(fieldsAlternativeDistributionPackageVersions []string) ApiAlternativeDistributionPackagesGetInstanceRequest {
	r.fieldsAlternativeDistributionPackageVersions = &fieldsAlternativeDistributionPackageVersions
	return r
}

// comma-separated list of relationships to include
func (r ApiAlternativeDistributionPackagesGetInstanceRequest) Include(include []string) ApiAlternativeDistributionPackagesGetInstanceRequest {
	r.include = &include
	return r
}

// maximum number of related versions returned (when they are included)
func (r ApiAlternativeDistributionPackagesGetInstanceRequest) LimitVersions(limitVersions int32) ApiAlternativeDistributionPackagesGetInstanceRequest {
	r.limitVersions = &limitVersions
	return r
}

func (r ApiAlternativeDistributionPackagesGetInstanceRequest) Execute() (*AlternativeDistributionPackageResponse, *http.Response, error) {
	return r.ApiService.AlternativeDistributionPackagesGetInstanceExecute(r)
}

/*
AlternativeDistributionPackagesGetInstance Method for AlternativeDistributionPackagesGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAlternativeDistributionPackagesGetInstanceRequest
*/
func (a *AlternativeDistributionPackagesAPIService) AlternativeDistributionPackagesGetInstance(ctx context.Context, id string) ApiAlternativeDistributionPackagesGetInstanceRequest {
	return ApiAlternativeDistributionPackagesGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AlternativeDistributionPackageResponse
func (a *AlternativeDistributionPackagesAPIService) AlternativeDistributionPackagesGetInstanceExecute(r ApiAlternativeDistributionPackagesGetInstanceRequest) (*AlternativeDistributionPackageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlternativeDistributionPackageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlternativeDistributionPackagesAPIService.AlternativeDistributionPackagesGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/alternativeDistributionPackages/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAlternativeDistributionPackages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[alternativeDistributionPackages]", r.fieldsAlternativeDistributionPackages, "form", "csv")
	}
	if r.fieldsAlternativeDistributionPackageVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[alternativeDistributionPackageVersions]", r.fieldsAlternativeDistributionPackageVersions, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[versions]", r.limitVersions, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *AlternativeDistributionPackagesAPIService
	id string
	filterState *[]string
	fieldsAlternativeDistributionPackageVersions *[]string
	fieldsAlternativeDistributionPackageVariants *[]string
	fieldsAlternativeDistributionPackageDeltas *[]string
	fieldsAlternativeDistributionPackages *[]string
	limit *int32
	include *[]string
	limitVariants *int32
	limitDeltas *int32
}

// filter by attribute &#39;state&#39;
func (r ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest) FilterState(filterState []string) ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest {
	r.filterState = &filterState
	return r
}

// the fields to include for returned resources of type alternativeDistributionPackageVersions
func (r ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest) FieldsAlternativeDistributionPackageVersions(fieldsAlternativeDistributionPackageVersions []string) ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest {
	r.fieldsAlternativeDistributionPackageVersions = &fieldsAlternativeDistributionPackageVersions
	return r
}

// the fields to include for returned resources of type alternativeDistributionPackageVariants
func (r ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest) FieldsAlternativeDistributionPackageVariants(fieldsAlternativeDistributionPackageVariants []string) ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest {
	r.fieldsAlternativeDistributionPackageVariants = &fieldsAlternativeDistributionPackageVariants
	return r
}

// the fields to include for returned resources of type alternativeDistributionPackageDeltas
func (r ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest) FieldsAlternativeDistributionPackageDeltas(fieldsAlternativeDistributionPackageDeltas []string) ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest {
	r.fieldsAlternativeDistributionPackageDeltas = &fieldsAlternativeDistributionPackageDeltas
	return r
}

// the fields to include for returned resources of type alternativeDistributionPackages
func (r ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest) FieldsAlternativeDistributionPackages(fieldsAlternativeDistributionPackages []string) ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest {
	r.fieldsAlternativeDistributionPackages = &fieldsAlternativeDistributionPackages
	return r
}

// maximum resources per page
func (r ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest) Limit(limit int32) ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest) Include(include []string) ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related variants returned (when they are included)
func (r ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest) LimitVariants(limitVariants int32) ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest {
	r.limitVariants = &limitVariants
	return r
}

// maximum number of related deltas returned (when they are included)
func (r ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest) LimitDeltas(limitDeltas int32) ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest {
	r.limitDeltas = &limitDeltas
	return r
}

func (r ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest) Execute() (*AlternativeDistributionPackageVersionsResponse, *http.Response, error) {
	return r.ApiService.AlternativeDistributionPackagesVersionsGetToManyRelatedExecute(r)
}

/*
AlternativeDistributionPackagesVersionsGetToManyRelated Method for AlternativeDistributionPackagesVersionsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest
*/
func (a *AlternativeDistributionPackagesAPIService) AlternativeDistributionPackagesVersionsGetToManyRelated(ctx context.Context, id string) ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest {
	return ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AlternativeDistributionPackageVersionsResponse
func (a *AlternativeDistributionPackagesAPIService) AlternativeDistributionPackagesVersionsGetToManyRelatedExecute(r ApiAlternativeDistributionPackagesVersionsGetToManyRelatedRequest) (*AlternativeDistributionPackageVersionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AlternativeDistributionPackageVersionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlternativeDistributionPackagesAPIService.AlternativeDistributionPackagesVersionsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/alternativeDistributionPackages/{id}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[state]", r.filterState, "form", "csv")
	}
	if r.fieldsAlternativeDistributionPackageVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[alternativeDistributionPackageVersions]", r.fieldsAlternativeDistributionPackageVersions, "form", "csv")
	}
	if r.fieldsAlternativeDistributionPackageVariants != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[alternativeDistributionPackageVariants]", r.fieldsAlternativeDistributionPackageVariants, "form", "csv")
	}
	if r.fieldsAlternativeDistributionPackageDeltas != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[alternativeDistributionPackageDeltas]", r.fieldsAlternativeDistributionPackageDeltas, "form", "csv")
	}
	if r.fieldsAlternativeDistributionPackages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[alternativeDistributionPackages]", r.fieldsAlternativeDistributionPackages, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitVariants != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[variants]", r.limitVariants, "form", "")
	}
	if r.limitDeltas != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[deltas]", r.limitDeltas, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

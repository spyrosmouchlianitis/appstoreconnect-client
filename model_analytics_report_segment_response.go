/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect-client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AnalyticsReportSegmentResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyticsReportSegmentResponse{}

// AnalyticsReportSegmentResponse struct for AnalyticsReportSegmentResponse
type AnalyticsReportSegmentResponse struct {
	Data AnalyticsReportSegment `json:"data"`
	Links DocumentLinks `json:"links"`
}

type _AnalyticsReportSegmentResponse AnalyticsReportSegmentResponse

// NewAnalyticsReportSegmentResponse instantiates a new AnalyticsReportSegmentResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyticsReportSegmentResponse(data AnalyticsReportSegment, links DocumentLinks) *AnalyticsReportSegmentResponse {
	this := AnalyticsReportSegmentResponse{}
	this.Data = data
	this.Links = links
	return &this
}

// NewAnalyticsReportSegmentResponseWithDefaults instantiates a new AnalyticsReportSegmentResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyticsReportSegmentResponseWithDefaults() *AnalyticsReportSegmentResponse {
	this := AnalyticsReportSegmentResponse{}
	return &this
}

// GetData returns the Data field value
func (o *AnalyticsReportSegmentResponse) GetData() AnalyticsReportSegment {
	if o == nil {
		var ret AnalyticsReportSegment
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *AnalyticsReportSegmentResponse) GetDataOk() (*AnalyticsReportSegment, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *AnalyticsReportSegmentResponse) SetData(v AnalyticsReportSegment) {
	o.Data = v
}

// GetLinks returns the Links field value
func (o *AnalyticsReportSegmentResponse) GetLinks() DocumentLinks {
	if o == nil {
		var ret DocumentLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *AnalyticsReportSegmentResponse) GetLinksOk() (*DocumentLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *AnalyticsReportSegmentResponse) SetLinks(v DocumentLinks) {
	o.Links = v
}

func (o AnalyticsReportSegmentResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyticsReportSegmentResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["links"] = o.Links
	return toSerialize, nil
}

func (o *AnalyticsReportSegmentResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnalyticsReportSegmentResponse := _AnalyticsReportSegmentResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnalyticsReportSegmentResponse)

	if err != nil {
		return err
	}

	*o = AnalyticsReportSegmentResponse(varAnalyticsReportSegmentResponse)

	return err
}

type NullableAnalyticsReportSegmentResponse struct {
	value *AnalyticsReportSegmentResponse
	isSet bool
}

func (v NullableAnalyticsReportSegmentResponse) Get() *AnalyticsReportSegmentResponse {
	return v.value
}

func (v *NullableAnalyticsReportSegmentResponse) Set(val *AnalyticsReportSegmentResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsReportSegmentResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsReportSegmentResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsReportSegmentResponse(val *AnalyticsReportSegmentResponse) *NullableAnalyticsReportSegmentResponse {
	return &NullableAnalyticsReportSegmentResponse{value: val, isSet: true}
}

func (v NullableAnalyticsReportSegmentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsReportSegmentResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



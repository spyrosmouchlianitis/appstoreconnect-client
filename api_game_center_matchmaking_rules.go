/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect-client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// GameCenterMatchmakingRulesAPIService GameCenterMatchmakingRulesAPI service
type GameCenterMatchmakingRulesAPIService service

type ApiGameCenterMatchmakingRulesCreateInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingRulesAPIService
	gameCenterMatchmakingRuleCreateRequest *GameCenterMatchmakingRuleCreateRequest
}

// GameCenterMatchmakingRule representation
func (r ApiGameCenterMatchmakingRulesCreateInstanceRequest) GameCenterMatchmakingRuleCreateRequest(gameCenterMatchmakingRuleCreateRequest GameCenterMatchmakingRuleCreateRequest) ApiGameCenterMatchmakingRulesCreateInstanceRequest {
	r.gameCenterMatchmakingRuleCreateRequest = &gameCenterMatchmakingRuleCreateRequest
	return r
}

func (r ApiGameCenterMatchmakingRulesCreateInstanceRequest) Execute() (*GameCenterMatchmakingRuleResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRulesCreateInstanceExecute(r)
}

/*
GameCenterMatchmakingRulesCreateInstance Method for GameCenterMatchmakingRulesCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGameCenterMatchmakingRulesCreateInstanceRequest
*/
func (a *GameCenterMatchmakingRulesAPIService) GameCenterMatchmakingRulesCreateInstance(ctx context.Context) ApiGameCenterMatchmakingRulesCreateInstanceRequest {
	return ApiGameCenterMatchmakingRulesCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingRuleResponse
func (a *GameCenterMatchmakingRulesAPIService) GameCenterMatchmakingRulesCreateInstanceExecute(r ApiGameCenterMatchmakingRulesCreateInstanceRequest) (*GameCenterMatchmakingRuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingRuleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingRulesAPIService.GameCenterMatchmakingRulesCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterMatchmakingRuleCreateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterMatchmakingRuleCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterMatchmakingRuleCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingRulesDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingRulesAPIService
	id string
}

func (r ApiGameCenterMatchmakingRulesDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRulesDeleteInstanceExecute(r)
}

/*
GameCenterMatchmakingRulesDeleteInstance Method for GameCenterMatchmakingRulesDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingRulesDeleteInstanceRequest
*/
func (a *GameCenterMatchmakingRulesAPIService) GameCenterMatchmakingRulesDeleteInstance(ctx context.Context, id string) ApiGameCenterMatchmakingRulesDeleteInstanceRequest {
	return ApiGameCenterMatchmakingRulesDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GameCenterMatchmakingRulesAPIService) GameCenterMatchmakingRulesDeleteInstanceExecute(r ApiGameCenterMatchmakingRulesDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingRulesAPIService.GameCenterMatchmakingRulesDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRules/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingRulesAPIService
	id string
	granularity *string
	groupBy *[]string
	filterResult *string
	filterGameCenterMatchmakingQueue *string
	sort *[]string
	limit *int32
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest) Granularity(granularity string) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest) GroupBy(groupBy []string) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;result&#39; attribute dimension
func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest) FilterResult(filterResult string) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest {
	r.filterResult = &filterResult
	return r
}

// filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension
func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest) FilterGameCenterMatchmakingQueue(filterGameCenterMatchmakingQueue string) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest {
	r.filterGameCenterMatchmakingQueue = &filterGameCenterMatchmakingQueue
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest) Sort(sort []string) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest {
	r.sort = &sort
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest) Limit(limit int32) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest {
	r.limit = &limit
	return r
}

func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest) Execute() (*GameCenterMatchmakingBooleanRuleResultsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsExecute(r)
}

/*
GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics Method for GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest
*/
func (a *GameCenterMatchmakingRulesAPIService) GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest {
	return ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingBooleanRuleResultsV1MetricResponse
func (a *GameCenterMatchmakingRulesAPIService) GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsExecute(r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest) (*GameCenterMatchmakingBooleanRuleResultsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingBooleanRuleResultsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingRulesAPIService.GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "form", "csv")
	}
	if r.filterResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[result]", r.filterResult, "form", "")
	}
	if r.filterGameCenterMatchmakingQueue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterMatchmakingQueue]", r.filterGameCenterMatchmakingQueue, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingRulesAPIService
	id string
	granularity *string
	groupBy *[]string
	filterGameCenterMatchmakingQueue *string
	sort *[]string
	limit *int32
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest) Granularity(granularity string) ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest) GroupBy(groupBy []string) ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension
func (r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest) FilterGameCenterMatchmakingQueue(filterGameCenterMatchmakingQueue string) ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest {
	r.filterGameCenterMatchmakingQueue = &filterGameCenterMatchmakingQueue
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest) Sort(sort []string) ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest {
	r.sort = &sort
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest) Limit(limit int32) ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest {
	r.limit = &limit
	return r
}

func (r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest) Execute() (*GameCenterMatchmakingNumberRuleResultsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsExecute(r)
}

/*
GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics Method for GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest
*/
func (a *GameCenterMatchmakingRulesAPIService) GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest {
	return ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingNumberRuleResultsV1MetricResponse
func (a *GameCenterMatchmakingRulesAPIService) GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsExecute(r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest) (*GameCenterMatchmakingNumberRuleResultsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingNumberRuleResultsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingRulesAPIService.GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "form", "csv")
	}
	if r.filterGameCenterMatchmakingQueue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterMatchmakingQueue]", r.filterGameCenterMatchmakingQueue, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingRulesAPIService
	id string
	granularity *string
	groupBy *[]string
	filterGameCenterMatchmakingQueue *string
	sort *[]string
	limit *int32
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest) Granularity(granularity string) ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest) GroupBy(groupBy []string) ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension
func (r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest) FilterGameCenterMatchmakingQueue(filterGameCenterMatchmakingQueue string) ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest {
	r.filterGameCenterMatchmakingQueue = &filterGameCenterMatchmakingQueue
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest) Sort(sort []string) ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest {
	r.sort = &sort
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest) Limit(limit int32) ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest {
	r.limit = &limit
	return r
}

func (r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest) Execute() (*GameCenterMatchmakingRuleErrorsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsExecute(r)
}

/*
GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics Method for GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest
*/
func (a *GameCenterMatchmakingRulesAPIService) GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest {
	return ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingRuleErrorsV1MetricResponse
func (a *GameCenterMatchmakingRulesAPIService) GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsExecute(r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest) (*GameCenterMatchmakingRuleErrorsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingRuleErrorsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingRulesAPIService.GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "form", "csv")
	}
	if r.filterGameCenterMatchmakingQueue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterMatchmakingQueue]", r.filterGameCenterMatchmakingQueue, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingRulesUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterMatchmakingRulesAPIService
	id string
	gameCenterMatchmakingRuleUpdateRequest *GameCenterMatchmakingRuleUpdateRequest
}

// GameCenterMatchmakingRule representation
func (r ApiGameCenterMatchmakingRulesUpdateInstanceRequest) GameCenterMatchmakingRuleUpdateRequest(gameCenterMatchmakingRuleUpdateRequest GameCenterMatchmakingRuleUpdateRequest) ApiGameCenterMatchmakingRulesUpdateInstanceRequest {
	r.gameCenterMatchmakingRuleUpdateRequest = &gameCenterMatchmakingRuleUpdateRequest
	return r
}

func (r ApiGameCenterMatchmakingRulesUpdateInstanceRequest) Execute() (*GameCenterMatchmakingRuleResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRulesUpdateInstanceExecute(r)
}

/*
GameCenterMatchmakingRulesUpdateInstance Method for GameCenterMatchmakingRulesUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingRulesUpdateInstanceRequest
*/
func (a *GameCenterMatchmakingRulesAPIService) GameCenterMatchmakingRulesUpdateInstance(ctx context.Context, id string) ApiGameCenterMatchmakingRulesUpdateInstanceRequest {
	return ApiGameCenterMatchmakingRulesUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingRuleResponse
func (a *GameCenterMatchmakingRulesAPIService) GameCenterMatchmakingRulesUpdateInstanceExecute(r ApiGameCenterMatchmakingRulesUpdateInstanceRequest) (*GameCenterMatchmakingRuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingRuleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterMatchmakingRulesAPIService.GameCenterMatchmakingRulesUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRules/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterMatchmakingRuleUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterMatchmakingRuleUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterMatchmakingRuleUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

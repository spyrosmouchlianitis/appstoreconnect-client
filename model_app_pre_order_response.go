/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AppPreOrderResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppPreOrderResponse{}

// AppPreOrderResponse struct for AppPreOrderResponse
type AppPreOrderResponse struct {
	// Deprecated
	Data AppPreOrder `json:"data"`
	Included []App `json:"included,omitempty"`
	Links DocumentLinks `json:"links"`
}

type _AppPreOrderResponse AppPreOrderResponse

// NewAppPreOrderResponse instantiates a new AppPreOrderResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppPreOrderResponse(data AppPreOrder, links DocumentLinks) *AppPreOrderResponse {
	this := AppPreOrderResponse{}
	this.Data = data
	this.Links = links
	return &this
}

// NewAppPreOrderResponseWithDefaults instantiates a new AppPreOrderResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppPreOrderResponseWithDefaults() *AppPreOrderResponse {
	this := AppPreOrderResponse{}
	return &this
}

// GetData returns the Data field value
// Deprecated
func (o *AppPreOrderResponse) GetData() AppPreOrder {
	if o == nil {
		var ret AppPreOrder
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *AppPreOrderResponse) GetDataOk() (*AppPreOrder, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
// Deprecated
func (o *AppPreOrderResponse) SetData(v AppPreOrder) {
	o.Data = v
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *AppPreOrderResponse) GetIncluded() []App {
	if o == nil || IsNil(o.Included) {
		var ret []App
		return ret
	}
	return o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppPreOrderResponse) GetIncludedOk() ([]App, bool) {
	if o == nil || IsNil(o.Included) {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *AppPreOrderResponse) HasIncluded() bool {
	if o != nil && !IsNil(o.Included) {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given []App and assigns it to the Included field.
func (o *AppPreOrderResponse) SetIncluded(v []App) {
	o.Included = v
}

// GetLinks returns the Links field value
func (o *AppPreOrderResponse) GetLinks() DocumentLinks {
	if o == nil {
		var ret DocumentLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *AppPreOrderResponse) GetLinksOk() (*DocumentLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *AppPreOrderResponse) SetLinks(v DocumentLinks) {
	o.Links = v
}

func (o AppPreOrderResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppPreOrderResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	if !IsNil(o.Included) {
		toSerialize["included"] = o.Included
	}
	toSerialize["links"] = o.Links
	return toSerialize, nil
}

func (o *AppPreOrderResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppPreOrderResponse := _AppPreOrderResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppPreOrderResponse)

	if err != nil {
		return err
	}

	*o = AppPreOrderResponse(varAppPreOrderResponse)

	return err
}

type NullableAppPreOrderResponse struct {
	value *AppPreOrderResponse
	isSet bool
}

func (v NullableAppPreOrderResponse) Get() *AppPreOrderResponse {
	return v.value
}

func (v *NullableAppPreOrderResponse) Set(val *AppPreOrderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAppPreOrderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAppPreOrderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppPreOrderResponse(val *AppPreOrderResponse) *NullableAppPreOrderResponse {
	return &NullableAppPreOrderResponse{value: val, isSet: true}
}

func (v NullableAppPreOrderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppPreOrderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



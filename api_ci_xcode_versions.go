/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect-client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CiXcodeVersionsAPIService CiXcodeVersionsAPI service
type CiXcodeVersionsAPIService service

type ApiCiXcodeVersionsGetCollectionRequest struct {
	ctx context.Context
	ApiService *CiXcodeVersionsAPIService
	fieldsCiXcodeVersions *[]string
	fieldsCiMacOsVersions *[]string
	limit *int32
	include *[]string
	limitMacOsVersions *int32
}

// the fields to include for returned resources of type ciXcodeVersions
func (r ApiCiXcodeVersionsGetCollectionRequest) FieldsCiXcodeVersions(fieldsCiXcodeVersions []string) ApiCiXcodeVersionsGetCollectionRequest {
	r.fieldsCiXcodeVersions = &fieldsCiXcodeVersions
	return r
}

// the fields to include for returned resources of type ciMacOsVersions
func (r ApiCiXcodeVersionsGetCollectionRequest) FieldsCiMacOsVersions(fieldsCiMacOsVersions []string) ApiCiXcodeVersionsGetCollectionRequest {
	r.fieldsCiMacOsVersions = &fieldsCiMacOsVersions
	return r
}

// maximum resources per page
func (r ApiCiXcodeVersionsGetCollectionRequest) Limit(limit int32) ApiCiXcodeVersionsGetCollectionRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiCiXcodeVersionsGetCollectionRequest) Include(include []string) ApiCiXcodeVersionsGetCollectionRequest {
	r.include = &include
	return r
}

// maximum number of related macOsVersions returned (when they are included)
func (r ApiCiXcodeVersionsGetCollectionRequest) LimitMacOsVersions(limitMacOsVersions int32) ApiCiXcodeVersionsGetCollectionRequest {
	r.limitMacOsVersions = &limitMacOsVersions
	return r
}

func (r ApiCiXcodeVersionsGetCollectionRequest) Execute() (*CiXcodeVersionsResponse, *http.Response, error) {
	return r.ApiService.CiXcodeVersionsGetCollectionExecute(r)
}

/*
CiXcodeVersionsGetCollection Method for CiXcodeVersionsGetCollection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCiXcodeVersionsGetCollectionRequest
*/
func (a *CiXcodeVersionsAPIService) CiXcodeVersionsGetCollection(ctx context.Context) ApiCiXcodeVersionsGetCollectionRequest {
	return ApiCiXcodeVersionsGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CiXcodeVersionsResponse
func (a *CiXcodeVersionsAPIService) CiXcodeVersionsGetCollectionExecute(r ApiCiXcodeVersionsGetCollectionRequest) (*CiXcodeVersionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CiXcodeVersionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiXcodeVersionsAPIService.CiXcodeVersionsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciXcodeVersions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsCiXcodeVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciXcodeVersions]", r.fieldsCiXcodeVersions, "form", "csv")
	}
	if r.fieldsCiMacOsVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciMacOsVersions]", r.fieldsCiMacOsVersions, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitMacOsVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[macOsVersions]", r.limitMacOsVersions, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCiXcodeVersionsGetInstanceRequest struct {
	ctx context.Context
	ApiService *CiXcodeVersionsAPIService
	id string
	fieldsCiXcodeVersions *[]string
	fieldsCiMacOsVersions *[]string
	include *[]string
	limitMacOsVersions *int32
}

// the fields to include for returned resources of type ciXcodeVersions
func (r ApiCiXcodeVersionsGetInstanceRequest) FieldsCiXcodeVersions(fieldsCiXcodeVersions []string) ApiCiXcodeVersionsGetInstanceRequest {
	r.fieldsCiXcodeVersions = &fieldsCiXcodeVersions
	return r
}

// the fields to include for returned resources of type ciMacOsVersions
func (r ApiCiXcodeVersionsGetInstanceRequest) FieldsCiMacOsVersions(fieldsCiMacOsVersions []string) ApiCiXcodeVersionsGetInstanceRequest {
	r.fieldsCiMacOsVersions = &fieldsCiMacOsVersions
	return r
}

// comma-separated list of relationships to include
func (r ApiCiXcodeVersionsGetInstanceRequest) Include(include []string) ApiCiXcodeVersionsGetInstanceRequest {
	r.include = &include
	return r
}

// maximum number of related macOsVersions returned (when they are included)
func (r ApiCiXcodeVersionsGetInstanceRequest) LimitMacOsVersions(limitMacOsVersions int32) ApiCiXcodeVersionsGetInstanceRequest {
	r.limitMacOsVersions = &limitMacOsVersions
	return r
}

func (r ApiCiXcodeVersionsGetInstanceRequest) Execute() (*CiXcodeVersionResponse, *http.Response, error) {
	return r.ApiService.CiXcodeVersionsGetInstanceExecute(r)
}

/*
CiXcodeVersionsGetInstance Method for CiXcodeVersionsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiCiXcodeVersionsGetInstanceRequest
*/
func (a *CiXcodeVersionsAPIService) CiXcodeVersionsGetInstance(ctx context.Context, id string) ApiCiXcodeVersionsGetInstanceRequest {
	return ApiCiXcodeVersionsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CiXcodeVersionResponse
func (a *CiXcodeVersionsAPIService) CiXcodeVersionsGetInstanceExecute(r ApiCiXcodeVersionsGetInstanceRequest) (*CiXcodeVersionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CiXcodeVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiXcodeVersionsAPIService.CiXcodeVersionsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciXcodeVersions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsCiXcodeVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciXcodeVersions]", r.fieldsCiXcodeVersions, "form", "csv")
	}
	if r.fieldsCiMacOsVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciMacOsVersions]", r.fieldsCiMacOsVersions, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitMacOsVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[macOsVersions]", r.limitMacOsVersions, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *CiXcodeVersionsAPIService
	id string
	fieldsCiMacOsVersions *[]string
	fieldsCiXcodeVersions *[]string
	limit *int32
	include *[]string
	limitXcodeVersions *int32
}

// the fields to include for returned resources of type ciMacOsVersions
func (r ApiCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest) FieldsCiMacOsVersions(fieldsCiMacOsVersions []string) ApiCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest {
	r.fieldsCiMacOsVersions = &fieldsCiMacOsVersions
	return r
}

// the fields to include for returned resources of type ciXcodeVersions
func (r ApiCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest) FieldsCiXcodeVersions(fieldsCiXcodeVersions []string) ApiCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest {
	r.fieldsCiXcodeVersions = &fieldsCiXcodeVersions
	return r
}

// maximum resources per page
func (r ApiCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest) Limit(limit int32) ApiCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest) Include(include []string) ApiCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related xcodeVersions returned (when they are included)
func (r ApiCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest) LimitXcodeVersions(limitXcodeVersions int32) ApiCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest {
	r.limitXcodeVersions = &limitXcodeVersions
	return r
}

func (r ApiCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest) Execute() (*CiMacOsVersionsResponse, *http.Response, error) {
	return r.ApiService.CiXcodeVersionsMacOsVersionsGetToManyRelatedExecute(r)
}

/*
CiXcodeVersionsMacOsVersionsGetToManyRelated Method for CiXcodeVersionsMacOsVersionsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest
*/
func (a *CiXcodeVersionsAPIService) CiXcodeVersionsMacOsVersionsGetToManyRelated(ctx context.Context, id string) ApiCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest {
	return ApiCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CiMacOsVersionsResponse
func (a *CiXcodeVersionsAPIService) CiXcodeVersionsMacOsVersionsGetToManyRelatedExecute(r ApiCiXcodeVersionsMacOsVersionsGetToManyRelatedRequest) (*CiMacOsVersionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CiMacOsVersionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiXcodeVersionsAPIService.CiXcodeVersionsMacOsVersionsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciXcodeVersions/{id}/macOsVersions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsCiMacOsVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciMacOsVersions]", r.fieldsCiMacOsVersions, "form", "csv")
	}
	if r.fieldsCiXcodeVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciXcodeVersions]", r.fieldsCiXcodeVersions, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitXcodeVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[xcodeVersions]", r.limitXcodeVersions, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect-client

import (
	"encoding/json"
	"fmt"
)

// BetaTesterState the model 'BetaTesterState'
type BetaTesterState string

// List of BetaTesterState
const (
	NOT_INVITED BetaTesterState = "NOT_INVITED"
	INVITED BetaTesterState = "INVITED"
	ACCEPTED BetaTesterState = "ACCEPTED"
	INSTALLED BetaTesterState = "INSTALLED"
	REVOKED BetaTesterState = "REVOKED"
)

// All allowed values of BetaTesterState enum
var AllowedBetaTesterStateEnumValues = []BetaTesterState{
	"NOT_INVITED",
	"INVITED",
	"ACCEPTED",
	"INSTALLED",
	"REVOKED",
}

func (v *BetaTesterState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BetaTesterState(value)
	for _, existing := range AllowedBetaTesterStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BetaTesterState", value)
}

// NewBetaTesterStateFromValue returns a pointer to a valid BetaTesterState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBetaTesterStateFromValue(v string) (*BetaTesterState, error) {
	ev := BetaTesterState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BetaTesterState: valid values are %v", v, AllowedBetaTesterStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BetaTesterState) IsValid() bool {
	for _, existing := range AllowedBetaTesterStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BetaTesterState value
func (v BetaTesterState) Ptr() *BetaTesterState {
	return &v
}

type NullableBetaTesterState struct {
	value *BetaTesterState
	isSet bool
}

func (v NullableBetaTesterState) Get() *BetaTesterState {
	return v.value
}

func (v *NullableBetaTesterState) Set(val *BetaTesterState) {
	v.value = val
	v.isSet = true
}

func (v NullableBetaTesterState) IsSet() bool {
	return v.isSet
}

func (v *NullableBetaTesterState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBetaTesterState(val *BetaTesterState) *NullableBetaTesterState {
	return &NullableBetaTesterState{value: val, isSet: true}
}

func (v NullableBetaTesterState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBetaTesterState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


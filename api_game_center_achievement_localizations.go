/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect-client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// GameCenterAchievementLocalizationsAPIService GameCenterAchievementLocalizationsAPI service
type GameCenterAchievementLocalizationsAPIService service

type ApiGameCenterAchievementLocalizationsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterAchievementLocalizationsAPIService
	gameCenterAchievementLocalizationCreateRequest *GameCenterAchievementLocalizationCreateRequest
}

// GameCenterAchievementLocalization representation
func (r ApiGameCenterAchievementLocalizationsCreateInstanceRequest) GameCenterAchievementLocalizationCreateRequest(gameCenterAchievementLocalizationCreateRequest GameCenterAchievementLocalizationCreateRequest) ApiGameCenterAchievementLocalizationsCreateInstanceRequest {
	r.gameCenterAchievementLocalizationCreateRequest = &gameCenterAchievementLocalizationCreateRequest
	return r
}

func (r ApiGameCenterAchievementLocalizationsCreateInstanceRequest) Execute() (*GameCenterAchievementLocalizationResponse, *http.Response, error) {
	return r.ApiService.GameCenterAchievementLocalizationsCreateInstanceExecute(r)
}

/*
GameCenterAchievementLocalizationsCreateInstance Method for GameCenterAchievementLocalizationsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGameCenterAchievementLocalizationsCreateInstanceRequest
*/
func (a *GameCenterAchievementLocalizationsAPIService) GameCenterAchievementLocalizationsCreateInstance(ctx context.Context) ApiGameCenterAchievementLocalizationsCreateInstanceRequest {
	return ApiGameCenterAchievementLocalizationsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GameCenterAchievementLocalizationResponse
func (a *GameCenterAchievementLocalizationsAPIService) GameCenterAchievementLocalizationsCreateInstanceExecute(r ApiGameCenterAchievementLocalizationsCreateInstanceRequest) (*GameCenterAchievementLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterAchievementLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterAchievementLocalizationsAPIService.GameCenterAchievementLocalizationsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterAchievementLocalizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterAchievementLocalizationCreateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterAchievementLocalizationCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterAchievementLocalizationCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterAchievementLocalizationsDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterAchievementLocalizationsAPIService
	id string
}

func (r ApiGameCenterAchievementLocalizationsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterAchievementLocalizationsDeleteInstanceExecute(r)
}

/*
GameCenterAchievementLocalizationsDeleteInstance Method for GameCenterAchievementLocalizationsDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterAchievementLocalizationsDeleteInstanceRequest
*/
func (a *GameCenterAchievementLocalizationsAPIService) GameCenterAchievementLocalizationsDeleteInstance(ctx context.Context, id string) ApiGameCenterAchievementLocalizationsDeleteInstanceRequest {
	return ApiGameCenterAchievementLocalizationsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GameCenterAchievementLocalizationsAPIService) GameCenterAchievementLocalizationsDeleteInstanceExecute(r ApiGameCenterAchievementLocalizationsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterAchievementLocalizationsAPIService.GameCenterAchievementLocalizationsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterAchievementLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *GameCenterAchievementLocalizationsAPIService
	id string
	fieldsGameCenterAchievements *[]string
	fieldsGameCenterDetails *[]string
	fieldsGameCenterGroups *[]string
	fieldsGameCenterAchievementLocalizations *[]string
	fieldsGameCenterAchievementReleases *[]string
	include *[]string
	limitLocalizations *int32
	limitReleases *int32
}

// the fields to include for returned resources of type gameCenterAchievements
func (r ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest) FieldsGameCenterAchievements(fieldsGameCenterAchievements []string) ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest {
	r.fieldsGameCenterAchievements = &fieldsGameCenterAchievements
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterGroups
func (r ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest) FieldsGameCenterGroups(fieldsGameCenterGroups []string) ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest {
	r.fieldsGameCenterGroups = &fieldsGameCenterGroups
	return r
}

// the fields to include for returned resources of type gameCenterAchievementLocalizations
func (r ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest) FieldsGameCenterAchievementLocalizations(fieldsGameCenterAchievementLocalizations []string) ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest {
	r.fieldsGameCenterAchievementLocalizations = &fieldsGameCenterAchievementLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterAchievementReleases
func (r ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest) FieldsGameCenterAchievementReleases(fieldsGameCenterAchievementReleases []string) ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest {
	r.fieldsGameCenterAchievementReleases = &fieldsGameCenterAchievementReleases
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest) Include(include []string) ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related localizations returned (when they are included)
func (r ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest) LimitLocalizations(limitLocalizations int32) ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest {
	r.limitLocalizations = &limitLocalizations
	return r
}

// maximum number of related releases returned (when they are included)
func (r ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest) LimitReleases(limitReleases int32) ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest {
	r.limitReleases = &limitReleases
	return r
}

func (r ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest) Execute() (*GameCenterAchievementResponse, *http.Response, error) {
	return r.ApiService.GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedExecute(r)
}

/*
GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelated Method for GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest
*/
func (a *GameCenterAchievementLocalizationsAPIService) GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelated(ctx context.Context, id string) ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest {
	return ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterAchievementResponse
func (a *GameCenterAchievementLocalizationsAPIService) GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedExecute(r ApiGameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRequest) (*GameCenterAchievementResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterAchievementResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterAchievementLocalizationsAPIService.GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterAchievementLocalizations/{id}/gameCenterAchievement"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievements]", r.fieldsGameCenterAchievements, "form", "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "form", "csv")
	}
	if r.fieldsGameCenterGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterGroups]", r.fieldsGameCenterGroups, "form", "csv")
	}
	if r.fieldsGameCenterAchievementLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementLocalizations]", r.fieldsGameCenterAchievementLocalizations, "form", "csv")
	}
	if r.fieldsGameCenterAchievementReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementReleases]", r.fieldsGameCenterAchievementReleases, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[localizations]", r.limitLocalizations, "form", "")
	}
	if r.limitReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[releases]", r.limitReleases, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *GameCenterAchievementLocalizationsAPIService
	id string
	fieldsGameCenterAchievementImages *[]string
	fieldsGameCenterAchievementLocalizations *[]string
	include *[]string
}

// the fields to include for returned resources of type gameCenterAchievementImages
func (r ApiGameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRequest) FieldsGameCenterAchievementImages(fieldsGameCenterAchievementImages []string) ApiGameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRequest {
	r.fieldsGameCenterAchievementImages = &fieldsGameCenterAchievementImages
	return r
}

// the fields to include for returned resources of type gameCenterAchievementLocalizations
func (r ApiGameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRequest) FieldsGameCenterAchievementLocalizations(fieldsGameCenterAchievementLocalizations []string) ApiGameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRequest {
	r.fieldsGameCenterAchievementLocalizations = &fieldsGameCenterAchievementLocalizations
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRequest) Include(include []string) ApiGameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRequest) Execute() (*GameCenterAchievementImageResponse, *http.Response, error) {
	return r.ApiService.GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedExecute(r)
}

/*
GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelated Method for GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRequest
*/
func (a *GameCenterAchievementLocalizationsAPIService) GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelated(ctx context.Context, id string) ApiGameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRequest {
	return ApiGameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterAchievementImageResponse
func (a *GameCenterAchievementLocalizationsAPIService) GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedExecute(r ApiGameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRequest) (*GameCenterAchievementImageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterAchievementImageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterAchievementLocalizationsAPIService.GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterAchievementLocalizations/{id}/gameCenterAchievementImage"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterAchievementImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementImages]", r.fieldsGameCenterAchievementImages, "form", "csv")
	}
	if r.fieldsGameCenterAchievementLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementLocalizations]", r.fieldsGameCenterAchievementLocalizations, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterAchievementLocalizationsGetInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterAchievementLocalizationsAPIService
	id string
	fieldsGameCenterAchievementLocalizations *[]string
	fieldsGameCenterAchievements *[]string
	fieldsGameCenterAchievementImages *[]string
	include *[]string
}

// the fields to include for returned resources of type gameCenterAchievementLocalizations
func (r ApiGameCenterAchievementLocalizationsGetInstanceRequest) FieldsGameCenterAchievementLocalizations(fieldsGameCenterAchievementLocalizations []string) ApiGameCenterAchievementLocalizationsGetInstanceRequest {
	r.fieldsGameCenterAchievementLocalizations = &fieldsGameCenterAchievementLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterAchievements
func (r ApiGameCenterAchievementLocalizationsGetInstanceRequest) FieldsGameCenterAchievements(fieldsGameCenterAchievements []string) ApiGameCenterAchievementLocalizationsGetInstanceRequest {
	r.fieldsGameCenterAchievements = &fieldsGameCenterAchievements
	return r
}

// the fields to include for returned resources of type gameCenterAchievementImages
func (r ApiGameCenterAchievementLocalizationsGetInstanceRequest) FieldsGameCenterAchievementImages(fieldsGameCenterAchievementImages []string) ApiGameCenterAchievementLocalizationsGetInstanceRequest {
	r.fieldsGameCenterAchievementImages = &fieldsGameCenterAchievementImages
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterAchievementLocalizationsGetInstanceRequest) Include(include []string) ApiGameCenterAchievementLocalizationsGetInstanceRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterAchievementLocalizationsGetInstanceRequest) Execute() (*GameCenterAchievementLocalizationResponse, *http.Response, error) {
	return r.ApiService.GameCenterAchievementLocalizationsGetInstanceExecute(r)
}

/*
GameCenterAchievementLocalizationsGetInstance Method for GameCenterAchievementLocalizationsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterAchievementLocalizationsGetInstanceRequest
*/
func (a *GameCenterAchievementLocalizationsAPIService) GameCenterAchievementLocalizationsGetInstance(ctx context.Context, id string) ApiGameCenterAchievementLocalizationsGetInstanceRequest {
	return ApiGameCenterAchievementLocalizationsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterAchievementLocalizationResponse
func (a *GameCenterAchievementLocalizationsAPIService) GameCenterAchievementLocalizationsGetInstanceExecute(r ApiGameCenterAchievementLocalizationsGetInstanceRequest) (*GameCenterAchievementLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterAchievementLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterAchievementLocalizationsAPIService.GameCenterAchievementLocalizationsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterAchievementLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterAchievementLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementLocalizations]", r.fieldsGameCenterAchievementLocalizations, "form", "csv")
	}
	if r.fieldsGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievements]", r.fieldsGameCenterAchievements, "form", "csv")
	}
	if r.fieldsGameCenterAchievementImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementImages]", r.fieldsGameCenterAchievementImages, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterAchievementLocalizationsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *GameCenterAchievementLocalizationsAPIService
	id string
	gameCenterAchievementLocalizationUpdateRequest *GameCenterAchievementLocalizationUpdateRequest
}

// GameCenterAchievementLocalization representation
func (r ApiGameCenterAchievementLocalizationsUpdateInstanceRequest) GameCenterAchievementLocalizationUpdateRequest(gameCenterAchievementLocalizationUpdateRequest GameCenterAchievementLocalizationUpdateRequest) ApiGameCenterAchievementLocalizationsUpdateInstanceRequest {
	r.gameCenterAchievementLocalizationUpdateRequest = &gameCenterAchievementLocalizationUpdateRequest
	return r
}

func (r ApiGameCenterAchievementLocalizationsUpdateInstanceRequest) Execute() (*GameCenterAchievementLocalizationResponse, *http.Response, error) {
	return r.ApiService.GameCenterAchievementLocalizationsUpdateInstanceExecute(r)
}

/*
GameCenterAchievementLocalizationsUpdateInstance Method for GameCenterAchievementLocalizationsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterAchievementLocalizationsUpdateInstanceRequest
*/
func (a *GameCenterAchievementLocalizationsAPIService) GameCenterAchievementLocalizationsUpdateInstance(ctx context.Context, id string) ApiGameCenterAchievementLocalizationsUpdateInstanceRequest {
	return ApiGameCenterAchievementLocalizationsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterAchievementLocalizationResponse
func (a *GameCenterAchievementLocalizationsAPIService) GameCenterAchievementLocalizationsUpdateInstanceExecute(r ApiGameCenterAchievementLocalizationsUpdateInstanceRequest) (*GameCenterAchievementLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterAchievementLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterAchievementLocalizationsAPIService.GameCenterAchievementLocalizationsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterAchievementLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterAchievementLocalizationUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterAchievementLocalizationUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterAchievementLocalizationUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

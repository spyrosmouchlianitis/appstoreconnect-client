/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect-client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CiProductsAPIService CiProductsAPI service
type CiProductsAPIService service

type ApiCiProductsAdditionalRepositoriesGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *CiProductsAPIService
	id string
	filterId *[]string
	fieldsScmRepositories *[]string
	fieldsScmProviders *[]string
	fieldsScmGitReferences *[]string
	limit *int32
	include *[]string
}

// filter by id(s)
func (r ApiCiProductsAdditionalRepositoriesGetToManyRelatedRequest) FilterId(filterId []string) ApiCiProductsAdditionalRepositoriesGetToManyRelatedRequest {
	r.filterId = &filterId
	return r
}

// the fields to include for returned resources of type scmRepositories
func (r ApiCiProductsAdditionalRepositoriesGetToManyRelatedRequest) FieldsScmRepositories(fieldsScmRepositories []string) ApiCiProductsAdditionalRepositoriesGetToManyRelatedRequest {
	r.fieldsScmRepositories = &fieldsScmRepositories
	return r
}

// the fields to include for returned resources of type scmProviders
func (r ApiCiProductsAdditionalRepositoriesGetToManyRelatedRequest) FieldsScmProviders(fieldsScmProviders []string) ApiCiProductsAdditionalRepositoriesGetToManyRelatedRequest {
	r.fieldsScmProviders = &fieldsScmProviders
	return r
}

// the fields to include for returned resources of type scmGitReferences
func (r ApiCiProductsAdditionalRepositoriesGetToManyRelatedRequest) FieldsScmGitReferences(fieldsScmGitReferences []string) ApiCiProductsAdditionalRepositoriesGetToManyRelatedRequest {
	r.fieldsScmGitReferences = &fieldsScmGitReferences
	return r
}

// maximum resources per page
func (r ApiCiProductsAdditionalRepositoriesGetToManyRelatedRequest) Limit(limit int32) ApiCiProductsAdditionalRepositoriesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiCiProductsAdditionalRepositoriesGetToManyRelatedRequest) Include(include []string) ApiCiProductsAdditionalRepositoriesGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiCiProductsAdditionalRepositoriesGetToManyRelatedRequest) Execute() (*ScmRepositoriesResponse, *http.Response, error) {
	return r.ApiService.CiProductsAdditionalRepositoriesGetToManyRelatedExecute(r)
}

/*
CiProductsAdditionalRepositoriesGetToManyRelated Method for CiProductsAdditionalRepositoriesGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiCiProductsAdditionalRepositoriesGetToManyRelatedRequest
*/
func (a *CiProductsAPIService) CiProductsAdditionalRepositoriesGetToManyRelated(ctx context.Context, id string) ApiCiProductsAdditionalRepositoriesGetToManyRelatedRequest {
	return ApiCiProductsAdditionalRepositoriesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScmRepositoriesResponse
func (a *CiProductsAPIService) CiProductsAdditionalRepositoriesGetToManyRelatedExecute(r ApiCiProductsAdditionalRepositoriesGetToManyRelatedRequest) (*ScmRepositoriesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScmRepositoriesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiProductsAPIService.CiProductsAdditionalRepositoriesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciProducts/{id}/additionalRepositories"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[id]", r.filterId, "form", "csv")
	}
	if r.fieldsScmRepositories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[scmRepositories]", r.fieldsScmRepositories, "form", "csv")
	}
	if r.fieldsScmProviders != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[scmProviders]", r.fieldsScmProviders, "form", "csv")
	}
	if r.fieldsScmGitReferences != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[scmGitReferences]", r.fieldsScmGitReferences, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCiProductsAppGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *CiProductsAPIService
	id string
	fieldsApps *[]string
	fieldsAppEncryptionDeclarations *[]string
	fieldsCiProducts *[]string
	fieldsBetaGroups *[]string
	fieldsAppStoreVersions *[]string
	fieldsPreReleaseVersions *[]string
	fieldsBetaAppLocalizations *[]string
	fieldsBuilds *[]string
	fieldsBetaLicenseAgreements *[]string
	fieldsBetaAppReviewDetails *[]string
	fieldsAppInfos *[]string
	fieldsAppClips *[]string
	fieldsEndUserLicenseAgreements *[]string
	fieldsAppPreOrders *[]string
	fieldsInAppPurchases *[]string
	fieldsSubscriptionGroups *[]string
	fieldsGameCenterEnabledVersions *[]string
	fieldsAppCustomProductPages *[]string
	fieldsPromotedPurchases *[]string
	fieldsAppEvents *[]string
	fieldsReviewSubmissions *[]string
	fieldsSubscriptionGracePeriods *[]string
	fieldsGameCenterDetails *[]string
	fieldsAppStoreVersionExperiments *[]string
	include *[]string
	limitAppEncryptionDeclarations *int32
	limitBetaGroups *int32
	limitAppStoreVersions *int32
	limitPreReleaseVersions *int32
	limitBetaAppLocalizations *int32
	limitBuilds *int32
	limitAppInfos *int32
	limitAppClips *int32
	limitInAppPurchases *int32
	limitSubscriptionGroups *int32
	limitGameCenterEnabledVersions *int32
	limitAppCustomProductPages *int32
	limitInAppPurchasesV2 *int32
	limitPromotedPurchases *int32
	limitAppEvents *int32
	limitReviewSubmissions *int32
	limitAppStoreVersionExperimentsV2 *int32
}

// the fields to include for returned resources of type apps
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsApps(fieldsApps []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// the fields to include for returned resources of type appEncryptionDeclarations
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsAppEncryptionDeclarations(fieldsAppEncryptionDeclarations []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsAppEncryptionDeclarations = &fieldsAppEncryptionDeclarations
	return r
}

// the fields to include for returned resources of type ciProducts
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsCiProducts(fieldsCiProducts []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsCiProducts = &fieldsCiProducts
	return r
}

// the fields to include for returned resources of type betaGroups
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsBetaGroups(fieldsBetaGroups []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsBetaGroups = &fieldsBetaGroups
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type preReleaseVersions
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsPreReleaseVersions(fieldsPreReleaseVersions []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsPreReleaseVersions = &fieldsPreReleaseVersions
	return r
}

// the fields to include for returned resources of type betaAppLocalizations
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsBetaAppLocalizations(fieldsBetaAppLocalizations []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsBetaAppLocalizations = &fieldsBetaAppLocalizations
	return r
}

// the fields to include for returned resources of type builds
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsBuilds(fieldsBuilds []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// the fields to include for returned resources of type betaLicenseAgreements
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsBetaLicenseAgreements(fieldsBetaLicenseAgreements []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsBetaLicenseAgreements = &fieldsBetaLicenseAgreements
	return r
}

// the fields to include for returned resources of type betaAppReviewDetails
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsBetaAppReviewDetails(fieldsBetaAppReviewDetails []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsBetaAppReviewDetails = &fieldsBetaAppReviewDetails
	return r
}

// the fields to include for returned resources of type appInfos
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsAppInfos(fieldsAppInfos []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsAppInfos = &fieldsAppInfos
	return r
}

// the fields to include for returned resources of type appClips
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsAppClips(fieldsAppClips []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsAppClips = &fieldsAppClips
	return r
}

// the fields to include for returned resources of type endUserLicenseAgreements
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsEndUserLicenseAgreements(fieldsEndUserLicenseAgreements []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsEndUserLicenseAgreements = &fieldsEndUserLicenseAgreements
	return r
}

// the fields to include for returned resources of type appPreOrders
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsAppPreOrders(fieldsAppPreOrders []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsAppPreOrders = &fieldsAppPreOrders
	return r
}

// the fields to include for returned resources of type inAppPurchases
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsInAppPurchases(fieldsInAppPurchases []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsInAppPurchases = &fieldsInAppPurchases
	return r
}

// the fields to include for returned resources of type subscriptionGroups
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsSubscriptionGroups(fieldsSubscriptionGroups []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsSubscriptionGroups = &fieldsSubscriptionGroups
	return r
}

// the fields to include for returned resources of type gameCenterEnabledVersions
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsGameCenterEnabledVersions(fieldsGameCenterEnabledVersions []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsGameCenterEnabledVersions = &fieldsGameCenterEnabledVersions
	return r
}

// the fields to include for returned resources of type appCustomProductPages
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsAppCustomProductPages(fieldsAppCustomProductPages []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsAppCustomProductPages = &fieldsAppCustomProductPages
	return r
}

// the fields to include for returned resources of type promotedPurchases
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsPromotedPurchases(fieldsPromotedPurchases []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsPromotedPurchases = &fieldsPromotedPurchases
	return r
}

// the fields to include for returned resources of type appEvents
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsAppEvents(fieldsAppEvents []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsAppEvents = &fieldsAppEvents
	return r
}

// the fields to include for returned resources of type reviewSubmissions
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsReviewSubmissions(fieldsReviewSubmissions []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsReviewSubmissions = &fieldsReviewSubmissions
	return r
}

// the fields to include for returned resources of type subscriptionGracePeriods
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsSubscriptionGracePeriods(fieldsSubscriptionGracePeriods []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsSubscriptionGracePeriods = &fieldsSubscriptionGracePeriods
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type appStoreVersionExperiments
func (r ApiCiProductsAppGetToOneRelatedRequest) FieldsAppStoreVersionExperiments(fieldsAppStoreVersionExperiments []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.fieldsAppStoreVersionExperiments = &fieldsAppStoreVersionExperiments
	return r
}

// comma-separated list of relationships to include
func (r ApiCiProductsAppGetToOneRelatedRequest) Include(include []string) ApiCiProductsAppGetToOneRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related appEncryptionDeclarations returned (when they are included)
func (r ApiCiProductsAppGetToOneRelatedRequest) LimitAppEncryptionDeclarations(limitAppEncryptionDeclarations int32) ApiCiProductsAppGetToOneRelatedRequest {
	r.limitAppEncryptionDeclarations = &limitAppEncryptionDeclarations
	return r
}

// maximum number of related betaGroups returned (when they are included)
func (r ApiCiProductsAppGetToOneRelatedRequest) LimitBetaGroups(limitBetaGroups int32) ApiCiProductsAppGetToOneRelatedRequest {
	r.limitBetaGroups = &limitBetaGroups
	return r
}

// maximum number of related appStoreVersions returned (when they are included)
func (r ApiCiProductsAppGetToOneRelatedRequest) LimitAppStoreVersions(limitAppStoreVersions int32) ApiCiProductsAppGetToOneRelatedRequest {
	r.limitAppStoreVersions = &limitAppStoreVersions
	return r
}

// maximum number of related preReleaseVersions returned (when they are included)
func (r ApiCiProductsAppGetToOneRelatedRequest) LimitPreReleaseVersions(limitPreReleaseVersions int32) ApiCiProductsAppGetToOneRelatedRequest {
	r.limitPreReleaseVersions = &limitPreReleaseVersions
	return r
}

// maximum number of related betaAppLocalizations returned (when they are included)
func (r ApiCiProductsAppGetToOneRelatedRequest) LimitBetaAppLocalizations(limitBetaAppLocalizations int32) ApiCiProductsAppGetToOneRelatedRequest {
	r.limitBetaAppLocalizations = &limitBetaAppLocalizations
	return r
}

// maximum number of related builds returned (when they are included)
func (r ApiCiProductsAppGetToOneRelatedRequest) LimitBuilds(limitBuilds int32) ApiCiProductsAppGetToOneRelatedRequest {
	r.limitBuilds = &limitBuilds
	return r
}

// maximum number of related appInfos returned (when they are included)
func (r ApiCiProductsAppGetToOneRelatedRequest) LimitAppInfos(limitAppInfos int32) ApiCiProductsAppGetToOneRelatedRequest {
	r.limitAppInfos = &limitAppInfos
	return r
}

// maximum number of related appClips returned (when they are included)
func (r ApiCiProductsAppGetToOneRelatedRequest) LimitAppClips(limitAppClips int32) ApiCiProductsAppGetToOneRelatedRequest {
	r.limitAppClips = &limitAppClips
	return r
}

// maximum number of related inAppPurchases returned (when they are included)
// Deprecated
func (r ApiCiProductsAppGetToOneRelatedRequest) LimitInAppPurchases(limitInAppPurchases int32) ApiCiProductsAppGetToOneRelatedRequest {
	r.limitInAppPurchases = &limitInAppPurchases
	return r
}

// maximum number of related subscriptionGroups returned (when they are included)
func (r ApiCiProductsAppGetToOneRelatedRequest) LimitSubscriptionGroups(limitSubscriptionGroups int32) ApiCiProductsAppGetToOneRelatedRequest {
	r.limitSubscriptionGroups = &limitSubscriptionGroups
	return r
}

// maximum number of related gameCenterEnabledVersions returned (when they are included)
// Deprecated
func (r ApiCiProductsAppGetToOneRelatedRequest) LimitGameCenterEnabledVersions(limitGameCenterEnabledVersions int32) ApiCiProductsAppGetToOneRelatedRequest {
	r.limitGameCenterEnabledVersions = &limitGameCenterEnabledVersions
	return r
}

// maximum number of related appCustomProductPages returned (when they are included)
func (r ApiCiProductsAppGetToOneRelatedRequest) LimitAppCustomProductPages(limitAppCustomProductPages int32) ApiCiProductsAppGetToOneRelatedRequest {
	r.limitAppCustomProductPages = &limitAppCustomProductPages
	return r
}

// maximum number of related inAppPurchasesV2 returned (when they are included)
func (r ApiCiProductsAppGetToOneRelatedRequest) LimitInAppPurchasesV2(limitInAppPurchasesV2 int32) ApiCiProductsAppGetToOneRelatedRequest {
	r.limitInAppPurchasesV2 = &limitInAppPurchasesV2
	return r
}

// maximum number of related promotedPurchases returned (when they are included)
func (r ApiCiProductsAppGetToOneRelatedRequest) LimitPromotedPurchases(limitPromotedPurchases int32) ApiCiProductsAppGetToOneRelatedRequest {
	r.limitPromotedPurchases = &limitPromotedPurchases
	return r
}

// maximum number of related appEvents returned (when they are included)
func (r ApiCiProductsAppGetToOneRelatedRequest) LimitAppEvents(limitAppEvents int32) ApiCiProductsAppGetToOneRelatedRequest {
	r.limitAppEvents = &limitAppEvents
	return r
}

// maximum number of related reviewSubmissions returned (when they are included)
func (r ApiCiProductsAppGetToOneRelatedRequest) LimitReviewSubmissions(limitReviewSubmissions int32) ApiCiProductsAppGetToOneRelatedRequest {
	r.limitReviewSubmissions = &limitReviewSubmissions
	return r
}

// maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
func (r ApiCiProductsAppGetToOneRelatedRequest) LimitAppStoreVersionExperimentsV2(limitAppStoreVersionExperimentsV2 int32) ApiCiProductsAppGetToOneRelatedRequest {
	r.limitAppStoreVersionExperimentsV2 = &limitAppStoreVersionExperimentsV2
	return r
}

func (r ApiCiProductsAppGetToOneRelatedRequest) Execute() (*AppResponse, *http.Response, error) {
	return r.ApiService.CiProductsAppGetToOneRelatedExecute(r)
}

/*
CiProductsAppGetToOneRelated Method for CiProductsAppGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiCiProductsAppGetToOneRelatedRequest
*/
func (a *CiProductsAPIService) CiProductsAppGetToOneRelated(ctx context.Context, id string) ApiCiProductsAppGetToOneRelatedRequest {
	return ApiCiProductsAppGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppResponse
func (a *CiProductsAPIService) CiProductsAppGetToOneRelatedExecute(r ApiCiProductsAppGetToOneRelatedRequest) (*AppResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiProductsAPIService.CiProductsAppGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciProducts/{id}/app"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "form", "csv")
	}
	if r.fieldsAppEncryptionDeclarations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEncryptionDeclarations]", r.fieldsAppEncryptionDeclarations, "form", "csv")
	}
	if r.fieldsCiProducts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciProducts]", r.fieldsCiProducts, "form", "csv")
	}
	if r.fieldsBetaGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaGroups]", r.fieldsBetaGroups, "form", "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "form", "csv")
	}
	if r.fieldsPreReleaseVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[preReleaseVersions]", r.fieldsPreReleaseVersions, "form", "csv")
	}
	if r.fieldsBetaAppLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaAppLocalizations]", r.fieldsBetaAppLocalizations, "form", "csv")
	}
	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "form", "csv")
	}
	if r.fieldsBetaLicenseAgreements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaLicenseAgreements]", r.fieldsBetaLicenseAgreements, "form", "csv")
	}
	if r.fieldsBetaAppReviewDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaAppReviewDetails]", r.fieldsBetaAppReviewDetails, "form", "csv")
	}
	if r.fieldsAppInfos != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appInfos]", r.fieldsAppInfos, "form", "csv")
	}
	if r.fieldsAppClips != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClips]", r.fieldsAppClips, "form", "csv")
	}
	if r.fieldsEndUserLicenseAgreements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[endUserLicenseAgreements]", r.fieldsEndUserLicenseAgreements, "form", "csv")
	}
	if r.fieldsAppPreOrders != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appPreOrders]", r.fieldsAppPreOrders, "form", "csv")
	}
	if r.fieldsInAppPurchases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[inAppPurchases]", r.fieldsInAppPurchases, "form", "csv")
	}
	if r.fieldsSubscriptionGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionGroups]", r.fieldsSubscriptionGroups, "form", "csv")
	}
	if r.fieldsGameCenterEnabledVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterEnabledVersions]", r.fieldsGameCenterEnabledVersions, "form", "csv")
	}
	if r.fieldsAppCustomProductPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appCustomProductPages]", r.fieldsAppCustomProductPages, "form", "csv")
	}
	if r.fieldsPromotedPurchases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[promotedPurchases]", r.fieldsPromotedPurchases, "form", "csv")
	}
	if r.fieldsAppEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEvents]", r.fieldsAppEvents, "form", "csv")
	}
	if r.fieldsReviewSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[reviewSubmissions]", r.fieldsReviewSubmissions, "form", "csv")
	}
	if r.fieldsSubscriptionGracePeriods != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionGracePeriods]", r.fieldsSubscriptionGracePeriods, "form", "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "form", "csv")
	}
	if r.fieldsAppStoreVersionExperiments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperiments]", r.fieldsAppStoreVersionExperiments, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitAppEncryptionDeclarations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appEncryptionDeclarations]", r.limitAppEncryptionDeclarations, "form", "")
	}
	if r.limitBetaGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[betaGroups]", r.limitBetaGroups, "form", "")
	}
	if r.limitAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreVersions]", r.limitAppStoreVersions, "form", "")
	}
	if r.limitPreReleaseVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[preReleaseVersions]", r.limitPreReleaseVersions, "form", "")
	}
	if r.limitBetaAppLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[betaAppLocalizations]", r.limitBetaAppLocalizations, "form", "")
	}
	if r.limitBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[builds]", r.limitBuilds, "form", "")
	}
	if r.limitAppInfos != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appInfos]", r.limitAppInfos, "form", "")
	}
	if r.limitAppClips != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appClips]", r.limitAppClips, "form", "")
	}
	if r.limitInAppPurchases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[inAppPurchases]", r.limitInAppPurchases, "form", "")
	}
	if r.limitSubscriptionGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[subscriptionGroups]", r.limitSubscriptionGroups, "form", "")
	}
	if r.limitGameCenterEnabledVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterEnabledVersions]", r.limitGameCenterEnabledVersions, "form", "")
	}
	if r.limitAppCustomProductPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appCustomProductPages]", r.limitAppCustomProductPages, "form", "")
	}
	if r.limitInAppPurchasesV2 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[inAppPurchasesV2]", r.limitInAppPurchasesV2, "form", "")
	}
	if r.limitPromotedPurchases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[promotedPurchases]", r.limitPromotedPurchases, "form", "")
	}
	if r.limitAppEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appEvents]", r.limitAppEvents, "form", "")
	}
	if r.limitReviewSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[reviewSubmissions]", r.limitReviewSubmissions, "form", "")
	}
	if r.limitAppStoreVersionExperimentsV2 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreVersionExperimentsV2]", r.limitAppStoreVersionExperimentsV2, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCiProductsBuildRunsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *CiProductsAPIService
	id string
	filterBuilds *[]string
	sort *[]string
	fieldsCiBuildRuns *[]string
	fieldsBuilds *[]string
	fieldsCiWorkflows *[]string
	fieldsCiProducts *[]string
	fieldsScmGitReferences *[]string
	fieldsScmPullRequests *[]string
	limit *int32
	include *[]string
	limitBuilds *int32
}

// filter by id(s) of related &#39;builds&#39;
func (r ApiCiProductsBuildRunsGetToManyRelatedRequest) FilterBuilds(filterBuilds []string) ApiCiProductsBuildRunsGetToManyRelatedRequest {
	r.filterBuilds = &filterBuilds
	return r
}

// comma-separated list of sort expressions; resources will be sorted as specified
func (r ApiCiProductsBuildRunsGetToManyRelatedRequest) Sort(sort []string) ApiCiProductsBuildRunsGetToManyRelatedRequest {
	r.sort = &sort
	return r
}

// the fields to include for returned resources of type ciBuildRuns
func (r ApiCiProductsBuildRunsGetToManyRelatedRequest) FieldsCiBuildRuns(fieldsCiBuildRuns []string) ApiCiProductsBuildRunsGetToManyRelatedRequest {
	r.fieldsCiBuildRuns = &fieldsCiBuildRuns
	return r
}

// the fields to include for returned resources of type builds
func (r ApiCiProductsBuildRunsGetToManyRelatedRequest) FieldsBuilds(fieldsBuilds []string) ApiCiProductsBuildRunsGetToManyRelatedRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// the fields to include for returned resources of type ciWorkflows
func (r ApiCiProductsBuildRunsGetToManyRelatedRequest) FieldsCiWorkflows(fieldsCiWorkflows []string) ApiCiProductsBuildRunsGetToManyRelatedRequest {
	r.fieldsCiWorkflows = &fieldsCiWorkflows
	return r
}

// the fields to include for returned resources of type ciProducts
func (r ApiCiProductsBuildRunsGetToManyRelatedRequest) FieldsCiProducts(fieldsCiProducts []string) ApiCiProductsBuildRunsGetToManyRelatedRequest {
	r.fieldsCiProducts = &fieldsCiProducts
	return r
}

// the fields to include for returned resources of type scmGitReferences
func (r ApiCiProductsBuildRunsGetToManyRelatedRequest) FieldsScmGitReferences(fieldsScmGitReferences []string) ApiCiProductsBuildRunsGetToManyRelatedRequest {
	r.fieldsScmGitReferences = &fieldsScmGitReferences
	return r
}

// the fields to include for returned resources of type scmPullRequests
func (r ApiCiProductsBuildRunsGetToManyRelatedRequest) FieldsScmPullRequests(fieldsScmPullRequests []string) ApiCiProductsBuildRunsGetToManyRelatedRequest {
	r.fieldsScmPullRequests = &fieldsScmPullRequests
	return r
}

// maximum resources per page
func (r ApiCiProductsBuildRunsGetToManyRelatedRequest) Limit(limit int32) ApiCiProductsBuildRunsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiCiProductsBuildRunsGetToManyRelatedRequest) Include(include []string) ApiCiProductsBuildRunsGetToManyRelatedRequest {
	r.include = &include
	return r
}

// maximum number of related builds returned (when they are included)
func (r ApiCiProductsBuildRunsGetToManyRelatedRequest) LimitBuilds(limitBuilds int32) ApiCiProductsBuildRunsGetToManyRelatedRequest {
	r.limitBuilds = &limitBuilds
	return r
}

func (r ApiCiProductsBuildRunsGetToManyRelatedRequest) Execute() (*CiBuildRunsResponse, *http.Response, error) {
	return r.ApiService.CiProductsBuildRunsGetToManyRelatedExecute(r)
}

/*
CiProductsBuildRunsGetToManyRelated Method for CiProductsBuildRunsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiCiProductsBuildRunsGetToManyRelatedRequest
*/
func (a *CiProductsAPIService) CiProductsBuildRunsGetToManyRelated(ctx context.Context, id string) ApiCiProductsBuildRunsGetToManyRelatedRequest {
	return ApiCiProductsBuildRunsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CiBuildRunsResponse
func (a *CiProductsAPIService) CiProductsBuildRunsGetToManyRelatedExecute(r ApiCiProductsBuildRunsGetToManyRelatedRequest) (*CiBuildRunsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CiBuildRunsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiProductsAPIService.CiProductsBuildRunsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciProducts/{id}/buildRuns"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[builds]", r.filterBuilds, "form", "csv")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.fieldsCiBuildRuns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciBuildRuns]", r.fieldsCiBuildRuns, "form", "csv")
	}
	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "form", "csv")
	}
	if r.fieldsCiWorkflows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciWorkflows]", r.fieldsCiWorkflows, "form", "csv")
	}
	if r.fieldsCiProducts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciProducts]", r.fieldsCiProducts, "form", "csv")
	}
	if r.fieldsScmGitReferences != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[scmGitReferences]", r.fieldsScmGitReferences, "form", "csv")
	}
	if r.fieldsScmPullRequests != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[scmPullRequests]", r.fieldsScmPullRequests, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[builds]", r.limitBuilds, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCiProductsDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *CiProductsAPIService
	id string
}

func (r ApiCiProductsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.CiProductsDeleteInstanceExecute(r)
}

/*
CiProductsDeleteInstance Method for CiProductsDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiCiProductsDeleteInstanceRequest
*/
func (a *CiProductsAPIService) CiProductsDeleteInstance(ctx context.Context, id string) ApiCiProductsDeleteInstanceRequest {
	return ApiCiProductsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CiProductsAPIService) CiProductsDeleteInstanceExecute(r ApiCiProductsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiProductsAPIService.CiProductsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciProducts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCiProductsGetCollectionRequest struct {
	ctx context.Context
	ApiService *CiProductsAPIService
	filterProductType *[]string
	filterApp *[]string
	fieldsCiProducts *[]string
	fieldsApps *[]string
	fieldsScmRepositories *[]string
	limit *int32
	include *[]string
	limitPrimaryRepositories *int32
}

// filter by attribute &#39;productType&#39;
func (r ApiCiProductsGetCollectionRequest) FilterProductType(filterProductType []string) ApiCiProductsGetCollectionRequest {
	r.filterProductType = &filterProductType
	return r
}

// filter by id(s) of related &#39;app&#39;
func (r ApiCiProductsGetCollectionRequest) FilterApp(filterApp []string) ApiCiProductsGetCollectionRequest {
	r.filterApp = &filterApp
	return r
}

// the fields to include for returned resources of type ciProducts
func (r ApiCiProductsGetCollectionRequest) FieldsCiProducts(fieldsCiProducts []string) ApiCiProductsGetCollectionRequest {
	r.fieldsCiProducts = &fieldsCiProducts
	return r
}

// the fields to include for returned resources of type apps
func (r ApiCiProductsGetCollectionRequest) FieldsApps(fieldsApps []string) ApiCiProductsGetCollectionRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// the fields to include for returned resources of type scmRepositories
func (r ApiCiProductsGetCollectionRequest) FieldsScmRepositories(fieldsScmRepositories []string) ApiCiProductsGetCollectionRequest {
	r.fieldsScmRepositories = &fieldsScmRepositories
	return r
}

// maximum resources per page
func (r ApiCiProductsGetCollectionRequest) Limit(limit int32) ApiCiProductsGetCollectionRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiCiProductsGetCollectionRequest) Include(include []string) ApiCiProductsGetCollectionRequest {
	r.include = &include
	return r
}

// maximum number of related primaryRepositories returned (when they are included)
func (r ApiCiProductsGetCollectionRequest) LimitPrimaryRepositories(limitPrimaryRepositories int32) ApiCiProductsGetCollectionRequest {
	r.limitPrimaryRepositories = &limitPrimaryRepositories
	return r
}

func (r ApiCiProductsGetCollectionRequest) Execute() (*CiProductsResponse, *http.Response, error) {
	return r.ApiService.CiProductsGetCollectionExecute(r)
}

/*
CiProductsGetCollection Method for CiProductsGetCollection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCiProductsGetCollectionRequest
*/
func (a *CiProductsAPIService) CiProductsGetCollection(ctx context.Context) ApiCiProductsGetCollectionRequest {
	return ApiCiProductsGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CiProductsResponse
func (a *CiProductsAPIService) CiProductsGetCollectionExecute(r ApiCiProductsGetCollectionRequest) (*CiProductsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CiProductsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiProductsAPIService.CiProductsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciProducts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterProductType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[productType]", r.filterProductType, "form", "csv")
	}
	if r.filterApp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[app]", r.filterApp, "form", "csv")
	}
	if r.fieldsCiProducts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciProducts]", r.fieldsCiProducts, "form", "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "form", "csv")
	}
	if r.fieldsScmRepositories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[scmRepositories]", r.fieldsScmRepositories, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitPrimaryRepositories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[primaryRepositories]", r.limitPrimaryRepositories, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCiProductsGetInstanceRequest struct {
	ctx context.Context
	ApiService *CiProductsAPIService
	id string
	fieldsCiProducts *[]string
	fieldsApps *[]string
	fieldsScmRepositories *[]string
	include *[]string
	limitPrimaryRepositories *int32
}

// the fields to include for returned resources of type ciProducts
func (r ApiCiProductsGetInstanceRequest) FieldsCiProducts(fieldsCiProducts []string) ApiCiProductsGetInstanceRequest {
	r.fieldsCiProducts = &fieldsCiProducts
	return r
}

// the fields to include for returned resources of type apps
func (r ApiCiProductsGetInstanceRequest) FieldsApps(fieldsApps []string) ApiCiProductsGetInstanceRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// the fields to include for returned resources of type scmRepositories
func (r ApiCiProductsGetInstanceRequest) FieldsScmRepositories(fieldsScmRepositories []string) ApiCiProductsGetInstanceRequest {
	r.fieldsScmRepositories = &fieldsScmRepositories
	return r
}

// comma-separated list of relationships to include
func (r ApiCiProductsGetInstanceRequest) Include(include []string) ApiCiProductsGetInstanceRequest {
	r.include = &include
	return r
}

// maximum number of related primaryRepositories returned (when they are included)
func (r ApiCiProductsGetInstanceRequest) LimitPrimaryRepositories(limitPrimaryRepositories int32) ApiCiProductsGetInstanceRequest {
	r.limitPrimaryRepositories = &limitPrimaryRepositories
	return r
}

func (r ApiCiProductsGetInstanceRequest) Execute() (*CiProductResponse, *http.Response, error) {
	return r.ApiService.CiProductsGetInstanceExecute(r)
}

/*
CiProductsGetInstance Method for CiProductsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiCiProductsGetInstanceRequest
*/
func (a *CiProductsAPIService) CiProductsGetInstance(ctx context.Context, id string) ApiCiProductsGetInstanceRequest {
	return ApiCiProductsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CiProductResponse
func (a *CiProductsAPIService) CiProductsGetInstanceExecute(r ApiCiProductsGetInstanceRequest) (*CiProductResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CiProductResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiProductsAPIService.CiProductsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciProducts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsCiProducts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciProducts]", r.fieldsCiProducts, "form", "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "form", "csv")
	}
	if r.fieldsScmRepositories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[scmRepositories]", r.fieldsScmRepositories, "form", "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	if r.limitPrimaryRepositories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[primaryRepositories]", r.limitPrimaryRepositories, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCiProductsPrimaryRepositoriesGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *CiProductsAPIService
	id string
	filterId *[]string
	fieldsScmRepositories *[]string
	fieldsScmProviders *[]string
	fieldsScmGitReferences *[]string
	limit *int32
	include *[]string
}

// filter by id(s)
func (r ApiCiProductsPrimaryRepositoriesGetToManyRelatedRequest) FilterId(filterId []string) ApiCiProductsPrimaryRepositoriesGetToManyRelatedRequest {
	r.filterId = &filterId
	return r
}

// the fields to include for returned resources of type scmRepositories
func (r ApiCiProductsPrimaryRepositoriesGetToManyRelatedRequest) FieldsScmRepositories(fieldsScmRepositories []string) ApiCiProductsPrimaryRepositoriesGetToManyRelatedRequest {
	r.fieldsScmRepositories = &fieldsScmRepositories
	return r
}

// the fields to include for returned resources of type scmProviders
func (r ApiCiProductsPrimaryRepositoriesGetToManyRelatedRequest) FieldsScmProviders(fieldsScmProviders []string) ApiCiProductsPrimaryRepositoriesGetToManyRelatedRequest {
	r.fieldsScmProviders = &fieldsScmProviders
	return r
}

// the fields to include for returned resources of type scmGitReferences
func (r ApiCiProductsPrimaryRepositoriesGetToManyRelatedRequest) FieldsScmGitReferences(fieldsScmGitReferences []string) ApiCiProductsPrimaryRepositoriesGetToManyRelatedRequest {
	r.fieldsScmGitReferences = &fieldsScmGitReferences
	return r
}

// maximum resources per page
func (r ApiCiProductsPrimaryRepositoriesGetToManyRelatedRequest) Limit(limit int32) ApiCiProductsPrimaryRepositoriesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiCiProductsPrimaryRepositoriesGetToManyRelatedRequest) Include(include []string) ApiCiProductsPrimaryRepositoriesGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiCiProductsPrimaryRepositoriesGetToManyRelatedRequest) Execute() (*ScmRepositoriesResponse, *http.Response, error) {
	return r.ApiService.CiProductsPrimaryRepositoriesGetToManyRelatedExecute(r)
}

/*
CiProductsPrimaryRepositoriesGetToManyRelated Method for CiProductsPrimaryRepositoriesGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiCiProductsPrimaryRepositoriesGetToManyRelatedRequest
*/
func (a *CiProductsAPIService) CiProductsPrimaryRepositoriesGetToManyRelated(ctx context.Context, id string) ApiCiProductsPrimaryRepositoriesGetToManyRelatedRequest {
	return ApiCiProductsPrimaryRepositoriesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScmRepositoriesResponse
func (a *CiProductsAPIService) CiProductsPrimaryRepositoriesGetToManyRelatedExecute(r ApiCiProductsPrimaryRepositoriesGetToManyRelatedRequest) (*ScmRepositoriesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScmRepositoriesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiProductsAPIService.CiProductsPrimaryRepositoriesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciProducts/{id}/primaryRepositories"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[id]", r.filterId, "form", "csv")
	}
	if r.fieldsScmRepositories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[scmRepositories]", r.fieldsScmRepositories, "form", "csv")
	}
	if r.fieldsScmProviders != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[scmProviders]", r.fieldsScmProviders, "form", "csv")
	}
	if r.fieldsScmGitReferences != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[scmGitReferences]", r.fieldsScmGitReferences, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCiProductsWorkflowsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *CiProductsAPIService
	id string
	fieldsCiWorkflows *[]string
	fieldsCiProducts *[]string
	fieldsScmRepositories *[]string
	fieldsCiXcodeVersions *[]string
	fieldsCiMacOsVersions *[]string
	limit *int32
	include *[]string
}

// the fields to include for returned resources of type ciWorkflows
func (r ApiCiProductsWorkflowsGetToManyRelatedRequest) FieldsCiWorkflows(fieldsCiWorkflows []string) ApiCiProductsWorkflowsGetToManyRelatedRequest {
	r.fieldsCiWorkflows = &fieldsCiWorkflows
	return r
}

// the fields to include for returned resources of type ciProducts
func (r ApiCiProductsWorkflowsGetToManyRelatedRequest) FieldsCiProducts(fieldsCiProducts []string) ApiCiProductsWorkflowsGetToManyRelatedRequest {
	r.fieldsCiProducts = &fieldsCiProducts
	return r
}

// the fields to include for returned resources of type scmRepositories
func (r ApiCiProductsWorkflowsGetToManyRelatedRequest) FieldsScmRepositories(fieldsScmRepositories []string) ApiCiProductsWorkflowsGetToManyRelatedRequest {
	r.fieldsScmRepositories = &fieldsScmRepositories
	return r
}

// the fields to include for returned resources of type ciXcodeVersions
func (r ApiCiProductsWorkflowsGetToManyRelatedRequest) FieldsCiXcodeVersions(fieldsCiXcodeVersions []string) ApiCiProductsWorkflowsGetToManyRelatedRequest {
	r.fieldsCiXcodeVersions = &fieldsCiXcodeVersions
	return r
}

// the fields to include for returned resources of type ciMacOsVersions
func (r ApiCiProductsWorkflowsGetToManyRelatedRequest) FieldsCiMacOsVersions(fieldsCiMacOsVersions []string) ApiCiProductsWorkflowsGetToManyRelatedRequest {
	r.fieldsCiMacOsVersions = &fieldsCiMacOsVersions
	return r
}

// maximum resources per page
func (r ApiCiProductsWorkflowsGetToManyRelatedRequest) Limit(limit int32) ApiCiProductsWorkflowsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiCiProductsWorkflowsGetToManyRelatedRequest) Include(include []string) ApiCiProductsWorkflowsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiCiProductsWorkflowsGetToManyRelatedRequest) Execute() (*CiWorkflowsResponse, *http.Response, error) {
	return r.ApiService.CiProductsWorkflowsGetToManyRelatedExecute(r)
}

/*
CiProductsWorkflowsGetToManyRelated Method for CiProductsWorkflowsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiCiProductsWorkflowsGetToManyRelatedRequest
*/
func (a *CiProductsAPIService) CiProductsWorkflowsGetToManyRelated(ctx context.Context, id string) ApiCiProductsWorkflowsGetToManyRelatedRequest {
	return ApiCiProductsWorkflowsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CiWorkflowsResponse
func (a *CiProductsAPIService) CiProductsWorkflowsGetToManyRelatedExecute(r ApiCiProductsWorkflowsGetToManyRelatedRequest) (*CiWorkflowsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CiWorkflowsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiProductsAPIService.CiProductsWorkflowsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciProducts/{id}/workflows"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsCiWorkflows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciWorkflows]", r.fieldsCiWorkflows, "form", "csv")
	}
	if r.fieldsCiProducts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciProducts]", r.fieldsCiProducts, "form", "csv")
	}
	if r.fieldsScmRepositories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[scmRepositories]", r.fieldsScmRepositories, "form", "csv")
	}
	if r.fieldsCiXcodeVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciXcodeVersions]", r.fieldsCiXcodeVersions, "form", "csv")
	}
	if r.fieldsCiMacOsVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciMacOsVersions]", r.fieldsCiMacOsVersions, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MetricsAPIService MetricsAPI service
type MetricsAPIService service

type ApiAppsBetaTesterUsagesGetMetrics_0Request struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	period *string
	groupBy *[]string
	filterBetaTesters *string
	limit *int32
}

// the duration of the reporting period
func (r ApiAppsBetaTesterUsagesGetMetrics_0Request) Period(period string) ApiAppsBetaTesterUsagesGetMetrics_0Request {
	r.period = &period
	return r
}

// the dimension by which to group the results
func (r ApiAppsBetaTesterUsagesGetMetrics_0Request) GroupBy(groupBy []string) ApiAppsBetaTesterUsagesGetMetrics_0Request {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;betaTesters&#39; relationship dimension
func (r ApiAppsBetaTesterUsagesGetMetrics_0Request) FilterBetaTesters(filterBetaTesters string) ApiAppsBetaTesterUsagesGetMetrics_0Request {
	r.filterBetaTesters = &filterBetaTesters
	return r
}

// maximum number of groups to return per page
func (r ApiAppsBetaTesterUsagesGetMetrics_0Request) Limit(limit int32) ApiAppsBetaTesterUsagesGetMetrics_0Request {
	r.limit = &limit
	return r
}

func (r ApiAppsBetaTesterUsagesGetMetrics_0Request) Execute() (*AppsBetaTesterUsagesV1MetricResponse, *http.Response, error) {
	return r.ApiService.AppsBetaTesterUsagesGetMetricsExecute(r)
}

/*
AppsBetaTesterUsagesGetMetrics_0 Method for AppsBetaTesterUsagesGetMetrics_0

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppsBetaTesterUsagesGetMetrics_0Request
*/
func (a *MetricsAPIService) AppsBetaTesterUsagesGetMetrics(ctx context.Context, id string) ApiAppsBetaTesterUsagesGetMetrics_0Request {
	return ApiAppsBetaTesterUsagesGetMetrics_0Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppsBetaTesterUsagesV1MetricResponse
func (a *MetricsAPIService) AppsBetaTesterUsagesGetMetricsExecute(r ApiAppsBetaTesterUsagesGetMetrics_0Request) (*AppsBetaTesterUsagesV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppsBetaTesterUsagesV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.AppsBetaTesterUsagesGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/apps/{id}/metrics/betaTesterUsages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.period != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "period", r.period, "form", "")
	}
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "form", "csv")
	}
	if r.filterBetaTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[betaTesters]", r.filterBetaTesters, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBetaGroupsBetaTesterUsagesGetMetrics_0Request struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	period *string
	groupBy *[]string
	filterBetaTesters *string
	limit *int32
}

// the duration of the reporting period
func (r ApiBetaGroupsBetaTesterUsagesGetMetrics_0Request) Period(period string) ApiBetaGroupsBetaTesterUsagesGetMetrics_0Request {
	r.period = &period
	return r
}

// the dimension by which to group the results
func (r ApiBetaGroupsBetaTesterUsagesGetMetrics_0Request) GroupBy(groupBy []string) ApiBetaGroupsBetaTesterUsagesGetMetrics_0Request {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;betaTesters&#39; relationship dimension
func (r ApiBetaGroupsBetaTesterUsagesGetMetrics_0Request) FilterBetaTesters(filterBetaTesters string) ApiBetaGroupsBetaTesterUsagesGetMetrics_0Request {
	r.filterBetaTesters = &filterBetaTesters
	return r
}

// maximum number of groups to return per page
func (r ApiBetaGroupsBetaTesterUsagesGetMetrics_0Request) Limit(limit int32) ApiBetaGroupsBetaTesterUsagesGetMetrics_0Request {
	r.limit = &limit
	return r
}

func (r ApiBetaGroupsBetaTesterUsagesGetMetrics_0Request) Execute() (*AppsBetaTesterUsagesV1MetricResponse, *http.Response, error) {
	return r.ApiService.BetaGroupsBetaTesterUsagesGetMetricsExecute(r)
}

/*
BetaGroupsBetaTesterUsagesGetMetrics_0 Method for BetaGroupsBetaTesterUsagesGetMetrics_0

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiBetaGroupsBetaTesterUsagesGetMetrics_0Request
*/
func (a *MetricsAPIService) BetaGroupsBetaTesterUsagesGetMetrics(ctx context.Context, id string) ApiBetaGroupsBetaTesterUsagesGetMetrics_0Request {
	return ApiBetaGroupsBetaTesterUsagesGetMetrics_0Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppsBetaTesterUsagesV1MetricResponse
func (a *MetricsAPIService) BetaGroupsBetaTesterUsagesGetMetricsExecute(r ApiBetaGroupsBetaTesterUsagesGetMetrics_0Request) (*AppsBetaTesterUsagesV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppsBetaTesterUsagesV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.BetaGroupsBetaTesterUsagesGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaGroups/{id}/metrics/betaTesterUsages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.period != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "period", r.period, "form", "")
	}
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "form", "csv")
	}
	if r.filterBetaTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[betaTesters]", r.filterBetaTesters, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBetaTestersBetaTesterUsagesGetMetrics_0Request struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	filterApps *string
	period *string
	limit *int32
}

// filter by &#39;apps&#39; relationship dimension
func (r ApiBetaTestersBetaTesterUsagesGetMetrics_0Request) FilterApps(filterApps string) ApiBetaTestersBetaTesterUsagesGetMetrics_0Request {
	r.filterApps = &filterApps
	return r
}

// the duration of the reporting period
func (r ApiBetaTestersBetaTesterUsagesGetMetrics_0Request) Period(period string) ApiBetaTestersBetaTesterUsagesGetMetrics_0Request {
	r.period = &period
	return r
}

// maximum number of groups to return per page
func (r ApiBetaTestersBetaTesterUsagesGetMetrics_0Request) Limit(limit int32) ApiBetaTestersBetaTesterUsagesGetMetrics_0Request {
	r.limit = &limit
	return r
}

func (r ApiBetaTestersBetaTesterUsagesGetMetrics_0Request) Execute() (*BetaTesterUsagesV1MetricResponse, *http.Response, error) {
	return r.ApiService.BetaTestersBetaTesterUsagesGetMetricsExecute(r)
}

/*
BetaTestersBetaTesterUsagesGetMetrics_0 Method for BetaTestersBetaTesterUsagesGetMetrics_0

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiBetaTestersBetaTesterUsagesGetMetrics_0Request
*/
func (a *MetricsAPIService) BetaTestersBetaTesterUsagesGetMetrics(ctx context.Context, id string) ApiBetaTestersBetaTesterUsagesGetMetrics_0Request {
	return ApiBetaTestersBetaTesterUsagesGetMetrics_0Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BetaTesterUsagesV1MetricResponse
func (a *MetricsAPIService) BetaTestersBetaTesterUsagesGetMetricsExecute(r ApiBetaTestersBetaTesterUsagesGetMetrics_0Request) (*BetaTesterUsagesV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BetaTesterUsagesV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.BetaTestersBetaTesterUsagesGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaTesters/{id}/metrics/betaTesterUsages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filterApps == nil {
		return localVarReturnValue, nil, reportError("filterApps is required and must be specified")
	}

	if r.period != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "period", r.period, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "filter[apps]", r.filterApps, "form", "")
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsBetaBuildUsagesGetMetrics_0Request struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	limit *int32
}

// maximum number of groups to return per page
func (r ApiBuildsBetaBuildUsagesGetMetrics_0Request) Limit(limit int32) ApiBuildsBetaBuildUsagesGetMetrics_0Request {
	r.limit = &limit
	return r
}

func (r ApiBuildsBetaBuildUsagesGetMetrics_0Request) Execute() (*BetaBuildUsagesV1MetricResponse, *http.Response, error) {
	return r.ApiService.BuildsBetaBuildUsagesGetMetricsExecute(r)
}

/*
BuildsBetaBuildUsagesGetMetrics_0 Method for BuildsBetaBuildUsagesGetMetrics_0

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiBuildsBetaBuildUsagesGetMetrics_0Request
*/
func (a *MetricsAPIService) BuildsBetaBuildUsagesGetMetrics(ctx context.Context, id string) ApiBuildsBetaBuildUsagesGetMetrics_0Request {
	return ApiBuildsBetaBuildUsagesGetMetrics_0Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BetaBuildUsagesV1MetricResponse
func (a *MetricsAPIService) BuildsBetaBuildUsagesGetMetricsExecute(r ApiBuildsBetaBuildUsagesGetMetrics_0Request) (*BetaBuildUsagesV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BetaBuildUsagesV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.BuildsBetaBuildUsagesGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/metrics/betaBuildUsages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Request struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *string
	groupBy *[]string
	filterResult *string
	sort *[]string
	limit *int32
}

// the granularity of the per-group dataset
func (r ApiGameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Request) Granularity(granularity string) ApiGameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Request {
	r.granularity = &granularity
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Request) GroupBy(groupBy []string) ApiGameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Request {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;result&#39; attribute dimension
func (r ApiGameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Request) FilterResult(filterResult string) ApiGameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Request {
	r.filterResult = &filterResult
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Request) Sort(sort []string) ApiGameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Request {
	r.sort = &sort
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Request) Limit(limit int32) ApiGameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Request {
	r.limit = &limit
	return r
}

func (r ApiGameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Request) Execute() (*GameCenterMatchmakingAppRequestsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterDetailsClassicMatchmakingRequestsGetMetricsExecute(r)
}

/*
GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0 Method for GameCenterDetailsClassicMatchmakingRequestsGetMetrics_0

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Request
*/
func (a *MetricsAPIService) GameCenterDetailsClassicMatchmakingRequestsGetMetrics(ctx context.Context, id string) ApiGameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Request {
	return ApiGameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingAppRequestsV1MetricResponse
func (a *MetricsAPIService) GameCenterDetailsClassicMatchmakingRequestsGetMetricsExecute(r ApiGameCenterDetailsClassicMatchmakingRequestsGetMetrics_0Request) (*GameCenterMatchmakingAppRequestsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingAppRequestsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterDetailsClassicMatchmakingRequestsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "form", "csv")
	}
	if r.filterResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[result]", r.filterResult, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Request struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *string
	groupBy *[]string
	filterResult *string
	sort *[]string
	limit *int32
}

// the granularity of the per-group dataset
func (r ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Request) Granularity(granularity string) ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Request {
	r.granularity = &granularity
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Request) GroupBy(groupBy []string) ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Request {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;result&#39; attribute dimension
func (r ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Request) FilterResult(filterResult string) ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Request {
	r.filterResult = &filterResult
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Request) Sort(sort []string) ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Request {
	r.sort = &sort
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Request) Limit(limit int32) ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Request {
	r.limit = &limit
	return r
}

func (r ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Request) Execute() (*GameCenterMatchmakingAppRequestsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsExecute(r)
}

/*
GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0 Method for GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Request
*/
func (a *MetricsAPIService) GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics(ctx context.Context, id string) ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Request {
	return ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingAppRequestsV1MetricResponse
func (a *MetricsAPIService) GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsExecute(r ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics_0Request) (*GameCenterMatchmakingAppRequestsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingAppRequestsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "form", "csv")
	}
	if r.filterResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[result]", r.filterResult, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0Request struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *string
	sort *[]string
	limit *int32
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0Request) Granularity(granularity string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0Request {
	r.granularity = &granularity
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0Request) Sort(sort []string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0Request {
	r.sort = &sort
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0Request) Limit(limit int32) ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0Request {
	r.limit = &limit
	return r
}

func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0Request) Execute() (*GameCenterMatchmakingQueueSizesV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsExecute(r)
}

/*
GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0 Method for GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0Request
*/
func (a *MetricsAPIService) GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0Request {
	return ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingQueueSizesV1MetricResponse
func (a *MetricsAPIService) GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsExecute(r ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics_0Request) (*GameCenterMatchmakingQueueSizesV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingQueueSizesV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Request struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *string
	groupBy *[]string
	filterResult *string
	filterGameCenterDetail *string
	sort *[]string
	limit *int32
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Request) Granularity(granularity string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Request {
	r.granularity = &granularity
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Request) GroupBy(groupBy []string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Request {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;result&#39; attribute dimension
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Request) FilterResult(filterResult string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Request {
	r.filterResult = &filterResult
	return r
}

// filter by &#39;gameCenterDetail&#39; relationship dimension
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Request) FilterGameCenterDetail(filterGameCenterDetail string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Request {
	r.filterGameCenterDetail = &filterGameCenterDetail
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Request) Sort(sort []string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Request {
	r.sort = &sort
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Request) Limit(limit int32) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Request {
	r.limit = &limit
	return r
}

func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Request) Execute() (*GameCenterMatchmakingQueueRequestsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsExecute(r)
}

/*
GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0 Method for GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Request
*/
func (a *MetricsAPIService) GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Request {
	return ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingQueueRequestsV1MetricResponse
func (a *MetricsAPIService) GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsExecute(r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics_0Request) (*GameCenterMatchmakingQueueRequestsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingQueueRequestsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "form", "csv")
	}
	if r.filterResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[result]", r.filterResult, "form", "")
	}
	if r.filterGameCenterDetail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterDetail]", r.filterGameCenterDetail, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0Request struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *string
	sort *[]string
	limit *int32
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0Request) Granularity(granularity string) ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0Request {
	r.granularity = &granularity
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0Request) Sort(sort []string) ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0Request {
	r.sort = &sort
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0Request) Limit(limit int32) ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0Request {
	r.limit = &limit
	return r
}

func (r ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0Request) Execute() (*GameCenterMatchmakingQueueSizesV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsExecute(r)
}

/*
GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0 Method for GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0Request
*/
func (a *MetricsAPIService) GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0Request {
	return ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingQueueSizesV1MetricResponse
func (a *MetricsAPIService) GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsExecute(r ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics_0Request) (*GameCenterMatchmakingQueueSizesV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingQueueSizesV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Request struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *string
	groupBy *[]string
	filterResult *string
	filterGameCenterDetail *string
	sort *[]string
	limit *int32
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Request) Granularity(granularity string) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Request {
	r.granularity = &granularity
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Request) GroupBy(groupBy []string) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Request {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;result&#39; attribute dimension
func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Request) FilterResult(filterResult string) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Request {
	r.filterResult = &filterResult
	return r
}

// filter by &#39;gameCenterDetail&#39; relationship dimension
func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Request) FilterGameCenterDetail(filterGameCenterDetail string) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Request {
	r.filterGameCenterDetail = &filterGameCenterDetail
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Request) Sort(sort []string) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Request {
	r.sort = &sort
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Request) Limit(limit int32) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Request {
	r.limit = &limit
	return r
}

func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Request) Execute() (*GameCenterMatchmakingQueueRequestsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsExecute(r)
}

/*
GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0 Method for GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Request
*/
func (a *MetricsAPIService) GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Request {
	return ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingQueueRequestsV1MetricResponse
func (a *MetricsAPIService) GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsExecute(r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics_0Request) (*GameCenterMatchmakingQueueRequestsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingQueueRequestsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "form", "csv")
	}
	if r.filterResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[result]", r.filterResult, "form", "")
	}
	if r.filterGameCenterDetail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterDetail]", r.filterGameCenterDetail, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0Request struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *string
	sort *[]string
	limit *int32
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0Request) Granularity(granularity string) ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0Request {
	r.granularity = &granularity
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0Request) Sort(sort []string) ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0Request {
	r.sort = &sort
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0Request) Limit(limit int32) ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0Request {
	r.limit = &limit
	return r
}

func (r ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0Request) Execute() (*GameCenterMatchmakingSessionsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsExecute(r)
}

/*
GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0 Method for GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0Request
*/
func (a *MetricsAPIService) GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0Request {
	return ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingSessionsV1MetricResponse
func (a *MetricsAPIService) GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsExecute(r ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics_0Request) (*GameCenterMatchmakingSessionsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingSessionsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Request struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *string
	groupBy *[]string
	filterResult *string
	filterGameCenterMatchmakingQueue *string
	sort *[]string
	limit *int32
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Request) Granularity(granularity string) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Request {
	r.granularity = &granularity
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Request) GroupBy(groupBy []string) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Request {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;result&#39; attribute dimension
func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Request) FilterResult(filterResult string) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Request {
	r.filterResult = &filterResult
	return r
}

// filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension
func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Request) FilterGameCenterMatchmakingQueue(filterGameCenterMatchmakingQueue string) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Request {
	r.filterGameCenterMatchmakingQueue = &filterGameCenterMatchmakingQueue
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Request) Sort(sort []string) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Request {
	r.sort = &sort
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Request) Limit(limit int32) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Request {
	r.limit = &limit
	return r
}

func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Request) Execute() (*GameCenterMatchmakingBooleanRuleResultsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsExecute(r)
}

/*
GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0 Method for GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Request
*/
func (a *MetricsAPIService) GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Request {
	return ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingBooleanRuleResultsV1MetricResponse
func (a *MetricsAPIService) GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsExecute(r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics_0Request) (*GameCenterMatchmakingBooleanRuleResultsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingBooleanRuleResultsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "form", "csv")
	}
	if r.filterResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[result]", r.filterResult, "form", "")
	}
	if r.filterGameCenterMatchmakingQueue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterMatchmakingQueue]", r.filterGameCenterMatchmakingQueue, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Request struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *string
	groupBy *[]string
	filterGameCenterMatchmakingQueue *string
	sort *[]string
	limit *int32
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Request) Granularity(granularity string) ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Request {
	r.granularity = &granularity
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Request) GroupBy(groupBy []string) ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Request {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension
func (r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Request) FilterGameCenterMatchmakingQueue(filterGameCenterMatchmakingQueue string) ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Request {
	r.filterGameCenterMatchmakingQueue = &filterGameCenterMatchmakingQueue
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Request) Sort(sort []string) ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Request {
	r.sort = &sort
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Request) Limit(limit int32) ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Request {
	r.limit = &limit
	return r
}

func (r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Request) Execute() (*GameCenterMatchmakingNumberRuleResultsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsExecute(r)
}

/*
GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0 Method for GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Request
*/
func (a *MetricsAPIService) GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Request {
	return ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingNumberRuleResultsV1MetricResponse
func (a *MetricsAPIService) GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsExecute(r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics_0Request) (*GameCenterMatchmakingNumberRuleResultsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingNumberRuleResultsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "form", "csv")
	}
	if r.filterGameCenterMatchmakingQueue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterMatchmakingQueue]", r.filterGameCenterMatchmakingQueue, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Request struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *string
	groupBy *[]string
	filterGameCenterMatchmakingQueue *string
	sort *[]string
	limit *int32
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Request) Granularity(granularity string) ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Request {
	r.granularity = &granularity
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Request) GroupBy(groupBy []string) ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Request {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension
func (r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Request) FilterGameCenterMatchmakingQueue(filterGameCenterMatchmakingQueue string) ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Request {
	r.filterGameCenterMatchmakingQueue = &filterGameCenterMatchmakingQueue
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Request) Sort(sort []string) ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Request {
	r.sort = &sort
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Request) Limit(limit int32) ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Request {
	r.limit = &limit
	return r
}

func (r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Request) Execute() (*GameCenterMatchmakingRuleErrorsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsExecute(r)
}

/*
GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0 Method for GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Request
*/
func (a *MetricsAPIService) GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Request {
	return ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingRuleErrorsV1MetricResponse
func (a *MetricsAPIService) GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsExecute(r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics_0Request) (*GameCenterMatchmakingRuleErrorsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingRuleErrorsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "form", "")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "form", "csv")
	}
	if r.filterGameCenterMatchmakingQueue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterMatchmakingQueue]", r.filterGameCenterMatchmakingQueue, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

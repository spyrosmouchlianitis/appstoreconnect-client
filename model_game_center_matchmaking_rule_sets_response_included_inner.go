/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// GameCenterMatchmakingRuleSetsResponseIncludedInner - struct for GameCenterMatchmakingRuleSetsResponseIncludedInner
type GameCenterMatchmakingRuleSetsResponseIncludedInner struct {
	GameCenterMatchmakingQueue *GameCenterMatchmakingQueue
	GameCenterMatchmakingRule *GameCenterMatchmakingRule
	GameCenterMatchmakingTeam *GameCenterMatchmakingTeam
}

// GameCenterMatchmakingQueueAsGameCenterMatchmakingRuleSetsResponseIncludedInner is a convenience function that returns GameCenterMatchmakingQueue wrapped in GameCenterMatchmakingRuleSetsResponseIncludedInner
func GameCenterMatchmakingQueueAsGameCenterMatchmakingRuleSetsResponseIncludedInner(v *GameCenterMatchmakingQueue) GameCenterMatchmakingRuleSetsResponseIncludedInner {
	return GameCenterMatchmakingRuleSetsResponseIncludedInner{
		GameCenterMatchmakingQueue: v,
	}
}

// GameCenterMatchmakingRuleAsGameCenterMatchmakingRuleSetsResponseIncludedInner is a convenience function that returns GameCenterMatchmakingRule wrapped in GameCenterMatchmakingRuleSetsResponseIncludedInner
func GameCenterMatchmakingRuleAsGameCenterMatchmakingRuleSetsResponseIncludedInner(v *GameCenterMatchmakingRule) GameCenterMatchmakingRuleSetsResponseIncludedInner {
	return GameCenterMatchmakingRuleSetsResponseIncludedInner{
		GameCenterMatchmakingRule: v,
	}
}

// GameCenterMatchmakingTeamAsGameCenterMatchmakingRuleSetsResponseIncludedInner is a convenience function that returns GameCenterMatchmakingTeam wrapped in GameCenterMatchmakingRuleSetsResponseIncludedInner
func GameCenterMatchmakingTeamAsGameCenterMatchmakingRuleSetsResponseIncludedInner(v *GameCenterMatchmakingTeam) GameCenterMatchmakingRuleSetsResponseIncludedInner {
	return GameCenterMatchmakingRuleSetsResponseIncludedInner{
		GameCenterMatchmakingTeam: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GameCenterMatchmakingRuleSetsResponseIncludedInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GameCenterMatchmakingQueue
	err = newStrictDecoder(data).Decode(&dst.GameCenterMatchmakingQueue)
	if err == nil {
		jsonGameCenterMatchmakingQueue, _ := json.Marshal(dst.GameCenterMatchmakingQueue)
		if string(jsonGameCenterMatchmakingQueue) == "{}" { // empty struct
			dst.GameCenterMatchmakingQueue = nil
		} else {
			if err = validator.Validate(dst.GameCenterMatchmakingQueue); err != nil {
				dst.GameCenterMatchmakingQueue = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterMatchmakingQueue = nil
	}

	// try to unmarshal data into GameCenterMatchmakingRule
	err = newStrictDecoder(data).Decode(&dst.GameCenterMatchmakingRule)
	if err == nil {
		jsonGameCenterMatchmakingRule, _ := json.Marshal(dst.GameCenterMatchmakingRule)
		if string(jsonGameCenterMatchmakingRule) == "{}" { // empty struct
			dst.GameCenterMatchmakingRule = nil
		} else {
			if err = validator.Validate(dst.GameCenterMatchmakingRule); err != nil {
				dst.GameCenterMatchmakingRule = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterMatchmakingRule = nil
	}

	// try to unmarshal data into GameCenterMatchmakingTeam
	err = newStrictDecoder(data).Decode(&dst.GameCenterMatchmakingTeam)
	if err == nil {
		jsonGameCenterMatchmakingTeam, _ := json.Marshal(dst.GameCenterMatchmakingTeam)
		if string(jsonGameCenterMatchmakingTeam) == "{}" { // empty struct
			dst.GameCenterMatchmakingTeam = nil
		} else {
			if err = validator.Validate(dst.GameCenterMatchmakingTeam); err != nil {
				dst.GameCenterMatchmakingTeam = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterMatchmakingTeam = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GameCenterMatchmakingQueue = nil
		dst.GameCenterMatchmakingRule = nil
		dst.GameCenterMatchmakingTeam = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GameCenterMatchmakingRuleSetsResponseIncludedInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GameCenterMatchmakingRuleSetsResponseIncludedInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GameCenterMatchmakingRuleSetsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	if src.GameCenterMatchmakingQueue != nil {
		return json.Marshal(&src.GameCenterMatchmakingQueue)
	}

	if src.GameCenterMatchmakingRule != nil {
		return json.Marshal(&src.GameCenterMatchmakingRule)
	}

	if src.GameCenterMatchmakingTeam != nil {
		return json.Marshal(&src.GameCenterMatchmakingTeam)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GameCenterMatchmakingRuleSetsResponseIncludedInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GameCenterMatchmakingQueue != nil {
		return obj.GameCenterMatchmakingQueue
	}

	if obj.GameCenterMatchmakingRule != nil {
		return obj.GameCenterMatchmakingRule
	}

	if obj.GameCenterMatchmakingTeam != nil {
		return obj.GameCenterMatchmakingTeam
	}

	// all schemas are nil
	return nil
}

type NullableGameCenterMatchmakingRuleSetsResponseIncludedInner struct {
	value *GameCenterMatchmakingRuleSetsResponseIncludedInner
	isSet bool
}

func (v NullableGameCenterMatchmakingRuleSetsResponseIncludedInner) Get() *GameCenterMatchmakingRuleSetsResponseIncludedInner {
	return v.value
}

func (v *NullableGameCenterMatchmakingRuleSetsResponseIncludedInner) Set(val *GameCenterMatchmakingRuleSetsResponseIncludedInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGameCenterMatchmakingRuleSetsResponseIncludedInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGameCenterMatchmakingRuleSetsResponseIncludedInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGameCenterMatchmakingRuleSetsResponseIncludedInner(val *GameCenterMatchmakingRuleSetsResponseIncludedInner) *NullableGameCenterMatchmakingRuleSetsResponseIncludedInner {
	return &NullableGameCenterMatchmakingRuleSetsResponseIncludedInner{value: val, isSet: true}
}

func (v NullableGameCenterMatchmakingRuleSetsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGameCenterMatchmakingRuleSetsResponseIncludedInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



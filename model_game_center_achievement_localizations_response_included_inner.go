/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnectclient

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// GameCenterAchievementLocalizationsResponseIncludedInner - struct for GameCenterAchievementLocalizationsResponseIncludedInner
type GameCenterAchievementLocalizationsResponseIncludedInner struct {
	GameCenterAchievement *GameCenterAchievement
	GameCenterAchievementImage *GameCenterAchievementImage
}

// GameCenterAchievementAsGameCenterAchievementLocalizationsResponseIncludedInner is a convenience function that returns GameCenterAchievement wrapped in GameCenterAchievementLocalizationsResponseIncludedInner
func GameCenterAchievementAsGameCenterAchievementLocalizationsResponseIncludedInner(v *GameCenterAchievement) GameCenterAchievementLocalizationsResponseIncludedInner {
	return GameCenterAchievementLocalizationsResponseIncludedInner{
		GameCenterAchievement: v,
	}
}

// GameCenterAchievementImageAsGameCenterAchievementLocalizationsResponseIncludedInner is a convenience function that returns GameCenterAchievementImage wrapped in GameCenterAchievementLocalizationsResponseIncludedInner
func GameCenterAchievementImageAsGameCenterAchievementLocalizationsResponseIncludedInner(v *GameCenterAchievementImage) GameCenterAchievementLocalizationsResponseIncludedInner {
	return GameCenterAchievementLocalizationsResponseIncludedInner{
		GameCenterAchievementImage: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GameCenterAchievementLocalizationsResponseIncludedInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GameCenterAchievement
	err = newStrictDecoder(data).Decode(&dst.GameCenterAchievement)
	if err == nil {
		jsonGameCenterAchievement, _ := json.Marshal(dst.GameCenterAchievement)
		if string(jsonGameCenterAchievement) == "{}" { // empty struct
			dst.GameCenterAchievement = nil
		} else {
			if err = validator.Validate(dst.GameCenterAchievement); err != nil {
				dst.GameCenterAchievement = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterAchievement = nil
	}

	// try to unmarshal data into GameCenterAchievementImage
	err = newStrictDecoder(data).Decode(&dst.GameCenterAchievementImage)
	if err == nil {
		jsonGameCenterAchievementImage, _ := json.Marshal(dst.GameCenterAchievementImage)
		if string(jsonGameCenterAchievementImage) == "{}" { // empty struct
			dst.GameCenterAchievementImage = nil
		} else {
			if err = validator.Validate(dst.GameCenterAchievementImage); err != nil {
				dst.GameCenterAchievementImage = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterAchievementImage = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GameCenterAchievement = nil
		dst.GameCenterAchievementImage = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GameCenterAchievementLocalizationsResponseIncludedInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GameCenterAchievementLocalizationsResponseIncludedInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GameCenterAchievementLocalizationsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	if src.GameCenterAchievement != nil {
		return json.Marshal(&src.GameCenterAchievement)
	}

	if src.GameCenterAchievementImage != nil {
		return json.Marshal(&src.GameCenterAchievementImage)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GameCenterAchievementLocalizationsResponseIncludedInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GameCenterAchievement != nil {
		return obj.GameCenterAchievement
	}

	if obj.GameCenterAchievementImage != nil {
		return obj.GameCenterAchievementImage
	}

	// all schemas are nil
	return nil
}

type NullableGameCenterAchievementLocalizationsResponseIncludedInner struct {
	value *GameCenterAchievementLocalizationsResponseIncludedInner
	isSet bool
}

func (v NullableGameCenterAchievementLocalizationsResponseIncludedInner) Get() *GameCenterAchievementLocalizationsResponseIncludedInner {
	return v.value
}

func (v *NullableGameCenterAchievementLocalizationsResponseIncludedInner) Set(val *GameCenterAchievementLocalizationsResponseIncludedInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGameCenterAchievementLocalizationsResponseIncludedInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGameCenterAchievementLocalizationsResponseIncludedInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGameCenterAchievementLocalizationsResponseIncludedInner(val *GameCenterAchievementLocalizationsResponseIncludedInner) *NullableGameCenterAchievementLocalizationsResponseIncludedInner {
	return &NullableGameCenterAchievementLocalizationsResponseIncludedInner{value: val, isSet: true}
}

func (v NullableGameCenterAchievementLocalizationsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGameCenterAchievementLocalizationsResponseIncludedInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



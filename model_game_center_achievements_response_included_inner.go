/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.6.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect-client

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// GameCenterAchievementsResponseIncludedInner - struct for GameCenterAchievementsResponseIncludedInner
type GameCenterAchievementsResponseIncludedInner struct {
	GameCenterAchievement *GameCenterAchievement
	GameCenterAchievementLocalization *GameCenterAchievementLocalization
	GameCenterAchievementRelease *GameCenterAchievementRelease
	GameCenterDetail *GameCenterDetail
	GameCenterGroup *GameCenterGroup
}

// GameCenterAchievementAsGameCenterAchievementsResponseIncludedInner is a convenience function that returns GameCenterAchievement wrapped in GameCenterAchievementsResponseIncludedInner
func GameCenterAchievementAsGameCenterAchievementsResponseIncludedInner(v *GameCenterAchievement) GameCenterAchievementsResponseIncludedInner {
	return GameCenterAchievementsResponseIncludedInner{
		GameCenterAchievement: v,
	}
}

// GameCenterAchievementLocalizationAsGameCenterAchievementsResponseIncludedInner is a convenience function that returns GameCenterAchievementLocalization wrapped in GameCenterAchievementsResponseIncludedInner
func GameCenterAchievementLocalizationAsGameCenterAchievementsResponseIncludedInner(v *GameCenterAchievementLocalization) GameCenterAchievementsResponseIncludedInner {
	return GameCenterAchievementsResponseIncludedInner{
		GameCenterAchievementLocalization: v,
	}
}

// GameCenterAchievementReleaseAsGameCenterAchievementsResponseIncludedInner is a convenience function that returns GameCenterAchievementRelease wrapped in GameCenterAchievementsResponseIncludedInner
func GameCenterAchievementReleaseAsGameCenterAchievementsResponseIncludedInner(v *GameCenterAchievementRelease) GameCenterAchievementsResponseIncludedInner {
	return GameCenterAchievementsResponseIncludedInner{
		GameCenterAchievementRelease: v,
	}
}

// GameCenterDetailAsGameCenterAchievementsResponseIncludedInner is a convenience function that returns GameCenterDetail wrapped in GameCenterAchievementsResponseIncludedInner
func GameCenterDetailAsGameCenterAchievementsResponseIncludedInner(v *GameCenterDetail) GameCenterAchievementsResponseIncludedInner {
	return GameCenterAchievementsResponseIncludedInner{
		GameCenterDetail: v,
	}
}

// GameCenterGroupAsGameCenterAchievementsResponseIncludedInner is a convenience function that returns GameCenterGroup wrapped in GameCenterAchievementsResponseIncludedInner
func GameCenterGroupAsGameCenterAchievementsResponseIncludedInner(v *GameCenterGroup) GameCenterAchievementsResponseIncludedInner {
	return GameCenterAchievementsResponseIncludedInner{
		GameCenterGroup: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GameCenterAchievementsResponseIncludedInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GameCenterAchievement
	err = newStrictDecoder(data).Decode(&dst.GameCenterAchievement)
	if err == nil {
		jsonGameCenterAchievement, _ := json.Marshal(dst.GameCenterAchievement)
		if string(jsonGameCenterAchievement) == "{}" { // empty struct
			dst.GameCenterAchievement = nil
		} else {
			if err = validator.Validate(dst.GameCenterAchievement); err != nil {
				dst.GameCenterAchievement = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterAchievement = nil
	}

	// try to unmarshal data into GameCenterAchievementLocalization
	err = newStrictDecoder(data).Decode(&dst.GameCenterAchievementLocalization)
	if err == nil {
		jsonGameCenterAchievementLocalization, _ := json.Marshal(dst.GameCenterAchievementLocalization)
		if string(jsonGameCenterAchievementLocalization) == "{}" { // empty struct
			dst.GameCenterAchievementLocalization = nil
		} else {
			if err = validator.Validate(dst.GameCenterAchievementLocalization); err != nil {
				dst.GameCenterAchievementLocalization = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterAchievementLocalization = nil
	}

	// try to unmarshal data into GameCenterAchievementRelease
	err = newStrictDecoder(data).Decode(&dst.GameCenterAchievementRelease)
	if err == nil {
		jsonGameCenterAchievementRelease, _ := json.Marshal(dst.GameCenterAchievementRelease)
		if string(jsonGameCenterAchievementRelease) == "{}" { // empty struct
			dst.GameCenterAchievementRelease = nil
		} else {
			if err = validator.Validate(dst.GameCenterAchievementRelease); err != nil {
				dst.GameCenterAchievementRelease = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterAchievementRelease = nil
	}

	// try to unmarshal data into GameCenterDetail
	err = newStrictDecoder(data).Decode(&dst.GameCenterDetail)
	if err == nil {
		jsonGameCenterDetail, _ := json.Marshal(dst.GameCenterDetail)
		if string(jsonGameCenterDetail) == "{}" { // empty struct
			dst.GameCenterDetail = nil
		} else {
			if err = validator.Validate(dst.GameCenterDetail); err != nil {
				dst.GameCenterDetail = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterDetail = nil
	}

	// try to unmarshal data into GameCenterGroup
	err = newStrictDecoder(data).Decode(&dst.GameCenterGroup)
	if err == nil {
		jsonGameCenterGroup, _ := json.Marshal(dst.GameCenterGroup)
		if string(jsonGameCenterGroup) == "{}" { // empty struct
			dst.GameCenterGroup = nil
		} else {
			if err = validator.Validate(dst.GameCenterGroup); err != nil {
				dst.GameCenterGroup = nil
			} else {
				match++
			}
		}
	} else {
		dst.GameCenterGroup = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GameCenterAchievement = nil
		dst.GameCenterAchievementLocalization = nil
		dst.GameCenterAchievementRelease = nil
		dst.GameCenterDetail = nil
		dst.GameCenterGroup = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GameCenterAchievementsResponseIncludedInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GameCenterAchievementsResponseIncludedInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GameCenterAchievementsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	if src.GameCenterAchievement != nil {
		return json.Marshal(&src.GameCenterAchievement)
	}

	if src.GameCenterAchievementLocalization != nil {
		return json.Marshal(&src.GameCenterAchievementLocalization)
	}

	if src.GameCenterAchievementRelease != nil {
		return json.Marshal(&src.GameCenterAchievementRelease)
	}

	if src.GameCenterDetail != nil {
		return json.Marshal(&src.GameCenterDetail)
	}

	if src.GameCenterGroup != nil {
		return json.Marshal(&src.GameCenterGroup)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GameCenterAchievementsResponseIncludedInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GameCenterAchievement != nil {
		return obj.GameCenterAchievement
	}

	if obj.GameCenterAchievementLocalization != nil {
		return obj.GameCenterAchievementLocalization
	}

	if obj.GameCenterAchievementRelease != nil {
		return obj.GameCenterAchievementRelease
	}

	if obj.GameCenterDetail != nil {
		return obj.GameCenterDetail
	}

	if obj.GameCenterGroup != nil {
		return obj.GameCenterGroup
	}

	// all schemas are nil
	return nil
}

type NullableGameCenterAchievementsResponseIncludedInner struct {
	value *GameCenterAchievementsResponseIncludedInner
	isSet bool
}

func (v NullableGameCenterAchievementsResponseIncludedInner) Get() *GameCenterAchievementsResponseIncludedInner {
	return v.value
}

func (v *NullableGameCenterAchievementsResponseIncludedInner) Set(val *GameCenterAchievementsResponseIncludedInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGameCenterAchievementsResponseIncludedInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGameCenterAchievementsResponseIncludedInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGameCenterAchievementsResponseIncludedInner(val *GameCenterAchievementsResponseIncludedInner) *NullableGameCenterAchievementsResponseIncludedInner {
	return &NullableGameCenterAchievementsResponseIncludedInner{value: val, isSet: true}
}

func (v NullableGameCenterAchievementsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGameCenterAchievementsResponseIncludedInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


